<html xmlns:v="urn:schemas-microsoft-com:vml"
xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns:m="http://schemas.microsoft.com/office/2004/12/omml"
xmlns:mv="http://macVmlSchemaUri" xmlns="http://www.w3.org/TR/REC-html40"><head><meta name=Title content=M><meta name=Keywords content=""><meta http-equiv=Content-Type content="text/html; charset=windows-1252"><meta name=ProgId content=Word.Document><meta name=Generator content="Microsoft Word 14"><meta name=Originator content="Microsoft Word 14"><link rel=File-List href="manual_files/filelist.xml"><link rel=Edit-Time-Data href="manual_files/editdata.mso"><link rel=OLE-Object-Data href="manual_files/oledata.mso"><&#33;--[if &#33;mso]><style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style><&#33;[endif]--><title>M</title><&#33;--[if gte mso 9]><xml><o:DocumentProperties><o:Author>Michael Scott</o:Author><o:LastAuthor>Brian Spector</o:LastAuthor><o:Revision>2</o:Revision><o:TotalTime>1</o:TotalTime><o:LastPrinted>2006-02-14T10:29:00Z</o:LastPrinted><o:Created>2013-06-19T16:47:00Z</o:Created><o:LastSaved>2013-06-19T16:47:00Z</o:LastSaved><o:Pages>5</o:Pages><o:Words>32934</o:Words><o:Characters>187726</o:Characters><o:Company>School of Computing, DCU</o:Company><o:Lines>1564</o:Lines><o:Paragraphs>440</o:Paragraphs><o:CharactersWithSpaces>220220</o:CharactersWithSpaces><o:Version>14.0</o:Version></o:DocumentProperties><o:OfficeDocumentSettings><o:PixelsPerInch>96</o:PixelsPerInch><o:TargetScreenSize>800x600</o:TargetScreenSize></o:OfficeDocumentSettings></xml><&#33;[endif]--><link rel=themeData href="manual_files/themedata.xml"><&#33;--[if gte mso 9]><xml><w:WordDocument><w:TrackMoves>false</w:TrackMoves><w:TrackFormatting/><w:DrawingGridHorizontalSpacing>0 pt</w:DrawingGridHorizontalSpacing><w:DrawingGridVerticalSpacing>0 pt</w:DrawingGridVerticalSpacing><w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery><w:DisplayVerticalDrawingGridEvery>0</w:DisplayVerticalDrawingGridEvery><w:UseMarginsForDrawingGridOrigin/><w:ValidateAgainstSchemas/><w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid><w:IgnoreMixedContent>false</w:IgnoreMixedContent><w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText><w:DoNotPromoteQF/><w:LidThemeOther>EN-US</w:LidThemeOther><w:LidThemeAsian>JA</w:LidThemeAsian><w:LidThemeComplexScript>X-NONE</w:LidThemeComplexScript><w:DrawingGridHorizontalOrigin>0 pt</w:DrawingGridHorizontalOrigin><w:DrawingGridVerticalOrigin>0 pt</w:DrawingGridVerticalOrigin><w:Compatibility><w:SpaceForUL/><w:BalanceSingleByteDoubleByteWidth/><w:DoNotLeaveBackslashAlone/><w:ULTrailSpace/><w:DoNotExpandShiftReturn/><w:UsePrinterMetrics/><w:AdjustLineHeightInTable/><w:DoNotUseHTMLParagraphAutoSpacing/><w:SelectEntireFieldWithStartOrEnd/><w:UseWord2002TableStyleRules/><w:DontUseIndentAsNumberingTabStop/><w:FELineBreak11/><w:WW11IndentRules/><w:DontAutofitConstrainedTables/><w:AutofitLikeWW11/><w:HangulWidthLikeWW11/><w:UseNormalStyleForList/><w:DontVertAlignCellWithSp/><w:DontBreakConstrainedForcedTables/><w:DontVertAlignInTxbx/><w:Word11KerningPairs/><w:CachedColBalance/></w:Compatibility><m:mathPr><m:mathFont m:val="Cambria Math"/><m:brkBin m:val="before"/><m:brkBinSub m:val="&#45;-"/><m:smallFrac m:val="off"/><m:dispDef/><m:lMargin m:val="0"/><m:rMargin m:val="0"/><m:defJc m:val="centerGroup"/><m:wrapIndent m:val="1440"/><m:intLim m:val="subSup"/><m:naryLim m:val="undOvr"/></m:mathPr></w:WordDocument></xml><&#33;[endif]--><&#33;--[if gte mso 9]><xml><w:LatentStyles DefLockedState="false" DefUnhideWhenUsed="true"
DefSemiHidden="true" DefQFormat="false" DefPriority="99"
LatentStyleCount="276"><w:LsdException Locked="false" Priority="0" SemiHidden="false"
UnhideWhenUsed="false" QFormat="true" Name="Normal"/><w:LsdException Locked="false" Priority="9" SemiHidden="false"
UnhideWhenUsed="false" QFormat="true" Name="heading 1"/><w:LsdException Locked="false" Priority="9" SemiHidden="false"
UnhideWhenUsed="false" QFormat="true" Name="heading 2"/><w:LsdException Locked="false" Priority="9" SemiHidden="false"
UnhideWhenUsed="false" QFormat="true" Name="heading 3"/><w:LsdException Locked="false" Priority="9" SemiHidden="false"
UnhideWhenUsed="false" QFormat="true" Name="heading 4"/><w:LsdException Locked="false" Priority="9" SemiHidden="false"
UnhideWhenUsed="false" QFormat="true" Name="heading 5"/><w:LsdException Locked="false" Priority="9" SemiHidden="false"
UnhideWhenUsed="false" QFormat="true" Name="heading 6"/><w:LsdException Locked="false" Priority="9" SemiHidden="false"
UnhideWhenUsed="false" QFormat="true" Name="heading 7"/><w:LsdException Locked="false" Priority="9" SemiHidden="false"
UnhideWhenUsed="false" QFormat="true" Name="heading 8"/><w:LsdException Locked="false" Priority="9" SemiHidden="false"
UnhideWhenUsed="false" QFormat="true" Name="heading 9"/><w:LsdException Locked="false" Priority="39" Name="toc 1"/><w:LsdException Locked="false" Priority="39" Name="toc 2"/><w:LsdException Locked="false" Priority="39" Name="toc 3"/><w:LsdException Locked="false" Priority="39" Name="toc 4"/><w:LsdException Locked="false" Priority="39" Name="toc 5"/><w:LsdException Locked="false" Priority="39" Name="toc 6"/><w:LsdException Locked="false" Priority="39" Name="toc 7"/><w:LsdException Locked="false" Priority="39" Name="toc 8"/><w:LsdException Locked="false" Priority="39" Name="toc 9"/><w:LsdException Locked="false" Priority="35" SemiHidden="false"
UnhideWhenUsed="false" QFormat="true" Name="caption"/><w:LsdException Locked="false" Priority="10" SemiHidden="false"
UnhideWhenUsed="false" QFormat="true" Name="Title"/><w:LsdException Locked="false" Priority="0" Name="Default Paragraph Font"/><w:LsdException Locked="false" Priority="11" SemiHidden="false"
UnhideWhenUsed="false" QFormat="true" Name="Subtitle"/><w:LsdException Locked="false" Priority="22" SemiHidden="false"
UnhideWhenUsed="false" QFormat="true" Name="Strong"/><w:LsdException Locked="false" Priority="20" SemiHidden="false"
UnhideWhenUsed="false" QFormat="true" Name="Emphasis"/><w:LsdException Locked="false" Priority="0" Name="No List"/><w:LsdException Locked="false" Priority="59" SemiHidden="false"
UnhideWhenUsed="false" Name="Table Grid"/><w:LsdException Locked="false" UnhideWhenUsed="false" Name="Placeholder Text"/><w:LsdException Locked="false" Priority="1" SemiHidden="false"
UnhideWhenUsed="false" QFormat="true" Name="No Spacing"/><w:LsdException Locked="false" Priority="60" SemiHidden="false"
UnhideWhenUsed="false" Name="Light Shading"/><w:LsdException Locked="false" Priority="61" SemiHidden="false"
UnhideWhenUsed="false" Name="Light List"/><w:LsdException Locked="false" Priority="62" SemiHidden="false"
UnhideWhenUsed="false" Name="Light Grid"/><w:LsdException Locked="false" Priority="63" SemiHidden="false"
UnhideWhenUsed="false" Name="Medium Shading 1"/><w:LsdException Locked="false" Priority="64" SemiHidden="false"
UnhideWhenUsed="false" Name="Medium Shading 2"/><w:LsdException Locked="false" Priority="65" SemiHidden="false"
UnhideWhenUsed="false" Name="Medium List 1"/><w:LsdException Locked="false" Priority="66" SemiHidden="false"
UnhideWhenUsed="false" Name="Medium List 2"/><w:LsdException Locked="false" Priority="67" SemiHidden="false"
UnhideWhenUsed="false" Name="Medium Grid 1"/><w:LsdException Locked="false" Priority="68" SemiHidden="false"
UnhideWhenUsed="false" Name="Medium Grid 2"/><w:LsdException Locked="false" Priority="69" SemiHidden="false"
UnhideWhenUsed="false" Name="Medium Grid 3"/><w:LsdException Locked="false" Priority="70" SemiHidden="false"
UnhideWhenUsed="false" Name="Dark List"/><w:LsdException Locked="false" Priority="71" SemiHidden="false"
UnhideWhenUsed="false" Name="Colorful Shading"/><w:LsdException Locked="false" Priority="72" SemiHidden="false"
UnhideWhenUsed="false" Name="Colorful List"/><w:LsdException Locked="false" Priority="73" SemiHidden="false"
UnhideWhenUsed="false" Name="Colorful Grid"/><w:LsdException Locked="false" Priority="60" SemiHidden="false"
UnhideWhenUsed="false" Name="Light Shading Accent 1"/><w:LsdException Locked="false" Priority="61" SemiHidden="false"
UnhideWhenUsed="false" Name="Light List Accent 1"/><w:LsdException Locked="false" Priority="62" SemiHidden="false"
UnhideWhenUsed="false" Name="Light Grid Accent 1"/><w:LsdException Locked="false" Priority="63" SemiHidden="false"
UnhideWhenUsed="false" Name="Medium Shading 1 Accent 1"/><w:LsdException Locked="false" Priority="64" SemiHidden="false"
UnhideWhenUsed="false" Name="Medium Shading 2 Accent 1"/><w:LsdException Locked="false" Priority="65" SemiHidden="false"
UnhideWhenUsed="false" Name="Medium List 1 Accent 1"/><w:LsdException Locked="false" UnhideWhenUsed="false" Name="Revision"/><w:LsdException Locked="false" Priority="34" SemiHidden="false"
UnhideWhenUsed="false" QFormat="true" Name="List Paragraph"/><w:LsdException Locked="false" Priority="29" SemiHidden="false"
UnhideWhenUsed="false" QFormat="true" Name="Quote"/><w:LsdException Locked="false" Priority="30" SemiHidden="false"
UnhideWhenUsed="false" QFormat="true" Name="Intense Quote"/><w:LsdException Locked="false" Priority="66" SemiHidden="false"
UnhideWhenUsed="false" Name="Medium List 2 Accent 1"/><w:LsdException Locked="false" Priority="67" SemiHidden="false"
UnhideWhenUsed="false" Name="Medium Grid 1 Accent 1"/><w:LsdException Locked="false" Priority="68" SemiHidden="false"
UnhideWhenUsed="false" Name="Medium Grid 2 Accent 1"/><w:LsdException Locked="false" Priority="69" SemiHidden="false"
UnhideWhenUsed="false" Name="Medium Grid 3 Accent 1"/><w:LsdException Locked="false" Priority="70" SemiHidden="false"
UnhideWhenUsed="false" Name="Dark List Accent 1"/><w:LsdException Locked="false" Priority="71" SemiHidden="false"
UnhideWhenUsed="false" Name="Colorful Shading Accent 1"/><w:LsdException Locked="false" Priority="72" SemiHidden="false"
UnhideWhenUsed="false" Name="Colorful List Accent 1"/><w:LsdException Locked="false" Priority="73" SemiHidden="false"
UnhideWhenUsed="false" Name="Colorful Grid Accent 1"/><w:LsdException Locked="false" Priority="60" SemiHidden="false"
UnhideWhenUsed="false" Name="Light Shading Accent 2"/><w:LsdException Locked="false" Priority="61" SemiHidden="false"
UnhideWhenUsed="false" Name="Light List Accent 2"/><w:LsdException Locked="false" Priority="62" SemiHidden="false"
UnhideWhenUsed="false" Name="Light Grid Accent 2"/><w:LsdException Locked="false" Priority="63" SemiHidden="false"
UnhideWhenUsed="false" Name="Medium Shading 1 Accent 2"/><w:LsdException Locked="false" Priority="64" SemiHidden="false"
UnhideWhenUsed="false" Name="Medium Shading 2 Accent 2"/><w:LsdException Locked="false" Priority="65" SemiHidden="false"
UnhideWhenUsed="false" Name="Medium List 1 Accent 2"/><w:LsdException Locked="false" Priority="66" SemiHidden="false"
UnhideWhenUsed="false" Name="Medium List 2 Accent 2"/><w:LsdException Locked="false" Priority="67" SemiHidden="false"
UnhideWhenUsed="false" Name="Medium Grid 1 Accent 2"/><w:LsdException Locked="false" Priority="68" SemiHidden="false"
UnhideWhenUsed="false" Name="Medium Grid 2 Accent 2"/><w:LsdException Locked="false" Priority="69" SemiHidden="false"
UnhideWhenUsed="false" Name="Medium Grid 3 Accent 2"/><w:LsdException Locked="false" Priority="70" SemiHidden="false"
UnhideWhenUsed="false" Name="Dark List Accent 2"/><w:LsdException Locked="false" Priority="71" SemiHidden="false"
UnhideWhenUsed="false" Name="Colorful Shading Accent 2"/><w:LsdException Locked="false" Priority="72" SemiHidden="false"
UnhideWhenUsed="false" Name="Colorful List Accent 2"/><w:LsdException Locked="false" Priority="73" SemiHidden="false"
UnhideWhenUsed="false" Name="Colorful Grid Accent 2"/><w:LsdException Locked="false" Priority="60" SemiHidden="false"
UnhideWhenUsed="false" Name="Light Shading Accent 3"/><w:LsdException Locked="false" Priority="61" SemiHidden="false"
UnhideWhenUsed="false" Name="Light List Accent 3"/><w:LsdException Locked="false" Priority="62" SemiHidden="false"
UnhideWhenUsed="false" Name="Light Grid Accent 3"/><w:LsdException Locked="false" Priority="63" SemiHidden="false"
UnhideWhenUsed="false" Name="Medium Shading 1 Accent 3"/><w:LsdException Locked="false" Priority="64" SemiHidden="false"
UnhideWhenUsed="false" Name="Medium Shading 2 Accent 3"/><w:LsdException Locked="false" Priority="65" SemiHidden="false"
UnhideWhenUsed="false" Name="Medium List 1 Accent 3"/><w:LsdException Locked="false" Priority="66" SemiHidden="false"
UnhideWhenUsed="false" Name="Medium List 2 Accent 3"/><w:LsdException Locked="false" Priority="67" SemiHidden="false"
UnhideWhenUsed="false" Name="Medium Grid 1 Accent 3"/><w:LsdException Locked="false" Priority="68" SemiHidden="false"
UnhideWhenUsed="false" Name="Medium Grid 2 Accent 3"/><w:LsdException Locked="false" Priority="69" SemiHidden="false"
UnhideWhenUsed="false" Name="Medium Grid 3 Accent 3"/><w:LsdException Locked="false" Priority="70" SemiHidden="false"
UnhideWhenUsed="false" Name="Dark List Accent 3"/><w:LsdException Locked="false" Priority="71" SemiHidden="false"
UnhideWhenUsed="false" Name="Colorful Shading Accent 3"/><w:LsdException Locked="false" Priority="72" SemiHidden="false"
UnhideWhenUsed="false" Name="Colorful List Accent 3"/><w:LsdException Locked="false" Priority="73" SemiHidden="false"
UnhideWhenUsed="false" Name="Colorful Grid Accent 3"/><w:LsdException Locked="false" Priority="60" SemiHidden="false"
UnhideWhenUsed="false" Name="Light Shading Accent 4"/><w:LsdException Locked="false" Priority="61" SemiHidden="false"
UnhideWhenUsed="false" Name="Light List Accent 4"/><w:LsdException Locked="false" Priority="62" SemiHidden="false"
UnhideWhenUsed="false" Name="Light Grid Accent 4"/><w:LsdException Locked="false" Priority="63" SemiHidden="false"
UnhideWhenUsed="false" Name="Medium Shading 1 Accent 4"/><w:LsdException Locked="false" Priority="64" SemiHidden="false"
UnhideWhenUsed="false" Name="Medium Shading 2 Accent 4"/><w:LsdException Locked="false" Priority="65" SemiHidden="false"
UnhideWhenUsed="false" Name="Medium List 1 Accent 4"/><w:LsdException Locked="false" Priority="66" SemiHidden="false"
UnhideWhenUsed="false" Name="Medium List 2 Accent 4"/><w:LsdException Locked="false" Priority="67" SemiHidden="false"
UnhideWhenUsed="false" Name="Medium Grid 1 Accent 4"/><w:LsdException Locked="false" Priority="68" SemiHidden="false"
UnhideWhenUsed="false" Name="Medium Grid 2 Accent 4"/><w:LsdException Locked="false" Priority="69" SemiHidden="false"
UnhideWhenUsed="false" Name="Medium Grid 3 Accent 4"/><w:LsdException Locked="false" Priority="70" SemiHidden="false"
UnhideWhenUsed="false" Name="Dark List Accent 4"/><w:LsdException Locked="false" Priority="71" SemiHidden="false"
UnhideWhenUsed="false" Name="Colorful Shading Accent 4"/><w:LsdException Locked="false" Priority="72" SemiHidden="false"
UnhideWhenUsed="false" Name="Colorful List Accent 4"/><w:LsdException Locked="false" Priority="73" SemiHidden="false"
UnhideWhenUsed="false" Name="Colorful Grid Accent 4"/><w:LsdException Locked="false" Priority="60" SemiHidden="false"
UnhideWhenUsed="false" Name="Light Shading Accent 5"/><w:LsdException Locked="false" Priority="61" SemiHidden="false"
UnhideWhenUsed="false" Name="Light List Accent 5"/><w:LsdException Locked="false" Priority="62" SemiHidden="false"
UnhideWhenUsed="false" Name="Light Grid Accent 5"/><w:LsdException Locked="false" Priority="63" SemiHidden="false"
UnhideWhenUsed="false" Name="Medium Shading 1 Accent 5"/><w:LsdException Locked="false" Priority="64" SemiHidden="false"
UnhideWhenUsed="false" Name="Medium Shading 2 Accent 5"/><w:LsdException Locked="false" Priority="65" SemiHidden="false"
UnhideWhenUsed="false" Name="Medium List 1 Accent 5"/><w:LsdException Locked="false" Priority="66" SemiHidden="false"
UnhideWhenUsed="false" Name="Medium List 2 Accent 5"/><w:LsdException Locked="false" Priority="67" SemiHidden="false"
UnhideWhenUsed="false" Name="Medium Grid 1 Accent 5"/><w:LsdException Locked="false" Priority="68" SemiHidden="false"
UnhideWhenUsed="false" Name="Medium Grid 2 Accent 5"/><w:LsdException Locked="false" Priority="69" SemiHidden="false"
UnhideWhenUsed="false" Name="Medium Grid 3 Accent 5"/><w:LsdException Locked="false" Priority="70" SemiHidden="false"
UnhideWhenUsed="false" Name="Dark List Accent 5"/><w:LsdException Locked="false" Priority="71" SemiHidden="false"
UnhideWhenUsed="false" Name="Colorful Shading Accent 5"/><w:LsdException Locked="false" Priority="72" SemiHidden="false"
UnhideWhenUsed="false" Name="Colorful List Accent 5"/><w:LsdException Locked="false" Priority="73" SemiHidden="false"
UnhideWhenUsed="false" Name="Colorful Grid Accent 5"/><w:LsdException Locked="false" Priority="60" SemiHidden="false"
UnhideWhenUsed="false" Name="Light Shading Accent 6"/><w:LsdException Locked="false" Priority="61" SemiHidden="false"
UnhideWhenUsed="false" Name="Light List Accent 6"/><w:LsdException Locked="false" Priority="62" SemiHidden="false"
UnhideWhenUsed="false" Name="Light Grid Accent 6"/><w:LsdException Locked="false" Priority="63" SemiHidden="false"
UnhideWhenUsed="false" Name="Medium Shading 1 Accent 6"/><w:LsdException Locked="false" Priority="64" SemiHidden="false"
UnhideWhenUsed="false" Name="Medium Shading 2 Accent 6"/><w:LsdException Locked="false" Priority="65" SemiHidden="false"
UnhideWhenUsed="false" Name="Medium List 1 Accent 6"/><w:LsdException Locked="false" Priority="66" SemiHidden="false"
UnhideWhenUsed="false" Name="Medium List 2 Accent 6"/><w:LsdException Locked="false" Priority="67" SemiHidden="false"
UnhideWhenUsed="false" Name="Medium Grid 1 Accent 6"/><w:LsdException Locked="false" Priority="68" SemiHidden="false"
UnhideWhenUsed="false" Name="Medium Grid 2 Accent 6"/><w:LsdException Locked="false" Priority="69" SemiHidden="false"
UnhideWhenUsed="false" Name="Medium Grid 3 Accent 6"/><w:LsdException Locked="false" Priority="70" SemiHidden="false"
UnhideWhenUsed="false" Name="Dark List Accent 6"/><w:LsdException Locked="false" Priority="71" SemiHidden="false"
UnhideWhenUsed="false" Name="Colorful Shading Accent 6"/><w:LsdException Locked="false" Priority="72" SemiHidden="false"
UnhideWhenUsed="false" Name="Colorful List Accent 6"/><w:LsdException Locked="false" Priority="73" SemiHidden="false"
UnhideWhenUsed="false" Name="Colorful Grid Accent 6"/><w:LsdException Locked="false" Priority="19" SemiHidden="false"
UnhideWhenUsed="false" QFormat="true" Name="Subtle Emphasis"/><w:LsdException Locked="false" Priority="21" SemiHidden="false"
UnhideWhenUsed="false" QFormat="true" Name="Intense Emphasis"/><w:LsdException Locked="false" Priority="31" SemiHidden="false"
UnhideWhenUsed="false" QFormat="true" Name="Subtle Reference"/><w:LsdException Locked="false" Priority="32" SemiHidden="false"
UnhideWhenUsed="false" QFormat="true" Name="Intense Reference"/><w:LsdException Locked="false" Priority="33" SemiHidden="false"
UnhideWhenUsed="false" QFormat="true" Name="Book Title"/><w:LsdException Locked="false" Priority="37" Name="Bibliography"/><w:LsdException Locked="false" Priority="39" QFormat="true" Name="TOC Heading"/></w:LatentStyles></xml><&#33;[endif]--><style><&#33;--
/* Font Definitions */
@font-face
	{font-family:Arial;
	panose-1:2 11 6 4 2 2 2 2 2 4;
	mso-font-charset:0;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:"Courier New";
	panose-1:2 7 3 9 2 2 5 2 4 4;
	mso-font-charset:0;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:Times;
	panose-1:2 0 5 0 0 0 0 0 0 0;
	mso-font-charset:0;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:Geneva;
	panose-1:2 11 5 3 3 4 4 4 2 4;
	mso-font-charset:77;
	mso-generic-font-family:swiss;
	mso-font-format:other;
	mso-font-pitch:variable;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:"Tms Rmn";
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:77;
	mso-generic-font-family:roman;
	mso-font-format:other;
	mso-font-pitch:variable;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:Helv;
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:77;
	mso-generic-font-family:swiss;
	mso-font-format:other;
	mso-font-pitch:variable;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:"MS Serif";
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:77;
	mso-generic-font-family:roman;
	mso-font-format:other;
	mso-font-pitch:variable;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:"MS Sans Serif";
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:77;
	mso-generic-font-family:swiss;
	mso-font-format:other;
	mso-font-pitch:variable;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:"New York";
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:77;
	mso-generic-font-family:roman;
	mso-font-format:other;
	mso-font-pitch:variable;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:System;
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:77;
	mso-generic-font-family:swiss;
	mso-font-format:other;
	mso-font-pitch:variable;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;
	mso-font-charset:2;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:0 268435456 0 0 -2147483648 0;}
@font-face
	{font-family:"MS Mincho";
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:128;
	mso-generic-font-family:roman;
	mso-font-format:other;
	mso-font-pitch:fixed;
	mso-font-signature:1 134676480 16 0 131072 0;}
@font-face
	{font-family:Batang;
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:129;
	mso-generic-font-family:auto;
	mso-font-format:other;
	mso-font-pitch:fixed;
	mso-font-signature:1 151388160 16 0 524288 0;}
@font-face
	{font-family:SimSun;
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:134;
	mso-generic-font-family:auto;
	mso-font-format:other;
	mso-font-pitch:variable;
	mso-font-signature:1 135135232 16 0 262144 0;}
@font-face
	{font-family:PMingLiU;
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:136;
	mso-generic-font-family:auto;
	mso-font-format:other;
	mso-font-pitch:variable;
	mso-font-signature:1 134742016 16 0 1048576 0;}
@font-face
	{font-family:"MS Gothic";
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:128;
	mso-generic-font-family:modern;
	mso-font-format:other;
	mso-font-pitch:fixed;
	mso-font-signature:1 134676480 16 0 131072 0;}
@font-face
	{font-family:Century;
	panose-1:2 4 6 4 5 5 5 2 3 4;
	mso-font-charset:77;
	mso-generic-font-family:roman;
	mso-font-format:other;
	mso-font-pitch:variable;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:Verdana;
	panose-1:2 11 6 4 3 5 4 4 2 4;
	mso-font-charset:0;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:"Angsana New";
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:222;
	mso-generic-font-family:roman;
	mso-font-format:other;
	mso-font-pitch:variable;
	mso-font-signature:16777217 0 0 0 65536 0;}
@font-face
	{font-family:"Cordia New";
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:222;
	mso-generic-font-family:roman;
	mso-font-format:other;
	mso-font-pitch:variable;
	mso-font-signature:16777217 0 0 0 65536 0;}
@font-face
	{font-family:Mangal;
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:1;
	mso-generic-font-family:roman;
	mso-font-format:other;
	mso-font-pitch:variable;
	mso-font-signature:8192 0 0 0 0 0;}
@font-face
	{font-family:Latha;
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:1;
	mso-generic-font-family:roman;
	mso-font-format:other;
	mso-font-pitch:variable;
	mso-font-signature:262144 0 0 0 0 0;}
@font-face
	{font-family:Sylfaen;
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:77;
	mso-generic-font-family:roman;
	mso-font-format:other;
	mso-font-pitch:variable;
	mso-font-signature:12583555 0 0 0 13 0;}
@font-face
	{font-family:Vrinda;
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:1;
	mso-generic-font-family:roman;
	mso-font-format:other;
	mso-font-pitch:variable;
	mso-font-signature:0 0 0 0 0 0;}
@font-face
	{font-family:Raavi;
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:1;
	mso-generic-font-family:roman;
	mso-font-format:other;
	mso-font-pitch:variable;
	mso-font-signature:0 0 0 0 0 0;}
@font-face
	{font-family:Shruti;
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:1;
	mso-generic-font-family:roman;
	mso-font-format:other;
	mso-font-pitch:variable;
	mso-font-signature:0 0 0 0 0 0;}
@font-face
	{font-family:Sendnya;
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:1;
	mso-generic-font-family:roman;
	mso-font-format:other;
	mso-font-pitch:variable;
	mso-font-signature:0 0 0 0 0 0;}
@font-face
	{font-family:Gautami;
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:1;
	mso-generic-font-family:roman;
	mso-font-format:other;
	mso-font-pitch:variable;
	mso-font-signature:0 0 0 0 0 0;}
@font-face
	{font-family:Tunga;
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:1;
	mso-generic-font-family:roman;
	mso-font-format:other;
	mso-font-pitch:variable;
	mso-font-signature:0 0 0 0 0 0;}
@font-face
	{font-family:"Estrangelo Edessa";
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:1;
	mso-generic-font-family:roman;
	mso-font-format:other;
	mso-font-pitch:variable;
	mso-font-signature:0 0 0 0 0 0;}
@font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;
	mso-font-charset:0;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;
	mso-font-charset:0;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:Cambria;
	panose-1:2 4 5 3 5 4 6 3 2 4;
	mso-font-charset:0;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:"MS Gothic";
	mso-font-alt:"MS Gothic";
	mso-font-charset:128;
	mso-generic-font-family:modern;
	mso-font-pitch:fixed;
	mso-font-signature:-536870145 1791491579 18 0 131231 0;}
@font-face
	{font-family:Tahoma;
	panose-1:2 11 6 4 3 5 4 4 2 4;
	mso-font-charset:0;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:"MS Mincho";
	mso-font-alt:"MS Mincho";
	mso-font-charset:128;
	mso-generic-font-family:modern;
	mso-font-pitch:fixed;
	mso-font-signature:-536870145 1791491579 18 0 131231 0;}
@font-face
	{font-family:Impact;
	panose-1:2 11 8 6 3 9 2 5 2 4;
	mso-font-charset:0;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:"Arial Narrow";
	panose-1:2 11 5 6 2 2 2 3 2 4;
	mso-font-charset:0;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:"Arial Unicode MS";
	panose-1:2 11 6 4 2 2 2 2 2 4;
	mso-font-charset:0;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:-134238209 -371195905 63 0 4129279 0;}
/* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-unhide:no;
	mso-style-qformat:yes;
	mso-style-parent:"";
	margin:0cm;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	mso-hyphenate:none;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	mso-ansi-language:EN-GB;
	mso-fareast-language:AR-SA;}
h1
	{mso-style-unhide:no;
	mso-style-qformat:yes;
	mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:3.0pt;
	margin-left:0cm;
	text-indent:0cm;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:1;
	mso-list:l0 level1 lfo1;
	mso-hyphenate:none;
	tab-stops:list 0cm;
	font-size:14.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:Arial;
	mso-font-kerning:.5pt;
	mso-ansi-language:EN-GB;
	mso-fareast-language:AR-SA;
	mso-bidi-font-weight:normal;}
h2
	{mso-style-unhide:no;
	mso-style-qformat:yes;
	mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:3.0pt;
	margin-left:0cm;
	text-indent:0cm;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:2;
	mso-list:l0 level2 lfo1;
	mso-hyphenate:none;
	tab-stops:list 0cm;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:Arial;
	mso-ansi-language:EN-GB;
	mso-fareast-language:AR-SA;
	mso-bidi-font-weight:normal;
	font-style:italic;
	mso-bidi-font-style:normal;}
h3
	{mso-style-unhide:no;
	mso-style-qformat:yes;
	mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:3.0pt;
	margin-left:0cm;
	text-indent:0cm;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:3;
	mso-list:l0 level3 lfo1;
	mso-hyphenate:none;
	tab-stops:list 0cm;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:EN-GB;
	mso-fareast-language:AR-SA;
	mso-bidi-font-weight:normal;}
h4
	{mso-style-unhide:no;
	mso-style-qformat:yes;
	mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:3.0pt;
	margin-left:0cm;
	text-indent:0cm;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:4;
	mso-list:l0 level4 lfo1;
	mso-hyphenate:none;
	tab-stops:list 0cm;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:EN-GB;
	mso-fareast-language:AR-SA;
	mso-bidi-font-weight:normal;
	font-style:italic;
	mso-bidi-font-style:normal;}
h5
	{mso-style-unhide:no;
	mso-style-qformat:yes;
	mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:3.0pt;
	margin-left:0cm;
	text-indent:0cm;
	mso-pagination:widow-orphan;
	mso-outline-level:5;
	mso-list:l0 level5 lfo1;
	mso-hyphenate:none;
	tab-stops:list 0cm;
	font-size:11.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:Arial;
	mso-ansi-language:EN-GB;
	mso-fareast-language:AR-SA;
	font-weight:normal;}
h6
	{mso-style-unhide:no;
	mso-style-qformat:yes;
	mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:3.0pt;
	margin-left:0cm;
	text-indent:0cm;
	mso-pagination:widow-orphan;
	mso-outline-level:6;
	mso-list:l0 level6 lfo1;
	mso-hyphenate:none;
	tab-stops:list 0cm;
	font-size:11.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:Arial;
	mso-ansi-language:EN-GB;
	mso-fareast-language:AR-SA;
	font-weight:normal;
	font-style:italic;
	mso-bidi-font-style:normal;}
p.MsoHeading7, li.MsoHeading7, div.MsoHeading7
	{mso-style-unhide:no;
	mso-style-qformat:yes;
	mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:3.0pt;
	margin-left:0cm;
	text-indent:0cm;
	mso-pagination:widow-orphan;
	mso-outline-level:7;
	mso-list:l0 level7 lfo1;
	mso-hyphenate:none;
	tab-stops:list 0cm;
	font-size:10.0pt;
	font-family:Arial;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	mso-ansi-language:EN-GB;
	mso-fareast-language:AR-SA;}
p.MsoHeading8, li.MsoHeading8, div.MsoHeading8
	{mso-style-unhide:no;
	mso-style-qformat:yes;
	mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:3.0pt;
	margin-left:0cm;
	text-indent:0cm;
	mso-pagination:widow-orphan;
	mso-outline-level:8;
	mso-list:l0 level8 lfo1;
	mso-hyphenate:none;
	tab-stops:list 0cm;
	font-size:10.0pt;
	font-family:Arial;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	mso-ansi-language:EN-GB;
	mso-fareast-language:AR-SA;
	font-style:italic;
	mso-bidi-font-style:normal;}
p.MsoHeading9, li.MsoHeading9, div.MsoHeading9
	{mso-style-unhide:no;
	mso-style-qformat:yes;
	mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:3.0pt;
	margin-left:0cm;
	text-indent:0cm;
	mso-pagination:widow-orphan;
	mso-outline-level:9;
	mso-list:l0 level9 lfo1;
	mso-hyphenate:none;
	tab-stops:list 0cm;
	font-size:9.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:Arial;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	mso-ansi-language:EN-GB;
	mso-fareast-language:AR-SA;
	font-style:italic;
	mso-bidi-font-style:normal;}
p.MsoIndex1, li.MsoIndex1, div.MsoIndex1
	{mso-style-noshow:yes;
	mso-style-unhide:no;
	mso-style-next:Normal;
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:12.0pt;
	margin-bottom:.0001pt;
	text-indent:-12.0pt;
	mso-pagination:widow-orphan;
	mso-hyphenate:none;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	mso-ansi-language:EN-GB;
	mso-fareast-language:AR-SA;}
p.MsoIndex2, li.MsoIndex2, div.MsoIndex2
	{mso-style-noshow:yes;
	mso-style-unhide:no;
	mso-style-next:Normal;
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:24.0pt;
	margin-bottom:.0001pt;
	text-indent:-12.0pt;
	mso-pagination:widow-orphan;
	mso-hyphenate:none;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	mso-ansi-language:EN-GB;
	mso-fareast-language:AR-SA;}
p.MsoIndex3, li.MsoIndex3, div.MsoIndex3
	{mso-style-noshow:yes;
	mso-style-unhide:no;
	mso-style-next:Normal;
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:36.0pt;
	margin-bottom:.0001pt;
	text-indent:-12.0pt;
	mso-pagination:widow-orphan;
	mso-hyphenate:none;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	mso-ansi-language:EN-GB;
	mso-fareast-language:AR-SA;}
p.MsoIndex4, li.MsoIndex4, div.MsoIndex4
	{mso-style-unhide:no;
	mso-style-next:Normal;
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:48.0pt;
	margin-bottom:.0001pt;
	text-indent:-12.0pt;
	mso-pagination:widow-orphan;
	mso-hyphenate:none;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	mso-ansi-language:EN-GB;
	mso-fareast-language:AR-SA;}
p.MsoIndex5, li.MsoIndex5, div.MsoIndex5
	{mso-style-unhide:no;
	mso-style-next:Normal;
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:60.0pt;
	margin-bottom:.0001pt;
	text-indent:-12.0pt;
	mso-pagination:widow-orphan;
	mso-hyphenate:none;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	mso-ansi-language:EN-GB;
	mso-fareast-language:AR-SA;}
p.MsoIndex6, li.MsoIndex6, div.MsoIndex6
	{mso-style-unhide:no;
	mso-style-next:Normal;
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:72.0pt;
	margin-bottom:.0001pt;
	text-indent:-12.0pt;
	mso-pagination:widow-orphan;
	mso-hyphenate:none;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	mso-ansi-language:EN-GB;
	mso-fareast-language:AR-SA;}
p.MsoIndex7, li.MsoIndex7, div.MsoIndex7
	{mso-style-unhide:no;
	mso-style-next:Normal;
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:84.0pt;
	margin-bottom:.0001pt;
	text-indent:-12.0pt;
	mso-pagination:widow-orphan;
	mso-hyphenate:none;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	mso-ansi-language:EN-GB;
	mso-fareast-language:AR-SA;}
p.MsoIndex8, li.MsoIndex8, div.MsoIndex8
	{mso-style-unhide:no;
	mso-style-next:Normal;
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:96.0pt;
	margin-bottom:.0001pt;
	text-indent:-12.0pt;
	mso-pagination:widow-orphan;
	mso-hyphenate:none;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	mso-ansi-language:EN-GB;
	mso-fareast-language:AR-SA;}
p.MsoIndex9, li.MsoIndex9, div.MsoIndex9
	{mso-style-unhide:no;
	mso-style-next:Normal;
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:108.0pt;
	margin-bottom:.0001pt;
	text-indent:-12.0pt;
	mso-pagination:widow-orphan;
	mso-hyphenate:none;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	mso-ansi-language:EN-GB;
	mso-fareast-language:AR-SA;}
p.MsoToc1, li.MsoToc1, div.MsoToc1
	{mso-style-noshow:yes;
	mso-style-unhide:no;
	mso-style-next:Normal;
	margin-top:18.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	mso-hyphenate:none;
	font-size:12.0pt;
	font-family:Arial;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:Arial;
	text-transform:uppercase;
	mso-ansi-language:EN-GB;
	mso-fareast-language:AR-SA;
	font-weight:bold;}
p.MsoToc2, li.MsoToc2, div.MsoToc2
	{mso-style-noshow:yes;
	mso-style-unhide:no;
	mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	mso-hyphenate:none;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	mso-ansi-language:EN-GB;
	mso-fareast-language:AR-SA;
	font-weight:bold;}
p.MsoToc3, li.MsoToc3, div.MsoToc3
	{mso-style-noshow:yes;
	mso-style-unhide:no;
	mso-style-next:Normal;
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:12.0pt;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	mso-hyphenate:none;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	mso-ansi-language:EN-GB;
	mso-fareast-language:AR-SA;}
p.MsoToc4, li.MsoToc4, div.MsoToc4
	{mso-style-noshow:yes;
	mso-style-unhide:no;
	mso-style-next:Normal;
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:24.0pt;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	mso-hyphenate:none;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	mso-ansi-language:EN-GB;
	mso-fareast-language:AR-SA;}
p.MsoToc5, li.MsoToc5, div.MsoToc5
	{mso-style-noshow:yes;
	mso-style-unhide:no;
	mso-style-next:Normal;
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:36.0pt;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	mso-hyphenate:none;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	mso-ansi-language:EN-GB;
	mso-fareast-language:AR-SA;}
p.MsoToc6, li.MsoToc6, div.MsoToc6
	{mso-style-noshow:yes;
	mso-style-unhide:no;
	mso-style-next:Normal;
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:48.0pt;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	mso-hyphenate:none;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	mso-ansi-language:EN-GB;
	mso-fareast-language:AR-SA;}
p.MsoToc7, li.MsoToc7, div.MsoToc7
	{mso-style-noshow:yes;
	mso-style-unhide:no;
	mso-style-next:Normal;
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:60.0pt;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	mso-hyphenate:none;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	mso-ansi-language:EN-GB;
	mso-fareast-language:AR-SA;}
p.MsoToc8, li.MsoToc8, div.MsoToc8
	{mso-style-noshow:yes;
	mso-style-unhide:no;
	mso-style-next:Normal;
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:72.0pt;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	mso-hyphenate:none;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	mso-ansi-language:EN-GB;
	mso-fareast-language:AR-SA;}
p.MsoToc9, li.MsoToc9, div.MsoToc9
	{mso-style-noshow:yes;
	mso-style-unhide:no;
	mso-style-next:Normal;
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:84.0pt;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	mso-hyphenate:none;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	mso-ansi-language:EN-GB;
	mso-fareast-language:AR-SA;}
p.MsoFootnoteText, li.MsoFootnoteText, div.MsoFootnoteText
	{mso-style-noshow:yes;
	mso-style-unhide:no;
	margin:0cm;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	mso-hyphenate:none;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	mso-ansi-language:EN-GB;
	mso-fareast-language:AR-SA;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{mso-style-unhide:no;
	margin:0cm;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	mso-hyphenate:none;
	tab-stops:center 207.65pt right 415.3pt;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	mso-ansi-language:EN-GB;
	mso-fareast-language:AR-SA;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{mso-style-unhide:no;
	margin:0cm;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	mso-hyphenate:none;
	tab-stops:center 207.65pt right 415.3pt;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	mso-ansi-language:EN-GB;
	mso-fareast-language:AR-SA;}
p.MsoIndexHeading, li.MsoIndexHeading, div.MsoIndexHeading
	{mso-style-noshow:yes;
	mso-style-unhide:no;
	mso-style-next:"Index 1";
	margin:0cm;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	mso-hyphenate:none;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	mso-ansi-language:EN-GB;
	mso-fareast-language:AR-SA;}
p.MsoCaption, li.MsoCaption, div.MsoCaption
	{mso-style-unhide:no;
	mso-style-qformat:yes;
	margin-top:6.0pt;
	margin-right:0cm;
	margin-bottom:6.0pt;
	margin-left:0cm;
	mso-pagination:widow-orphan no-line-numbers;
	mso-hyphenate:none;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:Tahoma;
	mso-ansi-language:EN-GB;
	mso-fareast-language:AR-SA;
	font-style:italic;}
span.MsoFootnoteReference
	{mso-style-noshow:yes;
	mso-style-unhide:no;
	mso-style-parent:"";
	vertical-align:super;}
span.MsoEndnoteReference
	{mso-style-noshow:yes;
	mso-style-unhide:no;
	mso-style-parent:"";
	vertical-align:super;}
p.MsoList, li.MsoList, div.MsoList
	{mso-style-unhide:no;
	mso-style-parent:"Body Text";
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:6.0pt;
	margin-left:0cm;
	mso-pagination:widow-orphan;
	mso-hyphenate:none;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:Tahoma;
	mso-ansi-language:EN-GB;
	mso-fareast-language:AR-SA;}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{mso-style-unhide:no;
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:6.0pt;
	margin-left:0cm;
	mso-pagination:widow-orphan;
	mso-hyphenate:none;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	mso-ansi-language:EN-GB;
	mso-fareast-language:AR-SA;}
p.MsoBodyTextIndent, li.MsoBodyTextIndent, div.MsoBodyTextIndent
	{mso-style-unhide:no;
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:72.0pt;
	margin-bottom:.0001pt;
	text-indent:-72.0pt;
	mso-pagination:widow-orphan;
	mso-hyphenate:none;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	mso-ansi-language:EN-GB;
	mso-fareast-language:AR-SA;}
a:link, span.MsoHyperlink
	{mso-style-unhide:no;
	mso-style-parent:"WW-Default Paragraph Font";
	color:blue;
	text-decoration:underline;
	text-underline:single;}
a:visited, span.MsoHyperlinkFollowed
	{mso-style-unhide:no;
	mso-style-parent:"WW-Default Paragraph Font";
	color:purple;
	text-decoration:underline;
	text-underline:single;}
strong
	{mso-style-unhide:no;
	mso-style-qformat:yes;
	mso-style-parent:"WW-Default Paragraph Font";
	mso-bidi-font-weight:normal;}
p.MsoPlainText, li.MsoPlainText, div.MsoPlainText
	{mso-style-unhide:no;
	margin:0cm;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	mso-hyphenate:none;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	mso-fareast-language:AR-SA;}
span.WW8Num1z2
	{mso-style-name:WW8Num1z2;
	mso-style-unhide:no;
	mso-style-parent:"";
	mso-ansi-font-size:12.0pt;
	mso-ansi-language:X-NONE;
	mso-fareast-language:X-NONE;
	mso-bidi-language:X-NONE;
	font-weight:bold;
	mso-bidi-font-weight:normal;}
span.WW8Num4z0
	{mso-style-name:WW8Num4z0;
	mso-style-unhide:no;
	mso-style-parent:"";
	font-family:Symbol;
	mso-ascii-font-family:Symbol;
	mso-hansi-font-family:Symbol;}
span.WW8Num5z2
	{mso-style-name:WW8Num5z2;
	mso-style-unhide:no;
	mso-style-parent:"";
	mso-ansi-font-size:12.0pt;
	mso-ansi-language:X-NONE;
	mso-fareast-language:X-NONE;
	mso-bidi-language:X-NONE;
	font-weight:bold;
	mso-bidi-font-weight:normal;}
span.WW8Num6z2
	{mso-style-name:WW8Num6z2;
	mso-style-unhide:no;
	mso-style-parent:"";
	mso-ansi-font-size:12.0pt;
	mso-ansi-language:X-NONE;
	mso-fareast-language:X-NONE;
	mso-bidi-language:X-NONE;
	font-weight:bold;
	mso-bidi-font-weight:normal;}
span.WW8NumSt2z0
	{mso-style-name:WW8NumSt2z0;
	mso-style-unhide:no;
	mso-style-parent:"";
	font-family:Symbol;
	mso-ascii-font-family:Symbol;
	mso-hansi-font-family:Symbol;}
span.WW-DefaultParagraphFont
	{mso-style-name:"WW-Default Paragraph Font";
	mso-style-unhide:no;
	mso-style-parent:"";}
span.FootnoteCharacters
	{mso-style-name:"Footnote Characters";
	mso-style-unhide:no;
	mso-style-parent:"WW-Default Paragraph Font";
	vertical-align:super;}
span.Heading2Char
	{mso-style-name:"Heading 2 Char";
	mso-style-unhide:no;
	mso-style-parent:"WW-Default Paragraph Font";
	mso-ansi-font-size:12.0pt;
	font-family:Arial;
	mso-ascii-font-family:Arial;
	mso-hansi-font-family:Arial;
	mso-ansi-language:EN-GB;
	mso-fareast-language:AR-SA;
	mso-bidi-language:AR-SA;
	font-weight:bold;
	mso-bidi-font-weight:normal;
	font-style:italic;
	mso-bidi-font-style:normal;}
span.EndnoteCharacters
	{mso-style-name:"Endnote Characters";
	mso-style-unhide:no;
	mso-style-parent:"";
	vertical-align:super;}
span.WW-EndnoteCharacters
	{mso-style-name:"WW-Endnote Characters";
	mso-style-unhide:no;
	mso-style-parent:"";}
p.Heading, li.Heading, div.Heading
	{mso-style-name:Heading;
	mso-style-unhide:no;
	mso-style-next:"Body Text";
	margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:6.0pt;
	margin-left:0cm;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-hyphenate:none;
	font-size:14.0pt;
	font-family:Arial;
	mso-fareast-font-family:"Arial Unicode MS";
	mso-bidi-font-family:Tahoma;
	mso-ansi-language:EN-GB;
	mso-fareast-language:AR-SA;}
p.Index, li.Index, div.Index
	{mso-style-name:Index;
	mso-style-unhide:no;
	margin:0cm;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan no-line-numbers;
	mso-hyphenate:none;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:Tahoma;
	mso-ansi-language:EN-GB;
	mso-fareast-language:AR-SA;}
p.ContentsHeading, li.ContentsHeading, div.ContentsHeading
	{mso-style-name:"Contents Heading";
	mso-style-unhide:no;
	margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:6.0pt;
	margin-left:0cm;
	mso-pagination:widow-orphan no-line-numbers;
	page-break-after:avoid;
	mso-hyphenate:none;
	font-size:16.0pt;
	font-family:Arial;
	mso-fareast-font-family:"Arial Unicode MS";
	mso-bidi-font-family:Tahoma;
	mso-ansi-language:EN-GB;
	mso-fareast-language:AR-SA;
	font-weight:bold;}
p.Contents10, li.Contents10, div.Contents10
	{mso-style-name:"Contents 10";
	mso-style-unhide:no;
	mso-style-parent:Index;
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:127.35pt;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan no-line-numbers;
	mso-hyphenate:none;
	tab-stops:right dotted 481.85pt;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:Tahoma;
	mso-ansi-language:EN-GB;
	mso-fareast-language:AR-SA;}
p.Framecontents, li.Framecontents, div.Framecontents
	{mso-style-name:"Frame contents";
	mso-style-unhide:no;
	mso-style-parent:"Body Text";
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:6.0pt;
	margin-left:0cm;
	mso-pagination:widow-orphan;
	mso-hyphenate:none;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	mso-ansi-language:EN-GB;
	mso-fareast-language:AR-SA;}
span.msoIns
	{mso-style-type:export-only;
	mso-style-name:"";
	text-decoration:underline;
	text-underline:single;
	color:teal;}
span.msoDel
	{mso-style-type:export-only;
	mso-style-name:"";
	text-decoration:line-through;
	color:red;}
/* Page Definitions */
@page
	{mso-footnote-separator:url(":manual_files:header.htm") fs;
	mso-footnote-continuation-separator:url(":manual_files:header.htm") fcs;
	mso-endnote-separator:url(":manual_files:header.htm") es;
	mso-endnote-continuation-separator:url(":manual_files:header.htm") ecs;}
@page WordSection1
	{size:595.25pt 841.85pt;
	margin:72.0pt 90.0pt 72.0pt 90.0pt;
	mso-header-margin:36.0pt;
	mso-footer-margin:36.0pt;
	mso-page-numbers:roman-lower 1;
	mso-title-page:yes;
	mso-even-header:url(":manual_files:header.htm") eh1;
	mso-footer:url(":manual_files:header.htm") f1;
	mso-first-footer:url(":manual_files:header.htm") ff1;
	mso-paper-source:0;}
div.WordSection1
	{page:WordSection1;}
@page WordSection2
	{size:595.25pt 841.85pt;
	margin:72.0pt 90.0pt 72.0pt 90.0pt;
	mso-header-margin:72.0pt;
	mso-footer-margin:36.0pt;
	mso-even-header:url(":manual_files:header.htm") eh1;
	mso-footer:url(":manual_files:header.htm") f1;
	mso-first-footer:url(":manual_files:header.htm") ff1;
	mso-paper-source:0;}
div.WordSection2
	{page:WordSection2;}
@page WordSection3
	{size:595.25pt 841.85pt;
	margin:72.0pt 90.0pt 72.0pt 90.0pt;
	mso-header-margin:36.0pt;
	mso-footer-margin:36.0pt;
	mso-page-numbers:roman-lower;
	mso-even-header:url(":manual_files:header.htm") eh1;
	mso-footer:url(":manual_files:header.htm") f1;
	mso-first-footer:url(":manual_files:header.htm") ff1;
	mso-paper-source:0;}
div.WordSection3
	{page:WordSection3;}
@page WordSection4
	{size:595.25pt 841.85pt;
	margin:72.0pt 90.0pt 72.0pt 90.0pt;
	mso-header-margin:36.0pt;
	mso-footer-margin:36.0pt;
	mso-page-numbers:1;
	mso-even-header:url(":manual_files:header.htm") eh1;
	mso-footer:url(":manual_files:header.htm") f4;
	mso-first-footer:url(":manual_files:header.htm") ff1;
	mso-paper-source:0;}
div.WordSection4
	{page:WordSection4;}
/* List Definitions */
@list l0
	{mso-list-id:1;
	mso-list-template-ids:1;
	mso-list-name:Outline;}
@list l0:level1
	{mso-level-tab-stop:0cm;
	mso-level-number-position:left;
	margin-left:0cm;
	text-indent:0cm;}
@list l0:level2
	{mso-level-text:"%1\.%2";
	mso-level-tab-stop:0cm;
	mso-level-number-position:left;
	margin-left:0cm;
	text-indent:0cm;}
@list l0:level3
	{mso-level-text:"%1\.%2\.%3";
	mso-level-tab-stop:0cm;
	mso-level-number-position:left;
	margin-left:0cm;
	text-indent:0cm;
	mso-ansi-font-size:12.0pt;
	mso-ansi-language:X-NONE;
	mso-fareast-language:X-NONE;
	mso-bidi-language:X-NONE;
	mso-ansi-font-weight:bold;}
@list l0:level4
	{mso-level-text:"%1\.%2\.%3\.%4";
	mso-level-tab-stop:0cm;
	mso-level-number-position:left;
	margin-left:0cm;
	text-indent:0cm;}
@list l0:level5
	{mso-level-text:"%1\.%2\.%3\.%4\.%5";
	mso-level-tab-stop:0cm;
	mso-level-number-position:left;
	margin-left:0cm;
	text-indent:0cm;}
@list l0:level6
	{mso-level-text:"%1\.%2\.%3\.%4\.%5\.%6";
	mso-level-tab-stop:0cm;
	mso-level-number-position:left;
	margin-left:0cm;
	text-indent:0cm;}
@list l0:level7
	{mso-level-text:"%1\.%2\.%3\.%4\.%5\.%6\.%7";
	mso-level-tab-stop:0cm;
	mso-level-number-position:left;
	margin-left:0cm;
	text-indent:0cm;}
@list l0:level8
	{mso-level-text:"%1\.%2\.%3\.%4\.%5\.%6\.%7\.%8";
	mso-level-tab-stop:0cm;
	mso-level-number-position:left;
	margin-left:0cm;
	text-indent:0cm;}
@list l0:level9
	{mso-level-text:"%1\.%2\.%3\.%4\.%5\.%6\.%7\.%8\.%9";
	mso-level-tab-stop:0cm;
	mso-level-number-position:left;
	margin-left:0cm;
	text-indent:0cm;}
@list l1
	{mso-list-id:2;
	mso-list-type:simple;
	mso-list-template-ids:2;
	mso-list-name:WW8Num2;}
@list l1:level1
	{mso-level-tab-stop:36.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l2
	{mso-list-id:3;
	mso-list-type:simple;
	mso-list-template-ids:3;
	mso-list-name:WW8Num3;}
@list l2:level1
	{mso-level-tab-stop:14.15pt;
	mso-level-number-position:left;
	margin-left:14.15pt;
	text-indent:-14.15pt;}
@list l3
	{mso-list-id:4;
	mso-list-type:simple;
	mso-list-template-ids:4;
	mso-list-name:WW8Num4;}
@list l3:level1
	{mso-level-start-at:0;
	mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:14.15pt;
	mso-level-number-position:left;
	margin-left:14.15pt;
	text-indent:-14.15pt;
	mso-ascii-font-family:Symbol;
	mso-hansi-font-family:Symbol;}
@list l4
	{mso-list-id:5;
	mso-list-template-ids:5;
	mso-list-name:WW8Num5;}
@list l4:level1
	{mso-level-start-at:9;
	mso-level-tab-stop:0cm;
	mso-level-number-position:left;
	margin-left:0cm;
	text-indent:0cm;}
@list l4:level2
	{mso-level-start-at:3;
	mso-level-text:"%1\.%2";
	mso-level-tab-stop:0cm;
	mso-level-number-position:left;
	margin-left:0cm;
	text-indent:0cm;}
@list l4:level3
	{mso-level-text:"%1\.%2\.%3";
	mso-level-tab-stop:0cm;
	mso-level-number-position:left;
	margin-left:0cm;
	text-indent:0cm;
	mso-ansi-font-size:12.0pt;
	mso-ansi-language:X-NONE;
	mso-fareast-language:X-NONE;
	mso-bidi-language:X-NONE;
	mso-ansi-font-weight:bold;}
@list l4:level4
	{mso-level-text:"%1\.%2\.%3\.%4";
	mso-level-tab-stop:0cm;
	mso-level-number-position:left;
	margin-left:0cm;
	text-indent:0cm;}
@list l4:level5
	{mso-level-text:"%1\.%2\.%3\.%4\.%5";
	mso-level-tab-stop:0cm;
	mso-level-number-position:left;
	margin-left:0cm;
	text-indent:0cm;}
@list l4:level6
	{mso-level-text:"%1\.%2\.%3\.%4\.%5\.%6";
	mso-level-tab-stop:0cm;
	mso-level-number-position:left;
	margin-left:0cm;
	text-indent:0cm;}
@list l4:level7
	{mso-level-text:"%1\.%2\.%3\.%4\.%5\.%6\.%7";
	mso-level-tab-stop:0cm;
	mso-level-number-position:left;
	margin-left:0cm;
	text-indent:0cm;}
@list l4:level8
	{mso-level-text:"%1\.%2\.%3\.%4\.%5\.%6\.%7\.%8";
	mso-level-tab-stop:0cm;
	mso-level-number-position:left;
	margin-left:0cm;
	text-indent:0cm;}
@list l4:level9
	{mso-level-text:"%1\.%2\.%3\.%4\.%5\.%6\.%7\.%8\.%9";
	mso-level-tab-stop:0cm;
	mso-level-number-position:left;
	margin-left:0cm;
	text-indent:0cm;}
@list l5
	{mso-list-id:6;
	mso-list-template-ids:6;
	mso-list-name:WW8Num6;}
@list l5:level1
	{mso-level-start-at:9;
	mso-level-tab-stop:0cm;
	mso-level-number-position:left;
	margin-left:0cm;
	text-indent:0cm;}
@list l5:level2
	{mso-level-start-at:3;
	mso-level-text:"%1\.%2";
	mso-level-tab-stop:0cm;
	mso-level-number-position:left;
	margin-left:0cm;
	text-indent:0cm;}
@list l5:level3
	{mso-level-text:"%1\.%2\.%3";
	mso-level-tab-stop:0cm;
	mso-level-number-position:left;
	margin-left:0cm;
	text-indent:0cm;
	mso-ansi-font-size:12.0pt;
	mso-ansi-language:X-NONE;
	mso-fareast-language:X-NONE;
	mso-bidi-language:X-NONE;
	mso-ansi-font-weight:bold;}
@list l5:level4
	{mso-level-text:"%1\.%2\.%3\.%4";
	mso-level-tab-stop:0cm;
	mso-level-number-position:left;
	margin-left:0cm;
	text-indent:0cm;}
@list l5:level5
	{mso-level-text:"%1\.%2\.%3\.%4\.%5";
	mso-level-tab-stop:0cm;
	mso-level-number-position:left;
	margin-left:0cm;
	text-indent:0cm;}
@list l5:level6
	{mso-level-text:"%1\.%2\.%3\.%4\.%5\.%6";
	mso-level-tab-stop:0cm;
	mso-level-number-position:left;
	margin-left:0cm;
	text-indent:0cm;}
@list l5:level7
	{mso-level-text:"%1\.%2\.%3\.%4\.%5\.%6\.%7";
	mso-level-tab-stop:0cm;
	mso-level-number-position:left;
	margin-left:0cm;
	text-indent:0cm;}
@list l5:level8
	{mso-level-text:"%1\.%2\.%3\.%4\.%5\.%6\.%7\.%8";
	mso-level-tab-stop:0cm;
	mso-level-number-position:left;
	margin-left:0cm;
	text-indent:0cm;}
@list l5:level9
	{mso-level-text:"%1\.%2\.%3\.%4\.%5\.%6\.%7\.%8\.%9";
	mso-level-tab-stop:0cm;
	mso-level-number-position:left;
	margin-left:0cm;
	text-indent:0cm;}
ol
	{margin-bottom:0cm;}
ul
	{margin-bottom:0cm;}
--></style><&#33;--[if gte mso 10]><style>
/* Style Definitions */
table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-unhide:no;
	mso-style-parent:"";
	mso-padding-alt:0cm 5.4pt 0cm 5.4pt;
	mso-para-margin:0cm;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";}
</style><&#33;[endif]--><&#33;--[if gte mso 9]><xml><o:shapedefaults v:ext="edit" spidmax="3074"><o:colormenu v:ext="edit" fillcolor="none [4]" strokecolor="none [1]"
shadowcolor="none [2]"/></o:shapedefaults></xml><&#33;[endif]--><&#33;--[if gte mso 9]><xml><o:shapelayout v:ext="edit"><o:idmap v:ext="edit" data="2"/></o:shapelayout></xml><&#33;[endif]--></head><body bgcolor=white lang=EN-US link=blue vlink=purple style='tab-interval:36.0pt'><div class=WordSection1><p class=MsoNormal align=center style='text-align:center'><b style='mso-bidi-font-weight:
normal'><span lang=EN-GB style='font-size:24.0pt;mso-bidi-font-size:10.0pt'><o:p>&nbsp;</o:p></span></b></p><p class=MsoNormal align=center style='text-align:center'><b style='mso-bidi-font-weight:
normal'><span lang=EN-GB style='font-size:24.0pt;mso-bidi-font-size:10.0pt'><o:p>&nbsp;</o:p></span></b></p><p class=MsoNormal align=center style='text-align:center'><b style='mso-bidi-font-weight:
normal'><span lang=EN-GB style='font-size:24.0pt;mso-bidi-font-size:10.0pt'><o:p>&nbsp;</o:p></span></b></p><p class=MsoNormal align=center style='text-align:center'><b style='mso-bidi-font-weight:
normal'><span lang=EN-GB style='font-size:24.0pt;mso-bidi-font-size:10.0pt'><o:p>&nbsp;</o:p></span></b></p><p class=MsoNormal align=center style='text-align:center'><b style='mso-bidi-font-weight:
normal'><span lang=EN-GB style='font-size:24.0pt;mso-bidi-font-size:10.0pt'><o:p>&nbsp;</o:p></span></b></p><p class=MsoNormal align=center style='text-align:center'><b style='mso-bidi-font-weight:
normal'><span lang=EN-GB style='font-size:24.0pt;mso-bidi-font-size:10.0pt'>M.I.R.A.C.L.
Users Manual <a style='mso-footnote-id:ftn1' href="#_ftn1" name="_ftnref1"
title=""><span class=FootnoteCharacters><span style='mso-special-character:
footnote'><&#33;[if &#33;supportFootnotes]><span class=FootnoteCharacters><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB style='font-size:24.0pt;
mso-bidi-font-size:10.0pt;font-family:"Times New Roman";mso-fareast-font-family:
"Times New Roman";mso-bidi-font-family:"Times New Roman";mso-ansi-language:
EN-GB;mso-fareast-language:AR-SA;mso-bidi-language:AR-SA'>[1]</span></b></span><&#33;[endif]></span></span></a></span></b><span
lang=EN-GB style='font-size:18.0pt;mso-bidi-font-size:10.0pt'><o:p></o:p></span></p><p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB
style='font-size:18.0pt;mso-bidi-font-size:10.0pt'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB
style='font-size:18.0pt;mso-bidi-font-size:10.0pt'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB
style='font-size:18.0pt;mso-bidi-font-size:10.0pt'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB
style='font-size:18.0pt;mso-bidi-font-size:10.0pt'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB
style='font-size:18.0pt;mso-bidi-font-size:10.0pt'>Shamus Software Ltd.<o:p></o:p></span></p><p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB
style='font-size:18.0pt;mso-bidi-font-size:10.0pt'>4 Foster Place North<o:p></o:p></span></p><p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB
style='font-size:18.0pt;mso-bidi-font-size:10.0pt'>Ballybough<o:p></o:p></span></p><p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB
style='font-size:18.0pt;mso-bidi-font-size:10.0pt'>Dublin 3<o:p></o:p></span></p><p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB
style='font-size:18.0pt;mso-bidi-font-size:10.0pt'>Ireland<o:p></o:p></span></p><p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB>August
2006<br clear=all style='page-break-before:always'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal align=center style='text-align:center'><b style='mso-bidi-font-weight:
normal'><span lang=EN-GB style='font-size:16.0pt;mso-bidi-font-size:10.0pt'>Abstract<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span lang=EN-GB><o:p>&nbsp;</o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span lang=EN-GB><o:p>&nbsp;</o:p></span></b></p><p class=MsoNormal><span lang=EN-GB>The MIRACL library consists of well over
100 routines that cover all aspects of multi-precision arithmetic. Two new
data-types are defined - <i style='mso-bidi-font-style:normal'>big</i> for
large integers and <i style='mso-bidi-font-style:normal'>flash</i> (short for
floating-slash) for large rational numbers. The large integer routines are
based on Knuthís algorithms, described in Chapter 4 of his classic work ëThe
Art of Computer Programmingí. Floating-slash arithmetic, which works with
rounded fractions, was originally proposed by D. Matula and P. Kornerup. All
routines have been thoroughly optimised for speed and efficiency, while at the
same time remaining standard, portable C. However optional fast assembly
language alternatives for certain time-critical routines are also included,
particularly for the popular Intel 80x86 range of processors. A C++ interface
is also provided. Full source code is included.</span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt'><span
style="mso-spacerun:yes">†</span><o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt'><span
style="mso-spacerun:yes">†</span><o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt'><span
style="mso-spacerun:yes">†</span><br clear=all style='page-break-before:always'></span><&#33;--[if supportFields]><b><span lang=EN-GB style='mso-bidi-font-size:
12.0pt;font-family:Arial;mso-bidi-font-family:Arial;text-transform:uppercase'><span
style='mso-element:field-begin'></span><span
style="mso-spacerun:yes">†</span>TOC \o &quot;1-9&quot; \t &quot;Heading 9;9;Heading
8;8;Heading 7;7;Heading 6;6;Heading 5;5;Heading 4;4;Heading 3;3;Heading
2;2;Heading 1;1;Heading 1;1;Heading 2;2;Heading 3;3;Heading 4;4;Heading
5;5;Heading 6;6;Heading 7;7;Heading 8;8;Heading 9;9&quot; \h<span
style='mso-element:field-separator'></span></span></b><&#33;[endif]--><b><span
lang=EN-GB style='mso-bidi-font-size:12.0pt;font-family:Arial;mso-bidi-font-family:
Arial;text-transform:uppercase'><a href="#_toc632">1. Introduction <span
style='mso-tab-count:1 dotted'>..................................................................................................... </span>1</a></span></b></p><p class=MsoToc1 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc676">2. Installation<span style='mso-tab-count:1 dotted'>....................................................................................................... </span>3</a></span></p><p class=MsoToc2 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc727">2.1 Optimising<span style='mso-tab-count:1 dotted'>.................................................................................................................. </span>6</a></span></p><p class=MsoToc2 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc740">2.2 Upgrading from Version 3<span style='mso-tab-count:1 dotted'>............................................................................................ </span>6</a></span></p><p class=MsoToc2 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc754">2.3 Multi-Threaded Programming<span style='mso-tab-count:1 dotted'>....................................................................................... </span>7</a></span></p><p class=MsoToc2 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc777">2.4 Constrained environments<span style='mso-tab-count:1 dotted'>............................................................................................ </span>8</a></span></p><p class=MsoToc1 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc845">3. The User Interface<span style='mso-tab-count:1 dotted'>........................................................................................ </span>11</a></span></p><p class=MsoToc1 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc940">4. Internal Representation<span style='mso-tab-count:1 dotted'>.......................................................................... </span>15</a></span></p><p class=MsoToc1 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1012">5. Implementation<span style='mso-tab-count:1 dotted'>.............................................................................................. </span>18</a></span></p><p class=MsoToc1 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1087">6. Floating-Slash numbers<span style='mso-tab-count:1 dotted'>........................................................................... </span>23</a></span></p><p class=MsoToc1 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1145">7. The C++ Interface<span style='mso-tab-count:1 dotted'>........................................................................................... </span>26</a></span></p><p class=MsoToc1 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1370">8. Example Programs<span style='mso-tab-count:1 dotted'>....................................................................................... </span>33</a></span></p><p class=MsoToc2 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1374">8.1 Simple Programs<span style='mso-tab-count:1 dotted'>........................................................................................................ </span>33</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1376">8.1.1 hail.c<span style='mso-tab-count:1 dotted'>................................................................................................................... </span>33</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1388">8.1.2 palin.c<span style='mso-tab-count:1 dotted'>................................................................................................................. </span>33</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1399">8.1.3 mersenne.c<span style='mso-tab-count:1 dotted'>........................................................................................................... </span>34</a></span></p><p class=MsoToc2 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1403">8.2 Factoring Programs<span style='mso-tab-count:1 dotted'>.................................................................................................... </span>34</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1407">8.2.1 brute.c<span style='mso-tab-count:1 dotted'>................................................................................................................. </span>34</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1411">8.2.2 brent.c<span style='mso-tab-count:1 dotted'>................................................................................................................. </span>34</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1415">8.2.3 pollard.c<span style='mso-tab-count:1 dotted'>.............................................................................................................. </span>34</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1420">8.2.4 williams.c<span style='mso-tab-count:1 dotted'>............................................................................................................ </span>34</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1424">8.2.5 lenstra.c<span style='mso-tab-count:1 dotted'>............................................................................................................... </span>35</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1428">8.2.6 qsieve.c<span style='mso-tab-count:1 dotted'>............................................................................................................... </span>35</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1442">8.2.7 factor.c<span style='mso-tab-count:1 dotted'>................................................................................................................. </span>36</a></span></p><p class=MsoToc2 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1447">8.3 Discrete Logarithm Programs<span style='mso-tab-count:
1 dotted'>....................................................................................... </span>36</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1455">8.3.1 kangaroo.c<span style='mso-tab-count:1 dotted'>............................................................................................................ </span>36</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1459">8.3.2 genprime.c<span style='mso-tab-count:1 dotted'>........................................................................................................... </span>36</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1463">8.3.3 index.c<span style='mso-tab-count:1 dotted'>................................................................................................................ </span>37</a></span></p><p class=MsoToc2 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1467">8.4 Public-Key Cryptography<span style='mso-tab-count:1 dotted'>........................................................................................... </span>37</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1471">8.4.1 pk-demo.c<span style='mso-tab-count:1 dotted'>............................................................................................................ </span>37</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1475">8.4.2 bmark.c/imratio.c<span style='mso-tab-count:1 dotted'>.................................................................................................. </span>37</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1479">8.4.3 genkey.c<span style='mso-tab-count:1 dotted'>.............................................................................................................. </span>38</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1487">8.4.4 encode.c<span style='mso-tab-count:1 dotted'>............................................................................................................... </span>38</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1491">8.4.5 decode.c<span style='mso-tab-count:1 dotted'>............................................................................................................... </span>38</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1497">8.4.6 enciph.c<span style='mso-tab-count:1 dotted'>............................................................................................................... </span>39</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1501">8.4.7 deciph.c<span style='mso-tab-count:1 dotted'>............................................................................................................... </span>39</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1504">8.4.8 dssetup.c<span style='mso-tab-count:1 dotted'>.............................................................................................................. </span>39</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1508">8.4.9 limlee.c<span style='mso-tab-count:1 dotted'>............................................................................................................... </span>39</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1512">8.4.10 dssgen.c<span style='mso-tab-count:1 dotted'>............................................................................................................. </span>39</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1516">8.4.11 dssign.c<span style='mso-tab-count:1 dotted'>............................................................................................................. </span>40</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1520">8.4.12 dssver.c<span style='mso-tab-count:1 dotted'>.............................................................................................................. </span>40</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1524">8.4.13 ecsgen.c, ecsign.c, ecsver.c<span style='mso-tab-count:
1 dotted'>.................................................................................... </span>40</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1530">8.4.14 ecsgen2.c, ecsign2.c, ecsver2.cpp<span
style='mso-tab-count:1 dotted'>............................................................................ </span>40</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1534">8.4.15 cm.cpp, schoof.cpp, mueller.cpp, process.cpp, sea.cpp,
schoof2.cpp<span style='mso-tab-count:1 dotted'>.............................. </span>41</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1583">8.4.16 crsetup.cpp, crgen.cpp, crencode.cpp, crdecode.cpp<span
style='mso-tab-count:1 dotted'>..................................................... </span>42</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1590">8.4.17 brick.c, ebrick.c, ebrick2.c<span style='mso-tab-count:
1 dotted'>..................................................................................... </span>43</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1593">8.4.18 identity.c<span style='mso-tab-count:1 dotted'>............................................................................................................ </span>43</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1596">8.4.19 Pairing based Cryptography<span style='mso-tab-count:
1 dotted'>................................................................................... </span>43</a></span></p><p class=MsoToc2 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1600">8.5 ëflashí Programs<span style='mso-tab-count:1 dotted'>......................................................................................................... </span>44</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1613">8.5.1 roots.c<span style='mso-tab-count:1 dotted'>................................................................................................................. </span>44</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1617">8.5.2 hilbert.c<span style='mso-tab-count:1 dotted'>............................................................................................................... </span>44</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1620">8.5.3 sample.c<span style='mso-tab-count:1 dotted'>.............................................................................................................. </span>44</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1624">8.5.4 ratcalc.c<span style='mso-tab-count:1 dotted'>............................................................................................................... </span>45</a></span></p><p class=MsoToc1 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1628">9. The MIRACL routines<span style='mso-tab-count:1 dotted'>..................................................................................... </span>46</a></span></p><p class=MsoToc2 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1633">9.1 Low level routines<span style='mso-tab-count:1 dotted'>...................................................................................................... </span>46</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1635">9.1.1 absol *<span style='mso-tab-count:1 dotted'>................................................................................................................ </span>46</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1650">9.1.2 add<span style='mso-tab-count:1 dotted'>..................................................................................................................... </span>46</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1667">9.1.3 brand<span style='mso-tab-count:1 dotted'>................................................................................................................... </span>47</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1685">9.1.4 bigbits<span style='mso-tab-count:1 dotted'>................................................................................................................. </span>47</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1705">9.1.5 big_to_bytes<span style='mso-tab-count:1 dotted'>......................................................................................................... </span>48</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1723">9.1.6 bytes_to_big<span style='mso-tab-count:1 dotted'>......................................................................................................... </span>49</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1777">9.1.7 cinnum<span style='mso-tab-count:1 dotted'>................................................................................................................ </span>50</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1797">9.1.8 cinstr<span style='mso-tab-count:1 dotted'>................................................................................................................... </span>51</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1820">9.1.9 compare *<span style='mso-tab-count:1 dotted'>............................................................................................................ </span>51</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1834">9.1.10 convert<span style='mso-tab-count:1 dotted'>............................................................................................................... </span>52</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1852">9.1.11 copy *<span style='mso-tab-count:1 dotted'>............................................................................................................... </span>52</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1865">9.1.12 cotnum<span style='mso-tab-count:1 dotted'>.............................................................................................................. </span>53</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1884">9.1.13 cotstr<span style='mso-tab-count:1 dotted'>................................................................................................................. </span>54</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1901">9.1.14 decr<span style='mso-tab-count:1 dotted'>................................................................................................................... </span>54</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1918">9.1.15 divide<span style='mso-tab-count:1 dotted'>................................................................................................................ </span>55</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1938">9.1.16 divisible<span style='mso-tab-count:1 dotted'>............................................................................................................. </span>55</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1952">9.1.17 ecp_memalloc<span style='mso-tab-count:1 dotted'>..................................................................................................... </span>56</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1968">9.1.18 ecp_memkill<span style='mso-tab-count:1 dotted'>....................................................................................................... </span>56</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc1985">9.1.19 exsign *<span style='mso-tab-count:1 dotted'>............................................................................................................. </span>57</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc2000">9.1.20 getdig<span style='mso-tab-count:1 dotted'>................................................................................................................ </span>57</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc2016">9.1.21 get_mip<span style='mso-tab-count:1 dotted'>............................................................................................................. </span>57</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc2030">9.1.22 igcd *<span style='mso-tab-count:1 dotted'>................................................................................................................ </span>58</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc2044">9.1.23 incr<span style='mso-tab-count:1 dotted'>................................................................................................................... </span>58</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc2064">9.1.24 init_big_from_rom<span style='mso-tab-count:1 dotted'>............................................................................................... </span>59</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc2083">9.1.25 init_point_from_rom<span style='mso-tab-count:1 dotted'>............................................................................................ </span>59</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc2100">9.1.26 innum<span style='mso-tab-count:1 dotted'>................................................................................................................ </span>60</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc2118">9.1.27 insign *<span style='mso-tab-count:1 dotted'>............................................................................................................. </span>60</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc2136">9.1.28 instr<span style='mso-tab-count:1 dotted'>.................................................................................................................. </span>61</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc2152">9.1.29 irand<span style='mso-tab-count:1 dotted'>.................................................................................................................. </span>62</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc2168">9.1.30 lgconv<span style='mso-tab-count:1 dotted'>............................................................................................................... </span>62</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc2184">9.1.31 mad<span style='mso-tab-count:1 dotted'>................................................................................................................... </span>63</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc2204">9.1.32 memalloc<span style='mso-tab-count:1 dotted'>........................................................................................................... </span>63</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc2219">9.1.33 memkill<span style='mso-tab-count:1 dotted'>............................................................................................................. </span>64</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc2238">9.1.34 mirexit<span style='mso-tab-count:1 dotted'>............................................................................................................... </span>64</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc2251">9.1.35 mirkill *<span style='mso-tab-count:1 dotted'>............................................................................................................ </span>65</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc2264">9.1.36 mirsys<span style='mso-tab-count:1 dotted'>............................................................................................................... </span>66</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc2288">9.1.37 mirvar<span style='mso-tab-count:1 dotted'>................................................................................................................ </span>67</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc2310">9.1.38 mirvar_mem<span style='mso-tab-count:1 dotted'>....................................................................................................... </span>67</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc2328">9.1.39 multiply<span style='mso-tab-count:1 dotted'>............................................................................................................. </span>68</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc2343">9.1.40 negify *<span style='mso-tab-count:1 dotted'>.............................................................................................................. </span>69</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc2359">9.1.41 normalise<span style='mso-tab-count:1 dotted'>........................................................................................................... </span>69</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc2377">9.1.42 numdig<span style='mso-tab-count:1 dotted'>.............................................................................................................. </span>70</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc2393">9.1.43 otnum<span style='mso-tab-count:1 dotted'>................................................................................................................ </span>70</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc2409">9.1.44 otstr<span style='mso-tab-count:1 dotted'>.................................................................................................................. </span>71</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc2427">9.1.45 premult<span style='mso-tab-count:1 dotted'>.............................................................................................................. </span>71</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc2444">9.1.46 putdig<span style='mso-tab-count:1 dotted'>................................................................................................................ </span>72</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc2460">9.1.47 remain<span style='mso-tab-count:1 dotted'>............................................................................................................... </span>72</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc2474">9.1.48 set_io_buffer_size<span style='mso-tab-count:1 dotted'>................................................................................................. </span>73</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc2490">9.1.49 set_user_function<span style='mso-tab-count:1 dotted'>................................................................................................. </span>74</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc2528">9.1.50 size *<span style='mso-tab-count:1 dotted'>................................................................................................................. </span>75</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc2544">9.1.51 subdiv<span style='mso-tab-count:1 dotted'>............................................................................................................... </span>75</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc2562">9.1.52 subdivisible<span style='mso-tab-count:1 dotted'>........................................................................................................ </span>76</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc2578">9.1.53 subtract<span style='mso-tab-count:1 dotted'>.............................................................................................................. </span>76</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc2593">9.1.54 zero *<span style='mso-tab-count:1 dotted'>................................................................................................................ </span>76</a></span></p><p class=MsoToc2 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc2606">9.2 Advanced Arithmetic Routines<span style='mso-tab-count:
1 dotted'>..................................................................................... </span>77</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc2609">9.2.1 bigdig<span style='mso-tab-count:1 dotted'>................................................................................................................. </span>77</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc2630">9.2.2 bigrand<span style='mso-tab-count:1 dotted'>................................................................................................................ </span>77</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc2645">9.2.3 brick_init<span style='mso-tab-count:1 dotted'>............................................................................................................. </span>78</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc2663">9.2.4 brick_end *<span style='mso-tab-count:1 dotted'>.......................................................................................................... </span>78</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc2678">9.2.5 crt<span style='mso-tab-count:1 dotted'>....................................................................................................................... </span>79</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc2697">9.2.6 crt_end *<span style='mso-tab-count:1 dotted'>.............................................................................................................. </span>79</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc2711">9.2.7 crt_init<span style='mso-tab-count:1 dotted'>................................................................................................................ </span>80</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc2729">9.2.8 egcd<span style='mso-tab-count:1 dotted'>.................................................................................................................... </span>80</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc2748">9.2.9 expb2<span style='mso-tab-count:1 dotted'>.................................................................................................................. </span>81</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc2772">9.2.10 expint<span style='mso-tab-count:1 dotted'>................................................................................................................ </span>81</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc2789">9.2.11 fft_mult<span style='mso-tab-count:1 dotted'>.............................................................................................................. </span>82</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc2805">9.2.12 gprime<span style='mso-tab-count:1 dotted'>............................................................................................................... </span>83</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc2818">9.2.13 hamming<span style='mso-tab-count:1 dotted'>............................................................................................................ </span>83</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc2831">9.2.14 invers *<span style='mso-tab-count:1 dotted'>.............................................................................................................. </span>83</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc2846">9.2.15 isprime<span style='mso-tab-count:1 dotted'>.............................................................................................................. </span>84</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc2865">9.2.16 jac<span style='mso-tab-count:1 dotted'>..................................................................................................................... </span>84</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc2881">9.2.17 jack<span style='mso-tab-count:1 dotted'>................................................................................................................... </span>85</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc2897">9.2.18 logb2<span style='mso-tab-count:1 dotted'>................................................................................................................. </span>86</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc2913">9.2.19 lucas<span style='mso-tab-count:1 dotted'>.................................................................................................................. </span>86</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc2934">9.2.20 multi_inverse<span style='mso-tab-count:1 dotted'>...................................................................................................... </span>87</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc2953">9.2.21 nres<span style='mso-tab-count:1 dotted'>................................................................................................................... </span>87</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc2970">9.2.22 nres_dotprod<span style='mso-tab-count:1 dotted'>....................................................................................................... </span>88</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc2988">9.2.23 nres_double_modadd<span style='mso-tab-count:1 dotted'>............................................................................................ </span>88</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc3001">9.2.24 nres_double_modsub<span style='mso-tab-count:1 dotted'>............................................................................................ </span>89</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc3015">9.2.25 nres_lazy<span style='mso-tab-count:1 dotted'>............................................................................................................ </span>89</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc3028">9.2.26 nres_lucas<span style='mso-tab-count:1 dotted'>........................................................................................................... </span>90</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc3046">9.2.27 nres_modadd<span style='mso-tab-count:1 dotted'>....................................................................................................... </span>90</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc3064">9.2.28 nres_moddiv<span style='mso-tab-count:1 dotted'>....................................................................................................... </span>91</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc3081">9.2.29 nres_modmult<span style='mso-tab-count:1 dotted'>..................................................................................................... </span>91</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc3097">9.2.30 nres_modsub<span style='mso-tab-count:1 dotted'>....................................................................................................... </span>92</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc3114">9.2.31 nres_multi_inverse<span style='mso-tab-count:1 dotted'>............................................................................................... </span>92</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc3132">9.2.32 nres_negate<span style='mso-tab-count:1 dotted'>......................................................................................................... </span>93</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc3149">9.2.33 nres_powltr<span style='mso-tab-count:1 dotted'>......................................................................................................... </span>93</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc3167">9.2.34 nres_powmod<span style='mso-tab-count:1 dotted'>...................................................................................................... </span>94</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc3190">9.2.35 nres_powmod2<span style='mso-tab-count:1 dotted'>.................................................................................................... </span>94</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc3207">9.2.36 nres_powmodn<span style='mso-tab-count:1 dotted'>.................................................................................................... </span>95</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc3225">9.2.37 nres_premult<span style='mso-tab-count:1 dotted'>....................................................................................................... </span>95</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc3243">9.2.38 nres_sqroot<span style='mso-tab-count:1 dotted'>......................................................................................................... </span>96</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc3260">9.2.39 nroot<span style='mso-tab-count:1 dotted'>................................................................................................................. </span>96</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc3280">9.2.40 nxprime<span style='mso-tab-count:1 dotted'>............................................................................................................. </span>97</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc3297">9.2.41 nxsafeprime<span style='mso-tab-count:1 dotted'>......................................................................................................... </span>97</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc3312">9.2.42 pow_brick<span style='mso-tab-count:1 dotted'>.......................................................................................................... </span>98</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc3329">9.2.43 power<span style='mso-tab-count:1 dotted'>................................................................................................................ </span>98</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc3348">9.2.44 powltr<span style='mso-tab-count:1 dotted'>................................................................................................................ </span>99</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc3366">9.2.45 powmod<span style='mso-tab-count:1 dotted'>........................................................................................................... </span>100</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc3386">9.2.46 powmod2<span style='mso-tab-count:1 dotted'>......................................................................................................... </span>101</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc3404">9.2.47 powmodn<span style='mso-tab-count:1 dotted'>......................................................................................................... </span>101</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc3421">9.2.48 prepare_monty<span style='mso-tab-count:1 dotted'>................................................................................................... </span>102</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc3437">9.2.49 redc<span style='mso-tab-count:1 dotted'>................................................................................................................. </span>102</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc3454">9.2.50 scrt<span style='mso-tab-count:1 dotted'>.................................................................................................................. </span>103</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc3472">9.2.51 scrt_end *<span style='mso-tab-count:1 dotted'>......................................................................................................... </span>103</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc3486">9.2.52 scrt_init<span style='mso-tab-count:1 dotted'>............................................................................................................ </span>104</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc3504">9.2.53 sftbit<span style='mso-tab-count:1 dotted'>................................................................................................................ </span>104</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc3520">9.2.54 smul *<span style='mso-tab-count:1 dotted'>............................................................................................................. </span>105</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc3534">9.2.55 spmd *<span style='mso-tab-count:1 dotted'>............................................................................................................. </span>105</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc3550">9.2.56 sqrmp *<span style='mso-tab-count:1 dotted'>............................................................................................................ </span>105</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc3565">9.2.57 sqroot<span style='mso-tab-count:1 dotted'>.............................................................................................................. </span>106</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc3583">9.2.58 trial_division<span style='mso-tab-count:1 dotted'>..................................................................................................... </span>106</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc3597">9.2.59 xgcd<span style='mso-tab-count:1 dotted'>................................................................................................................ </span>107</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc3616">9.2.60 zzn2_add<span style='mso-tab-count:1 dotted'>.......................................................................................................... </span>108</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc3630">9.2.61 zzn2_compare *<span style='mso-tab-count:1 dotted'>................................................................................................. </span>108</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc3644">9.2.62 zzn2_conj<span style='mso-tab-count:1 dotted'>......................................................................................................... </span>108</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc3658">9.2.63 zzn2_copy *<span style='mso-tab-count:1 dotted'>...................................................................................................... </span>109</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc3672">9.2.64 zzn2_from_big<span style='mso-tab-count:1 dotted'>................................................................................................... </span>109</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc3686">9.2.65 zzn2_from_bigs<span style='mso-tab-count:1 dotted'>.................................................................................................. </span>109</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc3700">9.2.66 zzn2_from_int<span style='mso-tab-count:1 dotted'>.................................................................................................... </span>110</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc3714">9.2.67 zzn2_from_ints<span style='mso-tab-count:1 dotted'>.................................................................................................. </span>110</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc3730">9.2.68 zzn2_from_zzn<span style='mso-tab-count:1 dotted'>................................................................................................... </span>110</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc3744">9.2.69 zzn2_from_zzns<span style='mso-tab-count:1 dotted'>.................................................................................................. </span>111</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc3760">9.2.70 zzn2_imul<span style='mso-tab-count:1 dotted'>......................................................................................................... </span>111</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc3775">9.2.71 zzn2_inv<span style='mso-tab-count:1 dotted'>........................................................................................................... </span>111</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc3788">9.2.72 zzn2_isunity<span style='mso-tab-count:1 dotted'>...................................................................................................... </span>112</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc3803">9.2.73 zzn2_iszero *<span style='mso-tab-count:1 dotted'>..................................................................................................... </span>112</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc3817">9.2.74 zzn2_mul<span style='mso-tab-count:1 dotted'>.......................................................................................................... </span>112</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc3830">9.2.75 zzn2_negate<span style='mso-tab-count:1 dotted'>....................................................................................................... </span>113</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc3844">9.2.76 zzn2_sadd<span style='mso-tab-count:1 dotted'>......................................................................................................... </span>113</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc3859">9.2.77 zzn2_smul<span style='mso-tab-count:1 dotted'>........................................................................................................ </span>113</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc3873">9.2.78 zzn2_ssub<span style='mso-tab-count:1 dotted'>......................................................................................................... </span>114</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc3888">9.2.79 zzn2_sub<span style='mso-tab-count:1 dotted'>.......................................................................................................... </span>114</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc3902">9.2.80 zzn2_timesi<span style='mso-tab-count:1 dotted'>....................................................................................................... </span>114</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc3916">9.2.81 zzn2_zero *<span style='mso-tab-count:1 dotted'>....................................................................................................... </span>115</a></span></p><p class=MsoToc2 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc3929">9.3 Elliptic curve routines<span style='mso-tab-count:1 dotted'>............................................................................................... </span>116</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#1.1.1.ebrick_init&#124;outline">9.3.1 ebrick_init<span style='mso-tab-count:
1 dotted'>.......................................................................................................... </span>116</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#1.1.1.ebrick2_init&#124;outline">9.3.1 ebrick2_init<span style='mso-tab-count:
1 dotted'>........................................................................................................ </span>117</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#1.1.2.ebrick_end *&#124;outline">9.3.2 ebrick_end *<span style='mso-tab-count:
1 dotted'>....................................................................................................... </span>117</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#1.1.3.ebrick2_end *&#124;outline">9.3.3 ebrick2_end *<span style='mso-tab-count:
1 dotted'>...................................................................................................... </span>118</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#1.1.4.ecurve_add&#124;outline">9.3.4 ecurve_add<span style='mso-tab-count:
1 dotted'>.......................................................................................................... </span>118</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#1.1.5.ecurve2_add&#124;outline">9.3.5 ecurve2_add<span style='mso-tab-count:
1 dotted'>........................................................................................................ </span>119</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#1.1.6.ecurve_init&#124;outline">9.3.6 ecurve_init<span style='mso-tab-count:
1 dotted'>.......................................................................................................... </span>119</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#1.1.7.ecurve2_init&#124;outline">9.3.7 ecurve2_init<span style='mso-tab-count:
1 dotted'>........................................................................................................ </span>120</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#1.1.8.ecurve_mult&#124;outline">9.3.8 ecurve_mult<span style='mso-tab-count:
1 dotted'>........................................................................................................ </span>120</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#1.1.9.ecurve2_mult&#124;outline">9.3.9 ecurve2_mult<span style='mso-tab-count:
1 dotted'>...................................................................................................... </span>121</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#1.1.10.ecurve_mult2&#124;outline">9.3.10 ecurve_mult2<span style='mso-tab-count:
1 dotted'>..................................................................................................... </span>121</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#1.1.11.ecurve2_mult2&#124;outline">9.3.11 ecurve2_mult2<span
style='mso-tab-count:1 dotted'>................................................................................................... </span>122</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#1.1.12.ecurve_multi_add&#124;outline">9.3.12 ecurve_multi_add<span
style='mso-tab-count:1 dotted'>............................................................................................... </span>122</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#1.1.13.ecurve2_multi_add&#124;outline">9.3.13 ecurve2_multi_add<span
style='mso-tab-count:1 dotted'>............................................................................................. </span>123</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#1.1.14.ecurve_multn&#124;outline">9.3.14 ecurve_multn<span style='mso-tab-count:
1 dotted'>..................................................................................................... </span>123</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#1.1.15.ecurve2_multn&#124;outline">9.3.15 ecurve2_multn<span
style='mso-tab-count:1 dotted'>................................................................................................... </span>124</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#1.1.16.ecurve_sub&#124;outline">9.3.16 ecurve_sub<span style='mso-tab-count:
1 dotted'>........................................................................................................ </span>124</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#1.1.17.ecurve2_sub&#124;outline">9.3.17 ecurve2_sub<span style='mso-tab-count:
1 dotted'>...................................................................................................... </span>125</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#1.1.18.epoint_comp&#124;outline">9.3.18 epoint_comp<span style='mso-tab-count:
1 dotted'>..................................................................................................... </span>125</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#1.1.19.epoint2_comp&#124;outline">9.3.19 epoint2_comp<span style='mso-tab-count:
1 dotted'>.................................................................................................... </span>126</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#1.1.20.epoint_copy *&#124;outline">9.3.20 epoint_copy *<span
style='mso-tab-count:1 dotted'>.................................................................................................... </span>126</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#1.1.21.epoint2_copy *&#124;outline">9.3.21 epoint2_copy *<span
style='mso-tab-count:1 dotted'>.................................................................................................. </span>127</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#1.1.22.epoint_free *&#124;outline">9.3.22 epoint_free *<span
style='mso-tab-count:1 dotted'>...................................................................................................... </span>127</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#1.1.23.epoint_get&#124;outline">9.3.23 epoint_get<span style='mso-tab-count:
1 dotted'>......................................................................................................... </span>128</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#1.1.24.epoint_getxyz&#124;outline">9.3.24 epoint_getxyz<span
style='mso-tab-count:1 dotted'>.................................................................................................... </span>129</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#1.1.25.epoint2_get&#124;outline">9.3.25 epoint2_get<span style='mso-tab-count:
1 dotted'>....................................................................................................... </span>129</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#1.1.26.epoint2_getxyz&#124;outline">9.3.26 epoint2_getxyz<span
style='mso-tab-count:1 dotted'>.................................................................................................. </span>130</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#1.1.27.epoint_init&#124;outline">9.3.27 epoint_init<span style='mso-tab-count:
1 dotted'>........................................................................................................ </span>130</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#1.1.28.epoint_init_mem&#124;outline">9.3.28 epoint_init_mem<span
style='mso-tab-count:1 dotted'>................................................................................................ </span>131</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#1.1.29.epoint_norm&#124;outline">9.3.29 epoint_norm<span style='mso-tab-count:
1 dotted'>...................................................................................................... </span>131</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#1.1.30.epoint2_norm&#124;outline">9.3.30 epoint2_norm<span style='mso-tab-count:
1 dotted'>.................................................................................................... </span>132</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#1.1.31.epoint_set&#124;outline">9.3.31 epoint_set<span style='mso-tab-count:
1 dotted'>......................................................................................................... </span>132</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#1.1.32.epoint2_set&#124;outline">9.3.32 epoint2_set<span style='mso-tab-count:
1 dotted'>....................................................................................................... </span>133</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#1.1.33.epoint_x&#124;outline">9.3.33 epoint_x<span style='mso-tab-count:1 dotted'>........................................................................................................... </span>133</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#1.1.34.mul_brick&#124;outline">9.3.34 mul_brick<span style='mso-tab-count:
1 dotted'>......................................................................................................... </span>134</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#1.1.35.mul2_brick&#124;outline">9.3.35 mul2_brick<span style='mso-tab-count:
1 dotted'>....................................................................................................... </span>135</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#1.1.36.point_at_infinity *&#124;outline">9.3.36 point_at_infinity *<span
style='mso-tab-count:1 dotted'>.............................................................................................. </span>135</a></span></p><p class=MsoToc2 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc4567">9.4 Encryption Routines<span style='mso-tab-count:1 dotted'>................................................................................................. </span>136</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc4569">9.4.1 aes_decrypt *<span style='mso-tab-count:1 dotted'>...................................................................................................... </span>136</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc4583">9.4.2 aes_encrypt *<span style='mso-tab-count:1 dotted'>...................................................................................................... </span>136</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc4598">9.4.3 aes_end *<span style='mso-tab-count:1 dotted'>........................................................................................................... </span>137</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc4612">9.4.4 aes_getreg *<span style='mso-tab-count:1 dotted'>........................................................................................................ </span>137</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc4627">9.4.5 aes_init *<span style='mso-tab-count:1 dotted'>........................................................................................................... </span>138</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc4647">9.4.6 aes_reset *<span style='mso-tab-count:1 dotted'>.......................................................................................................... </span>139</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc4662">9.4.7 shs_init *<span style='mso-tab-count:1 dotted'>........................................................................................................... </span>139</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc4675">9.4.8 shs_hash *<span style='mso-tab-count:1 dotted'>.......................................................................................................... </span>139</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc4689">9.4.9 shs_process *<span style='mso-tab-count:1 dotted'>...................................................................................................... </span>140</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc4703">9.4.10 shs256_init *<span style='mso-tab-count:1 dotted'>.................................................................................................... </span>140</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc4716">9.4.11 shs256_hash *<span style='mso-tab-count:1 dotted'>................................................................................................... </span>140</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc4730">9.4.12 shs256_process *<span style='mso-tab-count:1 dotted'>............................................................................................... </span>141</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc4744">9.4.13 shs384_init *<span style='mso-tab-count:1 dotted'>.................................................................................................... </span>141</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc4759">9.4.14 shs384_hash *<span style='mso-tab-count:1 dotted'>................................................................................................... </span>141</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc4773">9.4.15 shs384_process *<span style='mso-tab-count:1 dotted'>............................................................................................... </span>142</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc4787">9.4.16 shs512_init *<span style='mso-tab-count:1 dotted'>.................................................................................................... </span>142</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc4802">9.4.17 shs512_hash *<span style='mso-tab-count:1 dotted'>................................................................................................... </span>142</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc4816">9.4.18 shs512_process *<span style='mso-tab-count:1 dotted'>............................................................................................... </span>143</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc4832">9.4.19 strong_bigdig<span style='mso-tab-count:1 dotted'>.................................................................................................... </span>143</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc4850">9.4.20 strong_bigrand<span style='mso-tab-count:1 dotted'>................................................................................................... </span>144</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc4867">9.4.21 strong_init *<span style='mso-tab-count:1 dotted'>..................................................................................................... </span>144</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc4885">9.4.22 strong_kill *<span style='mso-tab-count:1 dotted'>..................................................................................................... </span>145</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc4899">9.4.23 strong_rng *<span style='mso-tab-count:1 dotted'>...................................................................................................... </span>145</a></span></p><p class=MsoToc2 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc4913">9.5 Floating-Slash Routines<span style='mso-tab-count:1 dotted'>............................................................................................ </span>146</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc4915">9.5.1 build<span style='mso-tab-count:1 dotted'>................................................................................................................. </span>146</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc4941">9.5.2 dconv<span style='mso-tab-count:1 dotted'>................................................................................................................ </span>146</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc4956">9.5.3 denom<span style='mso-tab-count:1 dotted'>............................................................................................................... </span>147</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc4973">9.5.4 facos<span style='mso-tab-count:1 dotted'>.................................................................................................................. </span>147</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc4988">9.5.5 facosh<span style='mso-tab-count:1 dotted'>................................................................................................................ </span>148</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc5003">9.5.6 fadd<span style='mso-tab-count:1 dotted'>................................................................................................................... </span>148</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc5018">9.5.7 fasin<span style='mso-tab-count:1 dotted'>.................................................................................................................. </span>148</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc5033">9.5.8 fasinh<span style='mso-tab-count:1 dotted'>................................................................................................................. </span>149</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc5046">9.5.9 fatan<span style='mso-tab-count:1 dotted'>.................................................................................................................. </span>149</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc5059">9.5.10 fatanh<span style='mso-tab-count:1 dotted'>............................................................................................................... </span>149</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc5074">9.5.11 fcomp<span style='mso-tab-count:1 dotted'>............................................................................................................... </span>150</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc5087">9.5.12 fconv<span style='mso-tab-count:1 dotted'>................................................................................................................ </span>150</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc5102">9.5.13 fcos<span style='mso-tab-count:1 dotted'>.................................................................................................................. </span>150</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc5117">9.5.14 fcosh<span style='mso-tab-count:1 dotted'>................................................................................................................ </span>151</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc5130">9.5.15 fdiv<span style='mso-tab-count:1 dotted'>.................................................................................................................. </span>151</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc5143">9.5.16 fdsize<span style='mso-tab-count:1 dotted'>............................................................................................................... </span>151</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc5158">9.5.17 fexp<span style='mso-tab-count:1 dotted'>................................................................................................................. </span>152</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc5173">9.5.18 fincr<span style='mso-tab-count:1 dotted'>................................................................................................................. </span>152</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc5193">9.5.19 flog<span style='mso-tab-count:1 dotted'>.................................................................................................................. </span>153</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc5208">9.5.20 flop<span style='mso-tab-count:1 dotted'>.................................................................................................................. </span>153</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc5224">9.5.21 fmodulo<span style='mso-tab-count:1 dotted'>............................................................................................................ </span>154</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc5240">9.5.22 fmul<span style='mso-tab-count:1 dotted'>................................................................................................................. </span>154</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc5257">9.5.23 fpack<span style='mso-tab-count:1 dotted'>................................................................................................................ </span>155</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc5275">9.5.24 fpi<span style='mso-tab-count:1 dotted'>................................................................................................................... </span>155</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc5291">9.5.25 fpmul<span style='mso-tab-count:1 dotted'>............................................................................................................... </span>156</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc5309">9.5.26 fpower<span style='mso-tab-count:1 dotted'>.............................................................................................................. </span>156</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc5325">9.5.27 fpowf<span style='mso-tab-count:1 dotted'>................................................................................................................ </span>157</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc5338">9.5.28 frand<span style='mso-tab-count:1 dotted'>................................................................................................................ </span>157</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc5351">9.5.29 frecip<span style='mso-tab-count:1 dotted'>................................................................................................................ </span>157</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc5365">9.5.30 froot<span style='mso-tab-count:1 dotted'>................................................................................................................. </span>158</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc5380">9.5.31 fsin<span style='mso-tab-count:1 dotted'>.................................................................................................................. </span>158</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc5393">9.5.32 fsinh<span style='mso-tab-count:1 dotted'>................................................................................................................ </span>158</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc5407">9.5.33 fsub<span style='mso-tab-count:1 dotted'>................................................................................................................. </span>159</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc5421">9.5.34 ftan<span style='mso-tab-count:1 dotted'>.................................................................................................................. </span>159</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc5434">9.5.35 ftanh<span style='mso-tab-count:1 dotted'>................................................................................................................ </span>159</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc5449">9.5.36 ftrunc<span style='mso-tab-count:1 dotted'>............................................................................................................... </span>160</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc5466">9.5.37 numer<span style='mso-tab-count:1 dotted'>.............................................................................................................. </span>160</a></span></p><p class=MsoToc3 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc5485">9.5.38 mround<span style='mso-tab-count:1 dotted'>............................................................................................................ </span>161</a></span></p><p class=MsoToc1 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc5501">10. Instance variables<span style='mso-tab-count:1 dotted'>.................................................................................. </span>162</a></span></p><p class=MsoToc1 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc5527">11. MIRACL Error Messages<span style='mso-tab-count:1 dotted'>........................................................................ </span>163</a></span></p><p class=MsoToc1 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc5624">12. The Hardware/Compiler Interface<span style='mso-tab-count:
1 dotted'>.................................................. </span>167</a></span></p><p class=MsoToc1 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><a
href="#_toc5672"><span style="mso-spacerun:yes">†</span>Bibliography<span
style='mso-tab-count:1 dotted'>..................................................................................................... </span>168</a></span><&#33;--[if supportFields]><span
lang=EN-GB><span style='mso-element:field-end'></span></span><&#33;[endif]--></p></div><b><span lang=EN-GB style='font-size:12.0pt;font-family:Arial;mso-fareast-font-family:
"Times New Roman";mso-bidi-font-family:Arial;text-transform:uppercase;
mso-ansi-language:EN-GB;mso-fareast-language:AR-SA;mso-bidi-language:AR-SA'><br
clear=all style='page-break-before:auto;mso-break-type:section-break'></span></b><div class=WordSection2><p class=MsoToc1 style='tab-stops:right dotted 415.25pt'><span lang=EN-GB><span
style="mso-spacerun:yes">†</span></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p></div><b style='mso-bidi-font-weight:normal'><span lang=EN-GB style='font-size:14.0pt;
mso-bidi-font-size:10.0pt;font-family:"Times New Roman";mso-fareast-font-family:
"Times New Roman";mso-bidi-font-family:"Times New Roman";mso-font-kerning:.5pt;
mso-ansi-language:EN-GB;mso-fareast-language:AR-SA;mso-bidi-language:AR-SA'><br
clear=all style='mso-special-character:line-break;page-break-before:auto;
mso-break-type:section-break'></span></b><div class=WordSection3></div><b style='mso-bidi-font-weight:normal'><span lang=EN-GB style='font-size:14.0pt;
mso-bidi-font-size:10.0pt;font-family:"Times New Roman";mso-fareast-font-family:
"Times New Roman";mso-bidi-font-family:"Times New Roman";mso-font-kerning:.5pt;
mso-ansi-language:EN-GB;mso-fareast-language:AR-SA;mso-bidi-language:AR-SA'><br
clear=all style='page-break-before:always;mso-break-type:section-break'></span></b><div class=WordSection4><h1 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level1 lfo1;tab-stops:
0cm'><a name="_toc632"></a><&#33;[if &#33;supportLists]><span lang=EN-GB
style='mso-fareast-font-family:Arial;mso-bidi-font-family:Arial'><span
style='mso-list:Ignore'>1.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>Introduction </span></h1><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Remember when as a naive young computer
user, you received delivery of your brand new state-of-the-art micro; remember
your anticipation at the prospect of the computer power now available at your
fingertips; remember recalling all those articles which promised that ëtodayís
microcomputers are as powerful as yesterdays mainframesí. Remember then slowly
and laboriously typing in your first program, to calculate, say, 1000&#33; (i.e.
1000 </span><span lang=EN-GB style='font-family:Symbol'>¥</span><span
lang=EN-GB> 999 </span><span lang=EN-GB style='font-family:Symbol'>¥</span><span
lang=EN-GB> 998... </span><span lang=EN-GB style='font-family:Symbol'>¥</span><span
lang=EN-GB>1) - a calculation unimaginable by hand. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><span style='mso-tab-count:3'>††††††††††††††††††††††††††††††††††† </span></span><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB style='font-size:16.0pt;
mso-bidi-font-size:10.0pt'>10 LET X=1<span style="mso-spacerun:yes">†††††††††
</span><o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span lang=EN-GB
style='font-size:16.0pt;mso-bidi-font-size:10.0pt'><span style='mso-tab-count:
3'>†††††††††††††††††††††††††† </span>20 FOR I=1 TO 1000<span
style="mso-spacerun:yes">†† </span><o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span lang=EN-GB
style='font-size:16.0pt;mso-bidi-font-size:10.0pt'><span style='mso-tab-count:
3'>†††††††††††††††††††††††††† </span>30 X=X*I<span
style="mso-spacerun:yes">††††††††††† </span><o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span lang=EN-GB
style='font-size:16.0pt;mso-bidi-font-size:10.0pt'><span style='mso-tab-count:
3'>†††††††††††††††††††††††††† </span>40 NEXT I<span
style="mso-spacerun:yes">†††††††††† </span><o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span lang=EN-GB
style='font-size:16.0pt;mso-bidi-font-size:10.0pt'><span style='mso-tab-count:
3'>†††††††††††††††††††††††††† </span>50 PRINT X<span
style="mso-spacerun:yes">††††††††† </span><o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span lang=EN-GB
style='font-size:16.0pt;mso-bidi-font-size:10.0pt'><span style='mso-tab-count:
3'>†††††††††††††††††††††††††† </span>60 END</span><span lang=EN-GB><span
style="mso-spacerun:yes">†††††††††††† </span><o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span lang=EN-GB><o:p>&nbsp;</o:p></span></b></p><p class=MsoNormal><span lang=EN-GB><span style='mso-tab-count:2'>††††††††††††††††††††††† </span></span><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB style='font-size:16.0pt;
mso-bidi-font-size:10.0pt'>RUN</span><span lang=EN-GB></span></b><span
lang=EN-GB><span style="mso-spacerun:yes">††††††††††††††††</span></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>After a few seconds the result appeared:-</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><span style='mso-tab-count:2'>††††††††††††††††††††††† </span></span><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB style='font-size:16.0pt;
mso-bidi-font-size:10.0pt'>Too big at line 30<o:p></o:p></span></b></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Remember your disappointment.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Now try the MIRACL approach. MIRACL is a
portable C library which implements multiprecision integer and rational
data-types, and provides the routines to perform basic arithmetic on them.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Run the program <b style='mso-bidi-font-weight:
normal'>fact</b> from the distribution media, and type in 1000. There is your
answer - a 2568 digit number.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Now compile and run the program <b
style='mso-bidi-font-weight:normal'>roots</b>, and ask it to calculate the
square root of 2. Virtually instantly your computer comes back with the value
correct to 100+ decimal places. Now thatís what I call computing&#33;</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Next run the Public Key Cryptography
program <b style='mso-bidi-font-weight:normal'>enciph</b>. When it asks the
name of a file to be enciphered press return. When it asks for an output
filename, type FRED followed by return. Now type in any message, finishing with
CONTROL-Z. Your message has been thoroughly enciphered in the file FRED.BLG
(type it out and see). Now run ëdeciphí, and type in FRED. Press return for the
requested output filename. Your original message appears on the screen.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>This type of encipherment, based as it is
on the difficulty of factoring large numbers, offers much greater security and
flexibility than more traditional methods. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>A useful demonstration of the power of
MIRACL is given by the program <b style='mso-bidi-font-weight:normal'>ratcalc</b>,
a powerful scientific calculator - accurate to 36 decimal places and with the
unusual ability to handle fractions directly. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>It is assumed in this manual that the
reader is familiar with the C language, and with his/her own computer. On a
first reading Chapters 4, 5 and 6 may be safely skipped. Examination of the
example programs' source code will be very rewarding.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><b style='mso-bidi-font-weight:normal'><span lang=EN-GB style='font-size:14.0pt;
mso-bidi-font-size:10.0pt;font-family:"Times New Roman";mso-fareast-font-family:
"Times New Roman";mso-bidi-font-family:"Times New Roman";mso-font-kerning:.5pt;
mso-ansi-language:EN-GB;mso-fareast-language:AR-SA;mso-bidi-language:AR-SA'><br
clear=all style='page-break-before:always'></span></b><h1 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level1 lfo1;tab-stops:
0cm'><a name="_toc676"></a><&#33;[if &#33;supportLists]><span lang=EN-GB
style='mso-fareast-font-family:Arial;mso-bidi-font-family:Arial'><span
style='mso-list:Ignore'>2.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>Installation</span></h1><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>The MIRACL library has been successfully
installed on a VAX11/780, on a variety of UNIX workstations (Sun, SPARC, Next,
IBM RS/6000), on an IBM PC using the Microsoft C and C++ compilers, Borlandís
Turbo C and Borland C++ compilers, the Watcom C compiler and the DJGPP GNU
compiler; on ARM based computers, and on an Apple Macintosh. Recently it has
been implemented on Itanium and AMD 64-bit processors.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>The complete source code for each module in
the MIRACL library, and for each of the example programs is provided on the
distribution media. Most<b style='mso-bidi-font-weight:normal'></b>are written
in Standard ANSI C, and should compile using any decent ANSI C compiler. Some
modules contain extensive amounts of in-line assembly language, used to
optimise performance for certain compiler/processor combinations. However these
are invoked transparently by conditional compilation commands and will not
interfere with other compilers. The batch files <i style='mso-bidi-font-style:
normal'>xxdoit.xxx</i> contain the commands used for the creation of a library
file and the example programs for several compilers. Print out and examine the
appropriate file for your configuration. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Pre-compiled libraries for immediate use
with certain popular compilers may be found on the distribution media:
ready-to-run versions of only some of the example programs may be included, to
conserve space.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>To create a library you will need access to
a compiler, a text editor, a linker, a librarian utility, and an assembler
(optional). Read your compiler documentation for further details. The file <i
style='mso-bidi-font-style:normal'>mrmuldv.any</i>, which contains special
assembly language versions of the time-critical routines <b style='mso-bidi-font-weight:
normal'>muldiv</b>, <b style='mso-bidi-font-weight:normal'>muldvd</b>,<b
style='mso-bidi-font-weight:normal'> muldvd2</b> and <b style='mso-bidi-font-weight:
normal'>muldvm</b> together with some portable C versions, which may need to be
tailored for your configuration. These modules are particularly required if the
compiler does not support a double length type which can hold the product of
two word-length integers. Most modern compilers <u>do</u> provide this support
(often the double length type is called <b style='mso-bidi-font-weight:normal'>long
long), </b>and in this case<b style='mso-bidi-font-weight:normal'></b>it is
often adequate to use the standard C version of this module <i
style='mso-bidi-font-style:normal'>mrmuldv.ccc</i> which can simply be copied
to <i style='mso-bidi-font-style:normal'>mrmuldv.c</i>. Read this manual
carefully, and the comments in <i style='mso-bidi-font-style:normal'>mrmuldv.any</i>
for more details. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>The hardware/compiler specific file <i
style='mso-bidi-font-style:normal'>mirdef.h</i> needs to be specified. To
assist with this, five example versions of the header are supplied: <i
style='mso-bidi-font-style:normal'>mirdef.h16</i> for use with a 16-bit
processor, <i style='mso-bidi-font-style:normal'>mirdef.h32</i> for 32-bit
processors, <i style='mso-bidi-font-style:normal'>mirdef.haf</i> if using a
32-bit processor in a 16-bit mode, and <i style='mso-bidi-font-style:normal'>mirdef.hpc</i>
for pseudo 32-bit working in a 16-bit environment. Note that the full 32-bit
version is fastest, but only possible if using a true 32-bit compiler with a
32-bit processor. Try <i style='mso-bidi-font-style:normal'>mirdef.gcc</i> for
use with </span><b style='mso-bidi-font-weight:normal'><span lang=EN-GB
style='font-family:Courier'>gcc</span></b><span lang=EN-GB> and </span><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB style='font-family:Courier'>g++</span></b><span
lang=EN-GB> in a Unix environment (no assembler).</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>To assist with the configuration process, a
file <i style='mso-bidi-font-style:normal'>config.c</i> is provided. When
compiled and run <u>on the target processor</u> it automatically generates a <i
style='mso-bidi-font-style:normal'>mirdef.h</i> file and gives general advice
on configuration. It also generates a <i style='mso-bidi-font-style:normal'>miracl.lst</i>
file with a list of MIRACL modules to be included in the associated library
build. Experimentation with this program is strongly encouraged. When compiling
this program DO NOT use any compiler optimization.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>The <i style='mso-bidi-font-style:normal'>mirdef.h</i>
file contains some optional definitions: Define <b style='mso-bidi-font-weight:
normal'>MR_NOFULLWIDTH</b> if you are unable to supply versions of <b
style='mso-bidi-font-weight:normal'>muldvd</b>, <b style='mso-bidi-font-weight:
normal'>muldvd2</b> and <b style='mso-bidi-font-weight:normal'>muldvm</b> in <i
style='mso-bidi-font-style:normal'>mrmuldv.c</i>. Define <b style='mso-bidi-font-weight:
normal'>MR_FLASH</b> if you wish to use <i style='mso-bidi-font-style:normal'>flash</i>
variables in your programs. </span></p><p class=MsoNormal><span lang=EN-GB>Either one of <b style='mso-bidi-font-weight:
normal'>MR_LITTLE_ENDIAN </b>or<b style='mso-bidi-font-weight:normal'>
MR_BIG_ENDIAN </b>must be defined. The <i style='mso-bidi-font-style:normal'>config.c</i>
program automatically determines which is appropriate for your processor.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>By omitting the <b style='mso-bidi-font-weight:
normal'>MR_FLASH</b> definition <i style='mso-bidi-font-style:normal'>big</i>
variables can be made much larger, and the library produced will be much
smaller, leading to more compact executables. Define <b style='mso-bidi-font-weight:
normal'>MR_STRIPPED_DOWN</b> to omit error messages, to save even more space in
production code. Use with care&#33; </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>If you donít want any assembler, define <b
style='mso-bidi-font-weight:normal'>MR_NOASM</b>. This generates standard C
code for the four time-critical routines, and generates it in-line. This is
faster - saves on function calling overhead - and also gives an optimising
compiler something to chew on. Note that if <b style='mso-bidi-font-weight:
normal'>MR_NOASM</b> is defined, then the <i style='mso-bidi-font-style:normal'>mrmuldv</i>
module is not required in the MIRACL library. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>If using the Microsoft Visual C++ tool,
some helpful advice can be found in the file <i style='mso-bidi-font-style:
normal'>msvisual.txt</i>. If using the Linux operating system, check out <i
style='mso-bidi-font-style:normal'>linux.txt</i>. Users of the Borland compiler
should look at <i style='mso-bidi-font-style:normal'>borland.txt</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>In the majority of cases where pre-built
libraries or specific advice in a <i style='mso-bidi-font-style:normal'>.txt</i>
file is not available, the following procedure will result in a successful
build of the MIRACL library:-</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><ol style='margin-top:0cm' start=1 type=1><li class=MsoNormal style='mso-list:l1 level1 lfo2;tab-stops:36.0pt'><span
lang=EN-GB>Compile and run <i style='mso-bidi-font-style:normal'>config.c</i>
on the target processor.</span></li><li class=MsoNormal style='mso-list:l1 level1 lfo2;tab-stops:36.0pt'><span
lang=EN-GB>Rename the generated file <i style='mso-bidi-font-style:normal'>mirdef.tst</i>
to <i style='mso-bidi-font-style:normal'>mirdef.h<o:p></o:p></i></span></li><li class=MsoNormal style='mso-list:l1 level1 lfo2;tab-stops:36.0pt'><span
lang=EN-GB>If so advised by the <b style='mso-bidi-font-weight:normal'>config</b>
program, extract a suitable <i style='mso-bidi-font-style:normal'>mrmuldv.c</i>
file from <i style='mso-bidi-font-style:normal'>mrmuldv.any</i> (or copy
the standard C version <i style='mso-bidi-font-style:normal'>mrmuldv.ccc </i>to
<i style='mso-bidi-font-style:normal'>mrmuldv.c</i> and use this). If it
is pure assembly language it may be appropriate to name it <i
style='mso-bidi-font-style:normal'>mrmuldv.s</i> or <i style='mso-bidi-font-style:
normal'>mrmuldv.asm</i>.</span></li><li class=MsoNormal style='mso-list:l1 level1 lfo2;tab-stops:36.0pt'><span
lang=EN-GB>If the fast <b style='mso-bidi-font-weight:normal'>KCM</b> or <b
style='mso-bidi-font-weight:normal'>Comba </b>methods for modular multiplication
were selected (see below), compile and run the <i style='mso-bidi-font-style:
normal'>mex.c</i> utility on any workstation. Use it to automatically
generate either the module <i style='mso-bidi-font-style:normal'>mrcomba.c</i>
or <i style='mso-bidi-font-style:normal'>mrkcm.c</i>. This will require a
processor/compiler-specific <i style='mso-bidi-font-style:normal'>xxx.mcs</i>
file. The compiler must support inline assembly. </span></li><li class=MsoNormal style='mso-list:l1 level1 lfo2;tab-stops:36.0pt'><span
lang=EN-GB>Make sure that all the MIRACL header files are accessible to
the compiler. Typically the flag <b style='mso-bidi-font-weight:normal'>&#8211;I.</b>
or <b style='mso-bidi-font-weight:normal'>/I.</b> allows these headers to
be accessed from the current directory.</span></li><li class=MsoNormal style='mso-list:l1 level1 lfo2;tab-stops:36.0pt'><span
lang=EN-GB>Compile the MIRACL modules listed in the generated file <i
style='mso-bidi-font-style:normal'>miracl.lst</i> and create a library
file, typically <i style='mso-bidi-font-style:normal'>miracl.a</i> or <i
style='mso-bidi-font-style:normal'>miracl.lib</i>. This might be achieved
by editing <i style='mso-bidi-font-style:normal'>miracl.lst</i> into a
suitable batch or make file. On UNIX it might be as simple as:-</span></li></ol><p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:36.0pt'><span lang=EN-GB
style='font-family:"Courier New"'>gcc &#8211;I. &#8211;c &#8211;O2 mr*.c<o:p></o:p></span></p><p class=MsoNormal style='margin-left:36.0pt'><span lang=PT-BR
style='font-family:"Courier New";mso-ansi-language:PT-BR'>ar rc miracl.a mr*.o<o:p></o:p></span></p><p class=MsoNormal style='margin-left:36.0pt'><span lang=PT-BR
style='mso-ansi-language:PT-BR'><o:p>&nbsp;</o:p></span></p><ol style='margin-top:0cm' start=7 type=1><li class=MsoNormal style='mso-list:l1 level1 lfo2;tab-stops:36.0pt'><span
lang=EN-GB>If using the C++ MIRACL wrapper, compile the required modules,
for example <i style='mso-bidi-font-style:normal'>zzn.cpp</i> and/or <i
style='mso-bidi-font-style:normal'>big.cpp</i> etc.</span></li><li class=MsoNormal style='mso-list:l1 level1 lfo2;tab-stops:36.0pt'><span
lang=EN-GB>Compile and link your application code to any C++ modules it
requires and to the MIRACL library.</span></li></ol><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Remember that MIRACL is portable software.
It may be ported to <b style='mso-bidi-font-weight:normal'>any</b> computer
which supports an ANSI C compiler.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoIndexHeading><span lang=EN-GB>Note that MIRACL is a C library, not
C++. It should always be built as a C library otherwise you might get compiler
errors. To include MIRACL routines in a C program, include the header <i
style='mso-bidi-font-style:normal'>miracl.h</i> at the start of the program,
after including the C standard header <i style='mso-bidi-font-style:normal'>stdio.h</i>
. You may also call MIRACL routines directly from a C++ program by:-</span></p><p class=MsoIndex1><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New"'>extern
&quot;C&quot;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New"'>{<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New"'><span
style='mso-tab-count:1'>†††† </span>#include &quot;miracl.h&quot;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New"'>}<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New"'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>although in most cases it will be
preferable to use the C++ wrapper classes described in Chapter 7.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><b style='mso-bidi-font-weight:normal'><i style='mso-bidi-font-style:normal'><span
lang=EN-GB style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:"Times New Roman";
mso-fareast-font-family:"Times New Roman";mso-bidi-font-family:"Times New Roman";
mso-ansi-language:EN-GB;mso-fareast-language:AR-SA;mso-bidi-language:AR-SA'><br
clear=all style='page-break-before:always'></span></i></b><h2 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level2 lfo1;tab-stops:
0cm'><a name="_toc727"></a><&#33;[if &#33;supportLists]><span lang=EN-GB
style='mso-fareast-font-family:Arial;mso-bidi-font-family:Arial'><span
style='mso-list:Ignore'>2.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>Optimising</span></h2><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>In the context of MIRACL this means
speeding things up. A critical decision to be made when configuring MIRACL is
to determine the optimal underlying type to use. Usually this will be the </span><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB style='font-family:"Courier New"'>int</span></b><span
lang=EN-GB> type. In general try to define the maximum possible underlying type,
as requested by <i style='mso-bidi-font-style:normal'>config</i>. If you have a
64-bit processor, you should be able to specify a 64-bit underlying type. In
some circumstances it may be faster to use a floating-point </span><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB style='font-family:"Courier New"'>double</span></b><span
lang=EN-GB> underlying type.</span></p><p class=MsoIndexHeading><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Obviously an all-C build of MIRACL will be
slowest (but still pretty fast&#33;). It is also the easiest to start with. This
requires an integer data type twice the width of the underlying type. In this
context note that these days most compilers support a </span><span lang=EN-GB
style='font-family:Courier'>long long </span><span lang=EN-GB>integer type
which is twice the width of the </span><span lang=EN-GB style='font-family:
Courier'>int</span><span lang=EN-GB>. Sometimes it is called </span><span
lang=EN-GB style='font-family:"Courier New"'>__int64</span><span lang=EN-GB>
instead of </span><span lang=EN-GB style='font-family:"Courier New"'>long long</span><span
lang=EN-GB>. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>If your processor is of the extreme RISC
variety and supports no integer multiplication/division instruction, or if
using a very large modulus, then the Karatsuba-Montgomery-Comba technique for
fast modular multiplication may well be faster for exponentiation cryptosystems<i
style='mso-bidi-font-style:normal'>.</i> Again the <i style='mso-bidi-font-style:
normal'>config</i> program will guide you through this. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>It is sometimes faster to implement the <i
style='mso-bidi-font-style:normal'>mrmuldv</i> module in assembly language.
This does not require the double-width data type. If you are lucky your
compiler will also be supported by automatically invoked inline assembly, which
will speed things up even further. See <i style='mso-bidi-font-style:normal'>miracl.h</i>
to see which compilers are supported in this way.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>For the ultimate speed, use the extreme
techniques implemented in <i style='mso-bidi-font-style:normal'>mrkcm.c</i>, <i
style='mso-bidi-font-style:normal'>mrcomba.c</i>.<span
style="mso-spacerun:yes">† </span>See <i style='mso-bidi-font-style:normal'>kcmcomba.txt</i>
for instructions on how to automatically generate these files using the
supplied <b style='mso-bidi-font-weight:normal'>mex</b> utility. See also
Chapter 5 for more details. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h2 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level2 lfo1;tab-stops:
0cm'><a name="_toc740"></a><&#33;[if &#33;supportLists]><span lang=EN-GB
style='mso-fareast-font-family:Arial;mso-bidi-font-family:Arial'><span
style='mso-list:Ignore'>2.2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>Upgrading from Version 3</span></h2><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Version 4.0 introduces the <u>M</u>iracl <u>I</u>nstance
<u>P</u>ointer, or <i style='mso-bidi-font-style:normal'>mip</i>. Previous
versions used a number of global and static variables to store internal status
information. There are two problems with this. Firstly such globals have to be
given obscure names to avoid clashes with other project globals. Secondly it
makes multi-threaded applications much more difficult to develop. So from
Version 4.0 all such variables, now referred to as instance variables, are
members of a structure of type <i style='mso-bidi-font-style:normal'>miracl</i>,
and must be accessed via a pointer to an instance of this structure. This
global pointer is now the <u>only</u> static/global variable maintained by the
MIRACL library. Its value is returned by the <b style='mso-bidi-font-weight:
normal'>mirsys</b> routine, which initialises the MIRACL library. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>C++ programmers should note the change in
the name of the instance class from </span><span lang=EN-GB style='font-family:
Courier'>miracl </span><span lang=EN-GB>to </span><span lang=EN-GB
style='font-family:Courier'>Miracl</span><span lang=EN-GB>. The <i
style='mso-bidi-font-style:normal'>mip</i> can be found by taking the address
of this instance.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><span style='mso-tab-count:1'>††††††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>Miracl precision=50;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:1'>†††† </span>.<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:1'>†††† </span>mip=&amp;precision;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:1'>†††† </span>.<span style='mso-tab-count:1'>††† </span><o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:1'>†††† </span>etc<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h2 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level2 lfo1;tab-stops:
0cm'><a name="_toc754"></a><&#33;[if &#33;supportLists]><span lang=EN-GB
style='mso-fareast-font-family:Arial;mso-bidi-font-family:Arial'><span
style='mso-list:Ignore'>2.3<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>Multi-Threaded Programming</span></h2><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>From version 4.4 MIRACL offers full support
for Multi-threaded programming. This comes in various flavours. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>The problem to be overcome is that MIRACL
has to have access to a lot of instance specific status information via its <i
style='mso-bidi-font-style:normal'>mip</i>. Ideally there should be no global
variables, but MIRACL has this one pointer. Unfortunately every thread that uses
MIRACL needs to have its own <i style='mso-bidi-font-style:normal'>mip</i>,
pointing to its own independent status. This is a well-known issue that arises
with threads. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>The first solution is to modify MIRACL so
that the <i style='mso-bidi-font-style:normal'>mip</i>, instead of being a
global, is passed as a parameter to every MIRACL function. The MIRACL routines
can be automatically modified to support this by defining<b style='mso-bidi-font-weight:
normal'> MR_GENERIC_MT </b>in <i style='mso-bidi-font-style:normal'>mirdef.h</i>.
Now (almost all) MIRACL routines are changed such that the <i style='mso-bidi-font-style:
normal'>mip</i> is the first parameter to each function. Some simple functions
are exceptions and do not require the <i style='mso-bidi-font-style:normal'>mip</i>
parameter &#8211; these are marked with an asterix in Chapter 9. For an example
of a program modified to work with a MIRACL library built in this way, see the
program <i style='mso-bidi-font-style:normal'>brent_mt.c</i>. Note however that
this solution does NOT apply to programs written using the MIRACL C++ wrapper
described in Chapter 7. It only applies to C programs that access the MIRACL
routines directly.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>An alternative solution is to use <i
style='mso-bidi-font-style:normal'>Keys</i>, which are a type of thread
specific ìglobalî variable. These <i style='mso-bidi-font-style:normal'>Keys</i>
are not part of the C/C++ standard, but are operating system specific
extensions, implemented via special function calls. MIRACL provides support for
both Microsoft Windows and Unix operating systems. In the former case these <i
style='mso-bidi-font-style:normal'>Keys</i> are called <i style='mso-bidi-font-style:
normal'>Thread-Local Storage</i>. See [Richter] for more information. For Unix
MIRACL supports the POSIX standard interface for multithreading. A very useful
reference for both Windows and Unix is [Walmsley]. This support for threads is
implemented in the module <i style='mso-bidi-font-style:normal'>mrcore.c</i>,
at the start of the file and in the initialisation routine <b style='mso-bidi-font-weight:
normal'>mirsys</b>. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>For Windows, define <b style='mso-bidi-font-weight:
normal'>MR_WINDOWS_MT </b><span style="mso-spacerun:yes">†</span>in <i
style='mso-bidi-font-style:normal'>mirdef.h</i>, and for Unix define<u></u><b
style='mso-bidi-font-weight:normal'>MR_UNIX_MT</b>. In either case there are
some programming implications.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>In the first place the <i style='mso-bidi-font-style:
normal'>Key</i> that is to maintain the <i style='mso-bidi-font-style:normal'>mip</i>
must be initialised and ultimately destroyed by the programs primary thread.
These functions are carried out by calls to the special routines <b
style='mso-bidi-font-weight:normal'>mr_init_threading</b> and <b
style='mso-bidi-font-weight:normal'>mr_end_threading</b><i style='mso-bidi-font-style:
normal'></i>respectively.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>In C++ programs these functions might be
associated with the constructor and destructor of a global variable [Walmsley]
&#8211; this will ensure that they are called at the appropriate time before
new threads are forked off from the main thread. They must be called before any
thread calls <b style='mso-bidi-font-weight:normal'>mirsys</b> either
explicitly, or implicitly by creating a thread-specific instance of the
class<span style="mso-spacerun:yes">† </span></span><span lang=EN-GB
style='font-family:"Courier New"'>Miracl</span><span lang=EN-GB>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>It is strongly recommended that program
development be carried out <u>without</u> support for threads. Only when a
program is fully tested and debugged should it be converted into a thread. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Threaded programming may require other
OS-specific measures, in terms of linking to special libraries, or access to
special heap routines. In this regard it is worth pointing out that all MIRACL
heap accesses are via the module <i style='mso-bidi-font-style:normal'>mralloc.c</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>See the example program <i
style='mso-bidi-font-style:normal'>threadwn.cpp</i> for an example of Windows
C++ multithreading. Read the comments in this program &#8211; it can be
compiled and run from a Windows Command prompt. Similarly see <i
style='mso-bidi-font-style:normal'>threadux.cpp</i> for an example of Unix
multi-threading.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h2 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level2 lfo1;tab-stops:
0cm'><a name="_toc777"></a><&#33;[if &#33;supportLists]><span lang=EN-GB
style='mso-fareast-font-family:Arial;mso-bidi-font-family:Arial'><span
style='mso-list:Ignore'>2.4<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>Constrained environments</span></h2><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>In version 5 of MIRACL there is new support
for implementations in very small and constrained environments. Using the <i
style='mso-bidi-font-style:normal'>config</i> utility it is now possible to
allow various time/space trade-offs, but the main innovation is the possibility
of building and using MIRACL in an environment which does not support a heap.
Normally space for big variables is obtained from the heap, but by specifying
in the configuration header <b style='mso-bidi-font-weight:normal'>MR_STATIC</b>,
a version of the library is built which will always attempt to allocate space
not from the heap, but from static memory or from the stack.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>The main downside to this is that the
maximum size of big variables must be set at compile time, when the library is
being created. As always it is best to let the <i style='mso-bidi-font-style:
normal'>config</i> utility guide you through the process of creating a suitable
<i style='mso-bidi-font-style:normal'>mirdef.h</i> configuration header.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>For the C programmer, the allocation of
memory from the stack for big variables proceeds as follows.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Courier New"'><span style='mso-tab-count:1'>†††† </span>big
x,y,z;<o:p></o:p></span></p><p class=MsoNormal style='text-indent:36.0pt'><span lang=EN-GB
style='font-family:"Courier New";mso-bidi-font-family:"Courier New"'>char
mem[MR_BIG_RESERVE(3)]; <o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Courier New"'><span style='mso-tab-count:1'>†††† </span>memset(mem,0,
MR_BIG_RESERVE(3));<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Courier New"'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>This allocates space for 3 big variables on
the stack, and set that memory to zero. Each individual big variable is then
initialised as</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='text-indent:36.0pt'><span lang=EN-IE
style='font-family:"Courier New";mso-bidi-font-family:"Courier New";mso-ansi-language:
EN-IE'>x=mirvar_mem(mem,0);<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-IE style='font-family:"Courier New";
mso-bidi-font-family:"Courier New";mso-ansi-language:EN-IE'><span
style="mso-spacerun:yes">††† </span><span style='mso-tab-count:1'></span></span><span
lang=PT-BR style='font-family:"Courier New";mso-bidi-font-family:"Courier New";
mso-ansi-language:PT-BR'>y=mirvar_mem(mem,1);<o:p></o:p></span></p><p class=MsoNormal><span lang=PT-BR style='font-family:"Courier New";
mso-bidi-font-family:"Courier New";mso-ansi-language:PT-BR'><span
style="mso-spacerun:yes">††† </span><span style='mso-tab-count:1'></span>z=mirvar_mem(mem,2);<o:p></o:p></span></p><p class=MsoNormal><span lang=PT-BR style='font-family:"Courier New";
mso-bidi-font-family:"Courier New";mso-ansi-language:PT-BR'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-IE style='mso-ansi-language:EN-IE'>Allocating
all the space for multiple big variables from a single chunk of memory makes
sense, as it leads to a faster initialization, and also gives complete control
over variable alignment, which compilers sometimes get wrong. Note that in this
mode the usual big number initialization function <i style='mso-bidi-font-style:
normal'>mirvar</i> is no longer available, and allocation must be implemented
as described above.<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-IE style='mso-ansi-language:EN-IE'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-IE style='mso-ansi-language:EN-IE'>Finally
this memory chunk may optionally be cleared before leaving a function by a
final call to <i style='mso-bidi-font-style:normal'>memset(.)</i> &#8211; this
may be important for security reasons. For an example see the program <i
style='mso-bidi-font-style:normal'>brent.c</i>.<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-IE style='mso-ansi-language:EN-IE'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-IE style='mso-ansi-language:EN-IE'>This mechanism
may be particularly useful when trying to implement a very small program using
elliptic curves, which anyway require much smaller big numbers than other
cryptographic techniques. To allocate memory from the stack for an elliptic
curve point<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-IE style='mso-ansi-language:EN-IE'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-IE style='mso-ansi-language:EN-IE'><span
style='mso-tab-count:1'>††††††††††† </span></span><span lang=EN-IE
style='font-family:"Courier New";mso-bidi-font-family:"Courier New";mso-ansi-language:
EN-IE'>epoint *x,*y,*z;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Courier New"'><span style='mso-tab-count:1'>†††† </span>char
mem[MR_ECP_RESERVE(3)]; <o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Courier New"'><span style='mso-tab-count:1'>†††† </span>memset(mem,0,
MR_ECP_RESERVE(3));<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Courier New"'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>To initialize these points</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='text-indent:36.0pt'><span lang=EN-IE
style='font-family:"Courier New";mso-bidi-font-family:"Courier New";mso-ansi-language:
EN-IE'>x=epoint_init_mem(mem,0);<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-IE style='font-family:"Courier New";
mso-bidi-font-family:"Courier New";mso-ansi-language:EN-IE'><span
style="mso-spacerun:yes">††† </span><span style='mso-tab-count:1'></span>y=epoint_init_mem(mem,1);<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-IE style='font-family:"Courier New";
mso-bidi-font-family:"Courier New";mso-ansi-language:EN-IE'><span
style="mso-spacerun:yes">††† </span><span style='mso-tab-count:1'></span>z=epoint_init_mem(mem,2);<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-IE style='font-family:"Courier New";
mso-bidi-font-family:"Courier New";mso-ansi-language:EN-IE'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Again it may be advisable to clear the
memory associated with these points before exiting the function.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>This mechanism is fully supported for C++
programs as well, where it works in conjunction with the stack allocation
method described in chapter 7. See <i style='mso-bidi-font-style:normal'>pk-demo.cpp</i>
for an<span style="mso-spacerun:yes">† </span>example of use.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>In some extreme cases it may be desired to
use <u>only</u> the stack for <u>all</u> memory allocation. This allows maximum
use and re-use of memory, and avoids any fragmentation of precious RAM. This
can be achieved for C programs by defining <b style='mso-bidi-font-weight:normal'>MR_GENERIC_MT</b>
in <i style='mso-bidi-font-style:normal'>mirdef.h</i>. See above for more details
on this option.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>A typical mirdef.h header in this case
might look like:-<br clear=all style='page-break-before:always'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Courier New"'>/*<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Courier New"'><span
style="mso-spacerun:yes">†</span>*<span style="mso-spacerun:yes">††
</span>MIRACL compiler/hardware definitions - mirdef.h<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Courier New"'><span
style="mso-spacerun:yes">†</span>*<span style="mso-spacerun:yes">††
</span>Copyright (c) 1988-2005 Shamus Software Ltd.<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Courier New"'><span style="mso-spacerun:yes">†</span>*/<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Courier New"'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Courier New"'>#define MR_LITTLE_ENDIAN<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Courier New"'>#define MIRACL 32<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Courier New"'>#define mr_utype int<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Courier New"'>#define MR_IBITS 32<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Courier New"'>#define MR_LBITS 32<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Courier New"'>#define mr_unsign32 unsigned int<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Courier New"'>#define mr_dltype __int64<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Courier New"'>#define mr_unsign64 unsigned __int64<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Courier New"'>#define MR_STATIC 7<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Courier New"'>#define MR_ALWAYS_BINARY<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Courier New"'>#define MR_NOASM<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Courier New"'>#define MAXBASE
((mr_small)1&lt;&lt;(MIRACL-1))<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Courier New"'>#define MR_BITSINCHAR 8<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Courier New"'>#define MR_SHORT_OF_MEMORY<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Courier New"'>#define MR_GENERIC_MT<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Courier New"'>#define MR_STRIPPED_DOWN<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Courier New"'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>For examples of programs which use this
kind of header, see <i style='mso-bidi-font-style:normal'>ecsgen_s.c</i>, <i
style='mso-bidi-font-style:normal'>ecsign_s.c</i> and <i style='mso-bidi-font-style:
normal'>ecsver_s.c</i>, and <i style='mso-bidi-font-style:normal'>ecsgen2s.c</i>,
<i style='mso-bidi-font-style:normal'>ecsign2s.c</i> and <i style='mso-bidi-font-style:
normal'>ecsver2s.</i> These programs implement very small and fast ECDSA key
generation, digital signature, and verification on a Pentium using Microsoft
C++. See <i style='mso-bidi-font-style:normal'>ecdh2m.c</i> and <i
style='mso-bidi-font-style:normal'>ecdhp.c </i>for more nice examples, which
use precomputation to speed up EC Diffie-Hellman implementations.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>For small 8 and 16-bit processors, see
example programs <i style='mso-bidi-font-style:normal'>ecdhp8.c</i>, <i
style='mso-bidi-font-style:normal'>ecdhp16.c</i>, <i style='mso-bidi-font-style:
normal'>ecdh2m8.c</i> and <i style='mso-bidi-font-style:normal'>ecdh2m16.c<o:p></o:p></i></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>NOTE: Doing without a heap is a little
problematical. Structures can no longer be of variable size, and so various
features of MIRACL become unavailable in this mode. For example precomputations
such as required for application of the Chinese remainder theorem are no longer
supported. However in a constrained environment it could be reasonably assumed
that such precomputations are carried out off-line, and made available to the
constrained program fixed in ROM.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>The MIRACL modules are carefully designed
so that an application will only pull in the minimal number of modules from the
library for any given task. This helps to keep the program size down to a
minimum. However if program size is a big issue then extra savings can
sometimes be made by manually deleting from the modules functions that are not
needed by your particular program (the linker will complain if the function is
in fact needed).<br clear=all style='page-break-before:always'></span><a name="_toc845"></a><b style='mso-bidi-font-weight:normal'><span
lang=EN-GB style='font-size:14.0pt;mso-bidi-font-size:10.0pt;font-family:Arial;
mso-font-kerning:.5pt'>The User Interface</span></b></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span lang=EN-GB>AN
EXAMPLE<o:p></o:p></span></b></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'>/*<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style="mso-spacerun:yes">†</span>*<span style="mso-spacerun:yes">†† </span>Program
to calculate factorials.<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style="mso-spacerun:yes">†</span>*/<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'>#include
&lt;stdio.h&gt;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'>#include
&quot;miracl.h&quot;<span style="mso-spacerun:yes">†† </span>/* include MIRACL
system */<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'>void main()<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'>{ /* calculate
factorial of number */<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style="mso-spacerun:yes">††† </span>big nf;<span
style="mso-spacerun:yes">††††††† </span><span style='mso-tab-count:1'>† </span>/*
declare &quot;big&quot; variable nf */<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style="mso-spacerun:yes">††† </span>int n;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style="mso-spacerun:yes">††† </span>miracl *mip=mirsys(5000,10);<o:p></o:p></span></p><p class=MsoNormal style='margin-left:108.0pt;text-indent:36.0pt'><span
lang=EN-GB style='font-family:Courier'>/* base 10, 5000 digits per big<span
style="mso-spacerun:yes">† </span>*/<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style="mso-spacerun:yes">††† </span>nf=mirvar(1);<span
style="mso-spacerun:yes">†† </span>/* initialise big variable nf=1<span
style="mso-spacerun:yes">† </span>*/<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style="mso-spacerun:yes">††† </span></span><span lang=PT-BR style='font-family:
Courier;mso-ansi-language:PT-BR'>printf(&quot;factorial program\n&quot;);<o:p></o:p></span></p><p class=MsoNormal><span lang=PT-BR style='font-family:Courier;mso-ansi-language:
PT-BR'><span style="mso-spacerun:yes">††† </span>printf(&quot;input number n=
\n&quot;);<o:p></o:p></span></p><p class=MsoNormal><span lang=PT-BR style='font-family:Courier;mso-ansi-language:
PT-BR'><span style="mso-spacerun:yes">††† </span>scanf(&quot;%d&quot;,&amp;n);<o:p></o:p></span></p><p class=MsoNormal><span lang=PT-BR style='font-family:Courier;mso-ansi-language:
PT-BR'><span style="mso-spacerun:yes">††† </span>getchar();<o:p></o:p></span></p><p class=MsoNormal><span lang=PT-BR style='font-family:Courier;mso-ansi-language:
PT-BR'><span style="mso-spacerun:yes">††† </span>while (n&gt;1) <o:p></o:p></span></p><p class=MsoNormal><span lang=PT-BR style='font-family:Courier;mso-ansi-language:
PT-BR'><span style="mso-spacerun:yes">††††††† </span>premult(nf,n--,nf); /*
nf=n&#33;=n*(n-1)*...2*1<span style="mso-spacerun:yes">† </span>*/<o:p></o:p></span></p><p class=MsoNormal><span lang=PT-BR style='font-family:Courier;mso-ansi-language:
PT-BR'><span style="mso-spacerun:yes">††† </span></span><span lang=EN-GB
style='font-family:Courier'>printf(&quot;n&#33;= \n&quot;);<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style="mso-spacerun:yes">††† </span>otnum(nf,stdout); /* output result */ <o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'>}<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>This program can be used to quickly
calculate and print out 1000&#33; (a 2568 digit number) in less a second on a 60MHz
Intel Pentium-based computer, a task first performed ëby H.S. Uhler using a
desk calculator and much patience over a period of several yearsí [Knuth73].
Many other example programs are described in Chapter 8.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Any program that wishes to make use of the
MIRACL system must have an </span><span lang=EN-GB style='font-family:Courier'>#include
&quot;miracl.h&quot; </span><span lang=EN-GB>statement. This tells the compiler
to include the C header file <i style='mso-bidi-font-style:normal'>miracl.h</i>
with the main program source file before proceeding with the compilation. This
file contains declarations of all the MIRACL routines available to the user.
The small sub-header file <i style='mso-bidi-font-style:normal'>mirdef.h</i>
contains hardware/compiler-specific details.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>In the main program the MIRACL system must
be initialised by a call to the routine <b style='mso-bidi-font-weight:normal'>mirsys</b>,
which sets the number base and the maximum size of the <i style='mso-bidi-font-style:
normal'>big</i> and <i style='mso-bidi-font-style:normal'>flash</i> variables.
It also initialises the random number system, and creates several workspace <i
style='mso-bidi-font-style:normal'>big</i> variables for its own internal use.
The return value is the Miracl Instance Pointer, or <i style='mso-bidi-font-style:
normal'>mip</i>. This pointer can be used to access various internal parameters
associated with the current instance of MIRACL. For example to set the <b
style='mso-bidi-font-weight:normal'>ERCON </b>flag, one might write </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:36.0pt;text-indent:36.0pt'><span
lang=EN-GB style='font-family:Courier'>mip-&gt;ERCON=TRUE;</span><span
lang=EN-GB><span style="mso-spacerun:yes">† </span></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>The initial call to <b style='mso-bidi-font-weight:
normal'>mirsys </b>also initialises the error tracing system which is
integrated with the MIRACL package. Whenever an error is detected the sequence
of routine calls down to the routine which generated the error is reported, as
well as the error itself. A typical error message might be </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><span style='mso-tab-count:2'>††††††††††††††††††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>MIRACL error from routine powltr <o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:3'>†††††††††††††† </span>called from isprime <o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:3'>†††††††††††††† </span>called from your program <o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>Raising integer to a negative power<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Such an error report facilitates debugging,
and assisted us during the development of these routines. An associated
instance variable <b style='mso-bidi-font-weight:normal'>TRACER</b>,
initialised to OFF, if set by the user to ON, will cause a trace of the
program's progress through the MIRACL routines to be output to the computer screen.</span></p><p class=MsoNormal style='margin-top:12.0pt'><span lang=EN-GB>An instance flag <b
style='mso-bidi-font-weight:normal'>ERNUM, </b>initialised to zero, records the
number of the last internal MIRACL error to have occurred. If the flag <b
style='mso-bidi-font-weight:normal'>ERCON</b> is set to FALSE (the default), an
error message is directed to <i style='mso-bidi-font-style:normal'>stdout</i>
and the program aborts via a call to the system routine <i style='mso-bidi-font-style:
normal'>exit(0)</i>. If your system does not supply such a routine, the
programmer must provide one instead. If <b style='mso-bidi-font-weight:normal'>ERCON
</b>is set to TRUE no error message is emitted and instead the onus is on the
programmer to detect and handle the error. In this case execution continues.
The programmer may choose to deal with the error, and reset <b
style='mso-bidi-font-weight:normal'>ERNUM</b> to zero. However errors are
usually fatal, and if <b style='mso-bidi-font-weight:normal'>ERNUM</b> is
non-zero all MIRACL routines called subsequently will ìfall-throughî and exit
immediately. See <i style='mso-bidi-font-style:normal'>miracl.h</i> for a list
of all possible errors.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Every <i style='mso-bidi-font-style:normal'>big</i>
or <i style='mso-bidi-font-style:normal'>flash</i> variable in the users
program must be initialised by a call to the routine <b style='mso-bidi-font-weight:
normal'>mirvar</b>, which also allows the variable to be given an initial small
integer value.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>The full set of arithmetic and
number-theoretic routines declared in <i style='mso-bidi-font-style:normal'>miracl.h</i>
may be used on these variables. Full flexibility is (almost always) allowed in
parameter usage with these routines. For example the call <b style='mso-bidi-font-weight:
normal'>multiply(<i style='mso-bidi-font-style:normal'>x,y,z</i>),</b>
multiplies the <i style='mso-bidi-font-style:normal'>big</i> variable <b
style='mso-bidi-font-weight:normal'><i style='mso-bidi-font-style:normal'>x</i></b>
by the <i style='mso-bidi-font-style:normal'>big</i> variable<b
style='mso-bidi-font-weight:normal'><i style='mso-bidi-font-style:normal'> y</i></b>
to give the result as <i style='mso-bidi-font-style:normal'>big</i> variable <b
style='mso-bidi-font-weight:normal'><i style='mso-bidi-font-style:normal'>z</i></b>.
Equally valid would be <b style='mso-bidi-font-weight:normal'>multiply(<i
style='mso-bidi-font-style:normal'>x,y,x</i>),</b><b style='mso-bidi-font-weight:
normal'>multiply(<i style='mso-bidi-font-style:normal'>y,y,x</i>)</b>, or <b
style='mso-bidi-font-weight:normal'>multiply(<i style='mso-bidi-font-style:
normal'>x,x,x</i>)</b>. This last simply squares <b style='mso-bidi-font-weight:
normal'><i style='mso-bidi-font-style:normal'>x</i></b>. Note that the first
parameters are by convention always (usually) the inputs to the routines.
Routines are provided not only to allow arithmetic on <i style='mso-bidi-font-style:
normal'>big</i> and <i style='mso-bidi-font-style:normal'>flash</i> numbers,
but also to allow these variables to perform arithmetic with the built-in
integer and double precision data-types. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Conversion routines are provided to convert
from one type to another. For details of each routine see the relevant
documentation in Chapter 9 and the example programs of Chapter 8. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Input and output to a file or I/O device is
handled by the routines <b style='mso-bidi-font-weight:normal'>innum</b>, <b
style='mso-bidi-font-weight:normal'>otnum</b><b style='mso-bidi-font-weight:
normal'>cinnum</b> and <b style='mso-bidi-font-weight:normal'>cotnum</b>. The
first two use the fixed number base specified by the user in the initial call
of <b style='mso-bidi-font-weight:normal'>mirsys</b>. The latter pair work in
conjunction with the instance variable <b style='mso-bidi-font-weight:normal'>IOBASE</b>
which can be assigned dynamically by the user. A simple rule is that if the
program is CPU bound, or involves changes of base, then set the base initially
to MAXBASE (or 0 if a full-width base is possible - see Chapter 4) and use <b
style='mso-bidi-font-weight:normal'>cinnum</b> and <b style='mso-bidi-font-weight:
normal'>cotnum</b>. If on the other hand the program is I/O bound, or needs
access to individual digits of numbers (using <b style='mso-bidi-font-weight:
normal'>getdig</b>, <b style='mso-bidi-font-weight:normal'>putdig</b> and <b
style='mso-bidi-font-weight:normal'>numdig</b>), use <b style='mso-bidi-font-weight:
normal'>innum</b> and <b style='mso-bidi-font-weight:normal'>otnum</b>. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Input and output to/from a character string
is also supported in a similar fashion by the routines <b style='mso-bidi-font-weight:
normal'>instr</b>, <b style='mso-bidi-font-weight:normal'>otstr</b>, <b
style='mso-bidi-font-weight:normal'>cinstr</b> and <b style='mso-bidi-font-weight:
normal'>cotstr</b>. The input routines can be used to set <i style='mso-bidi-font-style:
normal'>big</i> or <i style='mso-bidi-font-style:normal'>flash</i> numbers to
large constant values. By outputting to a string, formatting can take place
prior to actual output to a file or I/O device. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Numbers to bases up to 256 can be
represented. Numbers up to base 60 use as many of the symbols 0-9, A-Z, a-x as
necessary. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>A number base of 64 enforces standard
base64 encoding. On output base64 numbers are padded with trailing = symbols if
needed, but not otherwise formatted. On input white-space characters are
skipped, and padding ignored. Do not use base64 with <i style='mso-bidi-font-style:
normal'>flash</i> numbers. Do not use base64 for outputting negative numbers,
as the sign is ignored. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>If the base is greater than 60 (and not
64), the symbols used are the ASCII codes 0-255. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>A base of 256 is useful when it is
necessary to interpret a line of text as a large integer, as is the case for
the Public Key Cryptography programs described in Chapter 8. The routines <b
style='mso-bidi-font-weight:normal'>big_to_bytes</b> and <b style='mso-bidi-font-weight:
normal'>bytes_to_big</b> allow for direct conversion from the internal <i
style='mso-bidi-font-style:normal'>big</i> format to/from pure binary.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Strings are normally zero-terminated.
However a problem arises when using a base of 256. In this case every digit
from 0 - 255 can legitimately occur in a number. So a 0 does not necessarily
indicate the end of the string. On input another method must be used to
indicate the number of digits in the string.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>By setting the instance variable <b
style='mso-bidi-font-weight:normal'>INPLEN</b> = 25 (for example), just prior
to a call to <b style='mso-bidi-font-weight:normal'>innum</b> or <b
style='mso-bidi-font-weight:normal'>instr</b>, input is terminated after 25
bytes are entered. <b style='mso-bidi-font-weight:normal'>INPLEN</b> is
initialised to 0, and reset to 0 by the relevant routine before it returns.</span><span
lang=EN-GB style='font-family:Arial'><o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>For example, initialise MIRACL to use <i
style='mso-bidi-font-style:normal'>big</i>s of 400 bytes</span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style="mso-spacerun:yes">†</span></span><span lang=EN-GB style='font-family:
Arial;color:blue'><span style="mso-spacerun:yes">†</span><span
style='mso-tab-count:1'>†††††††† </span></span><span lang=EN-GB
style='font-family:Courier'>miracl *mip=mirsys(400,256);<span
style="mso-spacerun:yes">†† </span><o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Internal calculations are very efficient
using this base.</span><span lang=EN-GB style='font-family:Courier'><o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Input an ASCII string as a base 256 number</span><span
lang=EN-GB style='font-family:Courier'>. T</span><span lang=EN-GB>his will be
zero-terminated, so no need for <b style='mso-bidi-font-weight:normal'>INPLEN.<o:p></o:p></b></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style="mso-spacerun:yes">†</span><span style='mso-tab-count:1'>††† </span>innum(x,stdin);<span
style="mso-spacerun:yes">† </span><o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Now it is required to input exactly 1024
random bits</span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style="mso-spacerun:yes">†</span><span style='mso-tab-count:1'>††† </span>mip-&gt;INPLEN=128;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style="mso-spacerun:yes">†</span><span style='mso-tab-count:1'>††† </span>innum(y,stdin);<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>But we want to see output in HEX</span><span
lang=EN-GB style='font-family:Courier'><o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style="mso-spacerun:yes">†</span><o:p></o:p></span></p><p class=MsoNormal style='text-indent:36.0pt'><span lang=EN-GB
style='font-family:Courier'>mip-&gt;IOBASE=16;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style="mso-spacerun:yes">†</span><span style='mso-tab-count:1'>††† </span>cotnum(w,stdout);<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoIndexHeading><span lang=EN-GB>Now in base64</span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='text-indent:36.0pt'><span lang=EN-GB
style='font-family:Courier'>mip-&gt;IOBASE=64;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style="mso-spacerun:yes">†</span><span style='mso-tab-count:1'>††† </span>cotnum(w,stdout);<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Rational numbers may be input using either
a radix point (e.g 0.3333) or as a fraction (e.g. 1/3). Either form can be used
on output by setting the instance variable <b style='mso-bidi-font-weight:normal'>RPOINT</b>=ON
or =OFF. <br clear=all style='page-break-before:always'></span><a name="_toc940"></a><b style='mso-bidi-font-weight:normal'><span
lang=EN-GB style='font-size:14.0pt;mso-bidi-font-size:10.0pt;font-family:Arial;
mso-font-kerning:.5pt'>Internal Representation</span></b></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Conventional computer arithmetic facilities
as provided by most computer language compilers usually provide one or two
floating-point data types (e.g. single and double precision) to represent all
the real numbers, together with one or more integer types to represent whole
numbers. These built-in data-types are closely related to the underlying
computer architecture, which is sensibly designed to work quickly with large
amounts of small numbers, rather than slowly with small amounts of large
numbers (given a fixed memory allocation). Floating-point allows a relatively
small binary number (e.g. 32 bits) to represent real numbers to an adequate
precision (e.g. 7 decimal places) over a large dynamic range. Integer types
allow small whole numbers to be represented directly by their binary
equivalent, or in 2's complement form if negative. Nevertheless this
conventional approach to computer arithmetic has several disadvantages. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:14.15pt;text-indent:-14.15pt;mso-list:
l3 level1 lfo4;tab-stops:14.15pt'><&#33;[if &#33;supportLists]><span lang=EN-GB
style='font-family:Symbol;mso-fareast-font-family:Symbol;mso-bidi-font-family:
Symbol'><span style='mso-list:Ignore'>∑<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>Floating-point and Integer
data-types are incompatible. Note that the set of integers, although infinite,
is a subset of the rationals (i.e. fractions), which is in turn a subset of the
reals. Thus every integer has an equivalent floating-point representation. Unfortunately
these two representations will in general be different. For example a small
positive whole number will be represented by its binary equivalent as an
integer, and as separated mantissa and exponent as a floating-point. This
implies the need for conversion routines, to convert from one form to the
other.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:14.15pt;text-indent:-14.15pt;mso-list:
l3 level1 lfo4;tab-stops:14.15pt'><&#33;[if &#33;supportLists]><span lang=EN-GB
style='font-family:Symbol;mso-fareast-font-family:Symbol;mso-bidi-font-family:
Symbol'><span style='mso-list:Ignore'>∑<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>Most rational numbers cannot be
expressed exactly (e.g. 1/3). Indeed the floating-point system can only express
exactly those rationals whose denominators are multiples of the factors of the
underlying radix. For example our familiar decimal system can only represent
exactly those rational numbers whose denominators are multiples of 2 and 5;
1/20 is 0.05 exactly, 1/21 is 0.0476190476190..... </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:14.15pt;text-indent:-14.15pt;mso-list:
l3 level1 lfo4;tab-stops:14.15pt'><&#33;[if &#33;supportLists]><span lang=EN-GB
style='font-family:Symbol;mso-fareast-font-family:Symbol;mso-bidi-font-family:
Symbol'><span style='mso-list:Ignore'>∑<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>Rounding in floating-point is
base-dependant and a source of obscure errors. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:14.15pt;text-indent:-14.15pt;mso-list:
l3 level1 lfo4;tab-stops:14.15pt'><&#33;[if &#33;supportLists]><span lang=EN-GB
style='font-family:Symbol;mso-fareast-font-family:Symbol;mso-bidi-font-family:
Symbol'><span style='mso-list:Ignore'>∑<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>The fact that the size of
integer and floating-point data types are dictated by the computer
architecture, defeats the efforts of language designers to keep their languages
truly portable. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:14.15pt;text-indent:-14.15pt;mso-list:
l3 level1 lfo4;tab-stops:14.15pt'><&#33;[if &#33;supportLists]><span lang=EN-GB
style='font-family:Symbol;mso-fareast-font-family:Symbol;mso-bidi-font-family:
Symbol'><span style='mso-list:Ignore'>∑<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>Numbers can only be represented
to a fixed machine-dependent precision. In many applications this can be a
crippling disadvantage, for example in the new and growing field of Public-Key
cryptography. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:14.15pt;text-indent:-14.15pt;mso-list:
l3 level1 lfo4;tab-stops:14.15pt'><&#33;[if &#33;supportLists]><span lang=EN-GB
style='font-family:Symbol;mso-fareast-font-family:Symbol;mso-bidi-font-family:
Symbol'><span style='mso-list:Ignore'>∑<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>Base-dependent phenomena cannot
easily be studied. For example it would be difficult to access a particular
digit of a decimal number, as represented by a traditional integer data-type.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Herein is described a set of standard C
routines which manipulate multi-precision rational numbers directly, with
multi-precision integers as a compatible subset. Approximate real arithmetic
can also be performed. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>The two new data-types are called <i
style='mso-bidi-font-style:normal'>big</i> and <i style='mso-bidi-font-style:
normal'>flash</i>. The former is used to store multi-precision integers, and
the latter stores multi-precision fractions as numerator and denominator in
ëfloating-slashí form. Both take the form of a fixed length array of digits,
with sign and length information encoded in a separate 32-bit integer. The data
type defined as <b style='mso-bidi-font-weight:normal'>mr_small</b> used to
store the number digits will be one of the built in types, for example </span><span
lang=EN-GB style='font-family:"Courier New"'>int</span><span lang=EN-GB>, </span><span
lang=EN-GB style='font-family:"Courier New"'>long</span><span lang=EN-GB> or even
</span><span lang=EN-GB style='font-family:"Courier New"'>double</span><span
lang=EN-GB>. This is referred to as the ìunderlying typeî. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Both new types can be introduced into the
syntax of the C language by the C statements </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB style='font-family:
"Courier New"'>struct bigtype<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New"'>{<o:p></o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB style='font-family:
"Courier New"'><span style='mso-tab-count:1'>†††† </span>mr_unsign32 L;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New"'><span
style='mso-tab-count:1'>†††† </span>mr_small *d;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New"'>};<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New"'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New"'>typedef
struct bigtype</span><span lang=EN-GB style='font-family:Courier'> *big;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'>typedef struct
bigtype *flash;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Now <i style='mso-bidi-font-style:normal'>big</i>
and <i style='mso-bidi-font-style:normal'>flash</i> variables can be declared
just like any built-in data type, e.g. </span></p><p class=MsoIndexHeading><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:1'>†††† </span>big x,y[10],z[10][10];<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Observe that a <i style='mso-bidi-font-style:
normal'>big</i> is just a pointer. The memory needed for each <i
style='mso-bidi-font-style:normal'>big</i> or <i style='mso-bidi-font-style:
normal'>flash</i> number instance is taken from the heap (or from the stack).
Therefore each <i style='mso-bidi-font-style:normal'>big</i> or <i
style='mso-bidi-font-style:normal'>flash</i> number must be initialised before
use, and the required memory assigned to it.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Note that the user of these data-types is
not concerned with this internal representation; the library routines allow <i
style='mso-bidi-font-style:normal'>big</i> and <i style='mso-bidi-font-style:
normal'>flash</i> numbers to be manipulated directly. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>The structure of <i style='mso-bidi-font-style:
normal'>big</i> and <i style='mso-bidi-font-style:normal'>flash</i> numbers is
illustrated in figure (4.1).</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>These structures combine ease of use with
representational efficiency. A denominator of length zero (<i style='mso-bidi-font-style:
normal'>d=0</i>), implies an actual denominator of one; and similarly a numerator
of length zero (<i style='mso-bidi-font-style:normal'>n=0</i>) implies a
numerator of one. Zero itself is uniquely defined as the number whose first
element is zero (i.e.<i style='mso-bidi-font-style:normal'> n=d=0</i>). <br
clear=all style='page-break-before:always'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><&#33;--[if gte vml 1]><v:shapetype id="_x0000_t202"
coordsize="21600,21600" o:spt="202" path="m0,0l0,21600,21600,21600,21600,0xe"><v:stroke joinstyle="miter"/><v:path gradientshapeok="t" o:connecttype="rect"/></v:shapetype><v:shape id="_x0000_s2055" type="#_x0000_t202" style='position:absolute;
margin-left:231.55pt;margin-top:30pt;width:32.3pt;height:26.6pt;z-index:251597824;
mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt' strokeweight="1pt"><v:fill color2="black"/><v:textbox inset="1pt,1pt,1pt,1pt"/></v:shape><v:shape id="_x0000_s2052" type="#_x0000_t202" style='position:absolute;
margin-left:49.15pt;margin-top:29.75pt;width:29.45pt;height:26.6pt;z-index:251594752;
mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt' strokeweight="1pt"><v:fill color2="black"/><v:textbox inset="1pt,1pt,1pt,1pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal><span lang=EN-GB>LSW</span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:shape id="_x0000_s2065" type="#_x0000_t202" style='position:absolute;
margin-left:49.15pt;margin-top:7.7pt;width:29.45pt;height:20.85pt;z-index:251608064;
mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt' strokecolor="white"
strokeweight="1pt"><v:fill color2="black"/><v:stroke color2="black"/><v:textbox inset="1pt,1pt,1pt,1pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB
style='font-size:8.0pt;mso-bidi-font-size:10.0pt'>x-&gt;d[0]<o:p></o:p></span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:shape id="_x0000_s2054" type="#_x0000_t202" style='position:absolute;
margin-left:188.8pt;margin-top:30pt;width:32.3pt;height:26.6pt;z-index:251596800;
mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt' strokeweight="1pt"><v:fill color2="black"/><v:textbox inset="1pt,1pt,1pt,1pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal><span lang=EN-GB>MSW</span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:shape id="_x0000_s2067" type="#_x0000_t202" style='position:absolute;
margin-left:183.1pt;margin-top:7.65pt;width:44.1pt;height:20.85pt;z-index:251610112;
mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt' strokecolor="white"
strokeweight="1pt"><v:fill color2="black"/><v:stroke color2="black"/><v:textbox inset="1pt,1pt,1pt,1pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB
style='font-size:8.0pt;mso-bidi-font-size:10.0pt'>x-&gt;d[n-1]<o:p></o:p></span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:shape id="_x0000_s2056" type="#_x0000_t202" style='position:absolute;
margin-left:49.15pt;margin-top:100.15pt;width:29.45pt;height:26.6pt;z-index:251598848;
mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt' strokeweight="1pt"><v:fill color2="black"/><v:textbox inset="1pt,1pt,1pt,1pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal><span lang=EN-GB>LSW</span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:shape id="_x0000_s2070" type="#_x0000_t202" style='position:absolute;
margin-left:49.15pt;margin-top:77.65pt;width:29.45pt;height:20.85pt;z-index:251613184;
mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt' strokecolor="white"
strokeweight="1pt"><v:fill color2="black"/><v:stroke color2="black"/><v:textbox inset="1pt,1pt,1pt,1pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal align=center style='text-align:center'><span lang=EN-IE
style='font-size:8.0pt;mso-bidi-font-size:10.0pt;mso-ansi-language:EN-IE'>x-&gt;d[0]<o:p></o:p></span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:shape id="_x0000_s2077" type="#_x0000_t202" style='position:absolute;
margin-left:126.1pt;margin-top:30pt;width:52.25pt;height:26.6pt;z-index:251620352;
mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt' strokecolor="white"
strokeweight="1pt"><v:fill color2="black"/><v:stroke color2="black"/><v:textbox inset="1pt,1pt,1pt,1pt"/></v:shape><v:shape id="_x0000_s2058" type="#_x0000_t202" style='position:absolute;
margin-left:146.05pt;margin-top:100.15pt;width:32.3pt;height:26.6pt;z-index:251600896;
mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt' strokeweight="1pt"><v:fill color2="black"/><v:textbox inset="1pt,1pt,1pt,1pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal><span lang=EN-GB>MSW</span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:shape id="_x0000_s2072" type="#_x0000_t202" style='position:absolute;
margin-left:139.9pt;margin-top:77.65pt;width:35.6pt;height:20.85pt;z-index:251615232;
mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt' strokecolor="white"
strokeweight="1pt"><v:fill color2="black"/><v:stroke color2="black"/><v:textbox inset="1pt,1pt,1pt,1pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal align=center style='text-align:center'><span lang=EN-IE
style='font-size:8.0pt;mso-bidi-font-size:10.0pt;mso-ansi-language:EN-IE'>x-&gt;d[n-1]<o:p></o:p></span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:shape id="_x0000_s2079" type="#_x0000_t202" style='position:absolute;
margin-left:120.4pt;margin-top:100.15pt;width:20.9pt;height:26.6pt;z-index:251622400;
mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt' strokecolor="white"
strokeweight="1pt"><v:fill color2="black"/><v:stroke color2="black"/><v:textbox inset="1pt,1pt,1pt,1pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal><span lang=EN-GB>.....</span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:line id="_x0000_s2082" style='position:absolute;z-index:251625472'
from="46.8pt,141.4pt" to="82.8pt,141.4pt" strokeweight=".35mm"><v:stroke startarrow="block" joinstyle="miter"/></v:line><v:shape id="_x0000_s2083" type="#_x0000_t202" style='position:absolute;
margin-left:83.35pt;margin-top:133.75pt;width:60.8pt;height:23.75pt;z-index:251626496;
mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt' strokecolor="white"
strokeweight="1pt"><v:fill color2="black"/><v:stroke color2="black"/><v:textbox inset="1pt,1pt,1pt,1pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB>numerator</span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:line id="_x0000_s2084" style='position:absolute;flip:x;z-index:251627520'
from="140.4pt,141.4pt" to="176.4pt,141.4pt" strokeweight=".35mm"><v:stroke startarrow="block" joinstyle="miter"/></v:line><v:shape id="_x0000_s2085" type="#_x0000_t202" style='position:absolute;
margin-left:177.4pt;margin-top:130.85pt;width:12.35pt;height:23.75pt;
z-index:251628544;mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt'
strokecolor="white" strokeweight="1pt"><v:fill color2="black"/><v:stroke color2="black"/><v:textbox inset="1pt,1pt,1pt,1pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal><span lang=EN-GB style='font-size:16.0pt;mso-bidi-font-size:
10.0pt'>/<o:p></o:p></span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:line id="_x0000_s2086" style='position:absolute;z-index:251629568'
from="192.15pt,139.65pt" to="226.4pt,139.7pt" strokecolor="white"
strokeweight=".35mm"><v:stroke startarrow="block" color2="black" joinstyle="miter"/></v:line><v:line id="_x0000_s2087" style='position:absolute;z-index:251630592'
from="192.15pt,139.65pt" to="223.55pt,139.7pt" strokecolor="white"
strokeweight=".35mm"><v:stroke startarrow="block" color2="black" joinstyle="miter"/></v:line><v:shape id="_x0000_s2088" type="#_x0000_t202" style='position:absolute;
margin-left:223pt;margin-top:133.7pt;width:69.35pt;height:18.05pt;z-index:251631616;
mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt' strokecolor="white"
strokeweight="1pt"><v:fill color2="black"/><v:stroke color2="black"/><v:textbox inset="1pt,1pt,1pt,1pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal><span lang=EN-GB>denominator</span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:line id="_x0000_s2089" style='position:absolute;z-index:251632640'
from="190.8pt,141.4pt" to="219.6pt,141.4pt" strokeweight=".35mm"><v:stroke startarrow="block" joinstyle="miter"/></v:line><v:line id="_x0000_s2090" style='position:absolute;flip:x;z-index:251633664'
from="291.6pt,141.4pt" to="328.7pt,141.45pt" strokeweight=".35mm"><v:stroke startarrow="block" joinstyle="miter"/></v:line><v:shape id="_x0000_s2059" type="#_x0000_t202" style='position:absolute;
margin-left:191.65pt;margin-top:100.15pt;width:29.45pt;height:26.6pt;
z-index:251601920;mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt'
strokeweight="1pt"><v:fill color2="black"/><v:textbox inset="1pt,1pt,1pt,1pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal><span lang=EN-GB>LSW</span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:shape id="_x0000_s2060" type="#_x0000_t202" style='position:absolute;
margin-left:231.55pt;margin-top:100.15pt;width:29.45pt;height:26.6pt;
z-index:251602944;mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt'
strokeweight="1pt"><v:fill color2="black"/><v:textbox inset="1pt,1pt,1pt,1pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:shape id="_x0000_s2061" type="#_x0000_t202" style='position:absolute;
margin-left:297.1pt;margin-top:100.15pt;width:32.3pt;height:26.6pt;z-index:251603968;
mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt' strokeweight="1pt"><v:fill color2="black"/><v:textbox inset="1pt,1pt,1pt,1pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal><span lang=EN-GB>MSW</span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:shape id="_x0000_s2063" type="#_x0000_t202" style='position:absolute;
margin-left:359.8pt;margin-top:100.15pt;width:32.3pt;height:26.6pt;z-index:251606016;
mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt' strokeweight="1pt"><v:fill color2="black"/><v:textbox inset="1pt,1pt,1pt,1pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB>0</span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:shape id="_x0000_s2073" type="#_x0000_t202" style='position:absolute;
margin-left:183.1pt;margin-top:77.65pt;width:40.85pt;height:20.85pt;z-index:251616256;
mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt' strokecolor="white"
strokeweight="1pt"><v:fill color2="black"/><v:stroke color2="black"/><v:textbox inset="1pt,1pt,1pt,1pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal align=center style='text-align:center'><span lang=EN-IE
style='font-size:8.0pt;mso-bidi-font-size:10.0pt;mso-ansi-language:EN-IE'>x-&gt;d[n]<o:p></o:p></span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:shape id="_x0000_s2074" type="#_x0000_t202" style='position:absolute;
margin-left:225.85pt;margin-top:77.65pt;width:40.85pt;height:20.85pt;
z-index:251617280;mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt'
strokecolor="white" strokeweight="1pt"><v:fill color2="black"/><v:stroke color2="black"/><v:textbox inset="1pt,1pt,1pt,1pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal align=center style='text-align:center'><span lang=EN-IE
style='font-size:8.0pt;mso-bidi-font-size:10.0pt;mso-ansi-language:EN-IE'>x-&gt;d[n+1]<o:p></o:p></span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:shape id="_x0000_s2075" type="#_x0000_t202" style='position:absolute;
margin-left:283.9pt;margin-top:77.7pt;width:48.35pt;height:20.85pt;z-index:251618304;
mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt' strokecolor="white"
strokeweight="1pt"><v:fill color2="black"/><v:stroke color2="black"/><v:textbox inset="1pt,1pt,1pt,1pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal align=center style='text-align:center'><span lang=EN-IE
style='font-size:8.0pt;mso-bidi-font-size:10.0pt;mso-ansi-language:EN-IE'>x-&gt;d[n+d-1]<o:p></o:p></span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:shape id="_x0000_s2076" type="#_x0000_t202" style='position:absolute;
margin-left:348.7pt;margin-top:77.7pt;width:46.25pt;height:20.85pt;z-index:251619328;
mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt' strokecolor="white"
strokeweight="1pt"><v:fill color2="black"/><v:stroke color2="black"/><v:textbox inset="1pt,1pt,1pt,1pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB
style='font-size:8.0pt;mso-bidi-font-size:10.0pt'>x-&gt;d[max-1]<o:p></o:p></span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:shape id="_x0000_s2080" type="#_x0000_t202" style='position:absolute;
margin-left:265.75pt;margin-top:100.15pt;width:29.45pt;height:26.6pt;
z-index:251623424;mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt'
strokecolor="white" strokeweight="1pt"><v:fill color2="black"/><v:stroke color2="black"/><v:textbox inset="1pt,1pt,1pt,1pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal><span lang=EN-GB>.......</span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:shape id="_x0000_s2081" type="#_x0000_t202" style='position:absolute;
margin-left:334.15pt;margin-top:100.15pt;width:20.9pt;height:26.6pt;z-index:251624448;
mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt' strokecolor="white"
strokeweight="1pt"><v:fill color2="black"/><v:stroke color2="black"/><v:textbox inset="1pt,1pt,1pt,1pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal><span lang=EN-GB>.....</span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:shape id="_x0000_s2062" type="#_x0000_t202" style='position:absolute;
margin-left:359.8pt;margin-top:30pt;width:32.3pt;height:26.6pt;z-index:251604992;
mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt' strokeweight="1pt"><v:fill color2="black"/><v:textbox inset="1pt,1pt,1pt,1pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB>0</span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:shape id="_x0000_s2068" type="#_x0000_t202" style='position:absolute;
margin-left:341.5pt;margin-top:7.65pt;width:50.6pt;height:20.85pt;z-index:251611136;
mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt' strokecolor="white"
strokeweight="1pt"><v:fill color2="black"/><v:stroke color2="black"/><v:textbox inset="1pt,1pt,1pt,1pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB
style='font-size:8.0pt;mso-bidi-font-size:10.0pt'>x-&gt;d[max-1]<o:p></o:p></span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:shape id="_x0000_s2078" type="#_x0000_t202" style='position:absolute;
margin-left:277.15pt;margin-top:30pt;width:69.35pt;height:26.6pt;z-index:251621376;
mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt' strokecolor="white"
strokeweight="1pt"><v:fill color2="black"/><v:stroke color2="black"/><v:textbox inset="1pt,1pt,1pt,1pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal><span lang=EN-GB>.....................</span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:shape id="_x0000_s2057" type="#_x0000_t202" style='position:absolute;
margin-left:86.2pt;margin-top:100.15pt;width:29.45pt;height:26.6pt;z-index:251599872;
mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt' strokeweight="1pt"><v:fill color2="black"/><v:textbox inset="1pt,1pt,1pt,1pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:shape id="_x0000_s2071" type="#_x0000_t202" style='position:absolute;
margin-left:86.2pt;margin-top:77.7pt;width:29.45pt;height:20.85pt;z-index:251614208;
mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt' strokecolor="white"
strokeweight="1pt"><v:fill color2="black"/><v:stroke color2="black"/><v:textbox inset="1pt,1pt,1pt,1pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal align=center style='text-align:center'><span lang=EN-IE
style='font-size:8.0pt;mso-bidi-font-size:10.0pt;mso-ansi-language:EN-IE'>x-d[1]<o:p></o:p></span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:shape id="_x0000_s2051" type="#_x0000_t202" style='position:absolute;
margin-left:9.25pt;margin-top:99.9pt;width:29.45pt;height:26.6pt;z-index:251593728;
mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt' strokeweight="1pt"><v:fill color2="black"/><v:textbox inset="1pt,1pt,1pt,1pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal><span lang=EN-GB>s d n</span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:shape id="_x0000_s2069" type="#_x0000_t202" style='position:absolute;
margin-left:9.25pt;margin-top:77.65pt;width:29.45pt;height:20.85pt;z-index:251612160;
mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt' strokecolor="white"
strokeweight="1pt"><v:fill color2="black"/><v:stroke color2="black"/><v:textbox inset="1pt,1pt,1pt,1pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal align=center style='text-align:center'><span lang=EN-IE
style='font-size:8.0pt;mso-bidi-font-size:10.0pt;mso-ansi-language:EN-IE'>x-&gt;L<o:p></o:p></span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:shape id="_x0000_s2053" type="#_x0000_t202" style='position:absolute;
margin-left:86.2pt;margin-top:29.75pt;width:29.45pt;height:26.6pt;z-index:251595776;
mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt' strokeweight="1pt"><v:fill color2="black"/><v:textbox inset="1pt,1pt,1pt,1pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:shape id="_x0000_s2066" type="#_x0000_t202" style='position:absolute;
margin-left:86.2pt;margin-top:7.7pt;width:29.45pt;height:20.9pt;z-index:251609088;
mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt' strokecolor="white"
strokeweight="1pt"><v:fill color2="black"/><v:stroke color2="black"/><v:textbox inset="1pt,1pt,1pt,1pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB
style='font-size:8.0pt;mso-bidi-font-size:10.0pt'>x-&gt;d[1]<o:p></o:p></span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:shape id="_x0000_s2050" type="#_x0000_t202" style='position:absolute;
margin-left:9.25pt;margin-top:29.7pt;width:29.45pt;height:26.6pt;z-index:251592704;
mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt' strokeweight="1pt"><v:fill color2="black"/><v:textbox inset="1pt,1pt,1pt,1pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal><span lang=EN-GB>s 0 n</span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:shape id="_x0000_s2064" type="#_x0000_t202" style='position:absolute;
margin-left:9.25pt;margin-top:7.7pt;width:29.45pt;height:20.85pt;z-index:251607040;
mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt' strokecolor="white"
strokeweight="1pt"><v:fill color2="black"/><v:stroke color2="black"/><v:textbox inset="1pt,1pt,1pt,1pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB
style='font-size:8.0pt;mso-bidi-font-size:10.0pt'>x-&gt;L<o:p></o:p></span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><&#33;[endif]--><&#33;[if &#33;vml]><span style='mso-ignore:vglayout'>
{|  cellpadding=0 cellspacing=0 align=left 
|  width=6 height=3 | 
|  width=33 | 
|  width=7 | 
|  width=33 | 
|  width=4 | 
|  width=33 | 
|  width=1 | 
|  width=6 | 
|  width=55 | 
|  width=2 | 
|  width=47 | 
|  width=2 | 
|  width=35 | 
|  width=10 | 
|  width=59 | 
|  width=59 | 
|  width=3 | 
|- 
|  height=22 | 
|  rowspan=2 align=left valign=top | <img width=33 height=51
src="manual_files/image001.gif" v:shapes="_x0000_s2050 _x0000_s2064">
| 
|  rowspan=2 align=left valign=top | <img width=33 height=51
src="manual_files/image002.gif" v:shapes="_x0000_s2052 _x0000_s2065">
| 
|  rowspan=2 align=left valign=top | <img width=33 height=51
src="manual_files/image003.gif" v:shapes="_x0000_s2053 _x0000_s2066">
|  colspan=4 | 
|  rowspan=3 align=left valign=top | <img width=47 height=52
src="manual_files/image004.gif" v:shapes="_x0000_s2054 _x0000_s2067">
|  colspan=3 | 
|  colspan=2 rowspan=3 align=left valign=top | <img width=118 height=52
src="manual_files/image005.gif" v:shapes="_x0000_s2062 _x0000_s2068 _x0000_s2078">
|- 
|  height=29 | 
| 
| 
|  colspan=2 | 
|  rowspan=2 width=55 height=30 align=left valign=top bgcolor=white  style='border:1.0pt solid white;vertical-align:top;background:white' | <&#33;[endif]><&#33;[if &#33;mso]><span
style='position:absolute;z-index:28'>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div v:shape="_x0000_s2077" style='padding:2.0pt 2.0pt 2.0pt 2.0pt;
text-align:left' class=shape><p class=MsoNormal><span lang=EN-GB>...............</span></p></div><&#33;[if &#33;mso]>
|}</span><&#33;[endif]><&#33;[if &#33;mso & &#33;vml]>&nbsp;<&#33;[endif]><&#33;[if &#33;vml]>
| 
| 
|  rowspan=2 width=35 height=30 align=left valign=top bgcolor=white  style='border:1.0pt solid black;vertical-align:top;background:white' | <&#33;[endif]><&#33;[if &#33;mso]><span
style='position:absolute;z-index:6'>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div v:shape="_x0000_s2055" style='padding:2.0pt 2.0pt 2.0pt 2.0pt;
text-align:left' class=shape><p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB>0</span></p></div><&#33;[if &#33;mso]>
|}</span><&#33;[endif]><&#33;[if &#33;mso & &#33;vml]>&nbsp;<&#33;[endif]><&#33;[if &#33;vml]>
|- 
|  height=1 | 
|- 
|  height=18 | 
|- 
|  height=52 | 
|  align=left valign=top | <img width=33 height=52
src="manual_files/image006.gif" v:shapes="_x0000_s2051 _x0000_s2069">
| 
|  align=left valign=top | <img width=33 height=52
src="manual_files/image007.gif" v:shapes="_x0000_s2056 _x0000_s2070">
| 
|  align=left valign=top | <img width=33 height=52
src="manual_files/image008.gif" v:shapes="_x0000_s2057 _x0000_s2071">
| 
|  colspan=2 align=left valign=top | <img width=61 height=52
src="manual_files/image009.gif" v:shapes="_x0000_s2058 _x0000_s2072 _x0000_s2079">
| 
|  colspan=7 align=left valign=top | <img width=215 height=52
src="manual_files/image010.gif" v:shapes="_x0000_s2059 _x0000_s2060 _x0000_s2061 _x0000_s2063 _x0000_s2073 _x0000_s2074 _x0000_s2075 _x0000_s2076 _x0000_s2080 _x0000_s2081">
|- 
|  height=1 | 
|- 
|  height=30 | 
| 
|  colspan=13 align=left valign=top | <img width=294 height=30
src="manual_files/image011.gif" v:shapes="_x0000_s2082 _x0000_s2083 _x0000_s2084 _x0000_s2085 _x0000_s2086 _x0000_s2087 _x0000_s2088 _x0000_s2089 _x0000_s2090">
|}</span><&#33;[endif]><span style='font-size:10.0pt;mso-ansi-language:#0400'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span style='font-size:10.0pt;mso-ansi-language:#0400'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoIndexHeading><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span style='font-size:10.0pt;mso-ansi-language:#0400'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span style='font-size:10.0pt;mso-ansi-language:#0400'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span style='font-size:10.0pt;mso-ansi-language:#0400'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span style='font-size:10.0pt;mso-ansi-language:#0400'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><br style='mso-ignore:vglayout' clear=ALL><p class=MsoNormal style='margin-left:49.65pt;text-indent:-49.65pt'><span
lang=EN-GB style='font-size:10.0pt'>Figure 4.1:<span style='mso-tab-count:1'>† </span>Structure
of <i style='mso-bidi-font-style:normal'>big</i> and <i style='mso-bidi-font-style:
normal'>flash</i> data-types where s is the sign of the number, <i
style='mso-bidi-font-style:normal'>n</i> and <i style='mso-bidi-font-style:
normal'>d</i> are the lengths of the numerator and denominator respectively,
and LSW and MSW mean ëLeast significant word and ëMost significant wordí
respectively<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Note that the slash in the <i
style='mso-bidi-font-style:normal'>flash</i> data-type is not in a fixed position,
and may ëfloatí depending on the relative size of numerator and denominator. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>A <i style='mso-bidi-font-style:normal'>flash</i>
number is manipulated by splitting it up into separate <i style='mso-bidi-font-style:
normal'>big</i> numerator and denominator components. A <i style='mso-bidi-font-style:
normal'>big</i> number is manipulated by extracting and operating on each of
its component integer elements. To avoid possible overflow, the numbers in each
element are normally limited to a somewhat smaller range than that of the full
word-length, e.g. 0 to 32767 (= 2<sup>15</sup> - 1) on a 16-bit computer.
However with careful programming a full-width base of 2<sup>16</sup> can also
be used, as the C language does not report a run-time error on integer overflow
[Scott89b]. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>When the system is initialised the user
specifies the fixed number of words (or bytes) to be assigned to all <i
style='mso-bidi-font-style:normal'>big</i> or <i style='mso-bidi-font-style:
normal'>flash</i> variables, and the number base to be used. Any base can be
used, up to a maximum which is dependant on the wordlength of the computer
used. If requested to use a small base <i style='mso-bidi-font-style:normal'>b</i>,
the system will, for optimal efficiency, actually use base <i style='mso-bidi-font-style:
normal'>b<sup>n</sup></i>, where <i style='mso-bidi-font-style:normal'>n</i> is
the largest integer such that <i style='mso-bidi-font-style:normal'>b<sup>n</sup></i>
fits in a single computer word. Programs will in general execute fastest if a
full-width base is used (achieved by specifying a base of 0 in the initial call
to <b style='mso-bidi-font-weight:normal'>mirsys</b>). Note that this mode may
be supported by extensive in-line assembly language for certain popular
compiler/processor combinations, in certain time-critical routines, for example
if using Borland/Turbo C with an 80x86 processor. Examine, for example, the
source code in module <i style='mso-bidi-font-style:normal'>mrarth1.c</i>. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>The encoding of the sign and numerator and
denominator size information into a single word is possible, as the C language
has standard constructs for bit manipulation. </span></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span lang=EN-GB
style='font-size:14.0pt;mso-bidi-font-size:10.0pt;font-family:Arial;mso-font-kerning:
.5pt'><o:p>&nbsp;</o:p></span></b></p><h1 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level1 lfo1;tab-stops:
0cm'><a name="_toc1012"></a><&#33;[if &#33;supportLists]><span lang=EN-GB
style='mso-fareast-font-family:Arial;mso-bidi-font-family:Arial'><span
style='mso-list:Ignore'>5.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>Implementation</span></h1><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>No great originality is claimed for the
routines used to implement arithmetic on the <i style='mso-bidi-font-style:
normal'>big</i> data-type. The algorithms used are faithful renditions of those
described by Knuth [Knuth81]. However some effort was made to optimise the
implementation for speed. At the heart of the time-consuming multiply and
divide routines there is, typically, a need to multiply together a digit from
each operand, add in a ëcarryí from a previous operation, and then separate the
total into a digit of the result, and a `carry' for the next operation. To
illustrate consider this base 10 multiplication: </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='tab-stops:right 7.0cm'><b style='mso-bidi-font-weight:
normal'><span lang=EN-GB><span style='mso-tab-count:1'>††††††††††††††††††††††††††††††††††††††††††††† </span>8723536221<o:p></o:p></span></b></p><p class=MsoNormal style='tab-stops:right 7.0cm'><b style='mso-bidi-font-weight:
normal'><span lang=EN-GB><span style='mso-tab-count:1'>††††††††††††††††††††††††††††††††††††††††††† </span><u><span
style="mso-spacerun:yes">††††††††††††††† </span></u></span></b><b
style='mso-bidi-font-weight:normal'><u><span lang=EN-GB style='font-family:
Symbol'>¥</span><span lang=EN-GB> 9<o:p></o:p></span></u></b></p><p class=MsoNormal style='tab-stops:right 7.0cm'><b style='mso-bidi-font-weight:
normal'><span lang=EN-GB><span style='mso-tab-count:1'>††††††††††††††††††††††††††††††††††††††††††† </span>78511825989<o:p></o:p></span></b></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>To correctly process the column with the 5
in it, we multiply 5 </span><span lang=EN-GB style='font-family:Symbol'>¥</span><span
lang=EN-GB> 9 = 45, add in the ëcarryí from the previous column (a 3), to give
48, keep the 8 as the result for this column, and carry the 4 to the next
column. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>This basic primitive operation is
essentially the calculation of the quotient <i style='mso-bidi-font-style:normal'>(a.b+c)/m</i>
and its remainder. For the example above <i style='mso-bidi-font-style:normal'>a</i>=5,
<i style='mso-bidi-font-style:normal'>b</i>=9, <i style='mso-bidi-font-style:
normal'>c</i>=3 and <i style='mso-bidi-font-style:normal'>m</i>=10. This
operation has surprisingly universal application, and since it lies at the
innermost loop of the arithmetic algorithms, its efficient implementation is
essential. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>There are three main difficulties with a
high-level language general base implementation of this MAD (Multiply, Add and
Divide) operation. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:14.15pt;text-indent:-14.15pt;mso-list:
l3 level1 lfo4;tab-stops:14.15pt'><&#33;[if &#33;supportLists]><span lang=EN-GB
style='font-family:Symbol;mso-fareast-font-family:Symbol;mso-bidi-font-family:
Symbol'><span style='mso-list:Ignore'>∑<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>It will be slow.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:14.15pt;text-indent:-14.15pt;mso-list:
l3 level1 lfo4;tab-stops:14.15pt'><&#33;[if &#33;supportLists]><span lang=EN-GB
style='font-family:Symbol;mso-fareast-font-family:Symbol;mso-bidi-font-family:
Symbol'><span style='mso-list:Ignore'>∑<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>Quotient and remainder are not
available simultaneously as a result of the divide operation. Therefore the
calculation must be essentially done twice, once to get the quotient, and once
for the remainder. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:14.15pt;text-indent:-14.15pt;mso-list:
l3 level1 lfo4;tab-stops:14.15pt'><&#33;[if &#33;supportLists]><span lang=EN-GB
style='font-family:Symbol;mso-fareast-font-family:Symbol;mso-bidi-font-family:
Symbol'><span style='mso-list:Ignore'>∑<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>Although the operation results
in two single digit quantities, the intermediate product <i style='mso-bidi-font-style:
normal'>(a.b+c)</i> may be double-length. Indeed such a Multiply-Add and Divide
routine can be used on all occasions when a double-length quantity would be
required by the basic arithmetic algorithms. Note that the C language is
blessed with a ëlongí integer data-type which may in fact be capable of
temporarily storing this product. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>For these reasons it is best to implement
this critical operation in the assembly language of the computer used, although
a portable C version is possible. At machine-code level a transitory double-length
result can often be dealt with, even if the C long data-type is not itself
double-length (as is the case for most C compilers as implemented on 32-bit
computers, for which <i style='mso-bidi-font-style:normal'>ints</i> and <i
style='mso-bidi-font-style:normal'>longs</i> are both 32-bit quantities). For
further details see the documentation in the file <i style='mso-bidi-font-style:
normal'>mrmuldv.any</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>A criticism of the MIRACL system might be
its use of fixed length arrays for its <i style='mso-bidi-font-style:normal'>big</i>
and <i style='mso-bidi-font-style:normal'>flash</i> data types. This was done
to avoid the difficult and time-consuming problems of memory allocation and
garbage collection, which would be needed by a variable-length representation.
However it does mean that when doing a calculation on <i style='mso-bidi-font-style:
normal'>big</i> integers that the results of all intermediate calculations must
be less than or equal to the fixed size initially specified to <b
style='mso-bidi-font-weight:normal'>mirsys</b>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>In practise most numbers in a stable
integer calculation are of more or less the same size, except when two are
multiplied together in which case a double-length intermediate product is
created. This is usually immediately reduced again by a subsequent divide operation.
A classic example of this would be in the Pollard-Brent factoring program
(Chapter 8).</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Note that this is another manifestation, on
a macro level, of the problem mentioned above. It would be a pity to have to
specify each variable to be twice as large as necessary, just to cope with
these occasional intermediate products. For this reason a special Multiply, Add
and Divide routine <b style='mso-bidi-font-weight:normal'>mad</b> has been
included in the MIRACL library. It has proved very useful when implementing
large programs (like the Pomerance-Silverman-Montgomery factoring program,
Chapter 8) on computers with limited memory.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>As well as the basic arithmetic operations,
routines are also provided: </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:14.15pt;text-indent:-14.15pt;mso-list:
l2 level1 lfo3;tab-stops:14.15pt'><&#33;[if &#33;supportLists]><span lang=EN-GB><span
style='mso-list:Ignore'>1.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>to generate and test <i
style='mso-bidi-font-style:normal'>big</i> prime numbers, using a probabilistic
primality test [Knuth81] </span></p><p class=MsoNormal style='margin-left:14.15pt;text-indent:-14.15pt;mso-list:
l2 level1 lfo3;tab-stops:14.15pt'><&#33;[if &#33;supportLists]><i style='mso-bidi-font-style:
normal'><span lang=EN-GB><span style='mso-list:Ignore'>2.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span></i><&#33;[endif]><span
lang=EN-GB>to generate <i style='mso-bidi-font-style:normal'>big</i> and <i
style='mso-bidi-font-style:normal'>flash</i> random numbers, based on the
subtract-with-borrow generator [Marsaglia]. Note however that the basic random
number generator implemented internally is <b style='mso-bidi-font-weight:normal'>not</b>
cryptographicly secure. In a real cryptographic application it would not be
adequate. A Cryptographicly strong generator is provided in the module <i
style='mso-bidi-font-style:normal'>mrstrong.c<o:p></o:p></i></span></p><p class=MsoNormal style='margin-left:14.15pt;text-indent:-14.15pt;mso-list:
l2 level1 lfo3;tab-stops:14.15pt'><&#33;[if &#33;supportLists]><span lang=EN-GB><span
style='mso-list:Ignore'>3.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>to calculate powers and roots</span></p><p class=MsoNormal style='margin-left:14.15pt;text-indent:-14.15pt;mso-list:
l2 level1 lfo3;tab-stops:14.15pt'><&#33;[if &#33;supportLists]><span lang=EN-GB><span
style='mso-list:Ignore'>4.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>to implement both the normal
and extended Euclidean GCD (Greatest Common Divisor) algorithm [Knuth81] </span></p><p class=MsoNormal style='margin-left:14.15pt;text-indent:-14.15pt;mso-list:
l2 level1 lfo3;tab-stops:14.15pt'><&#33;[if &#33;supportLists]><span lang=EN-GB><span
style='mso-list:Ignore'>5.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>to implement the ëChinese
Remainder Theoremí [Knuth81], and to calculate the Jacobi Symbol [Reisel].</span></p><p class=MsoNormal style='margin-left:14.15pt;text-indent:-14.15pt;mso-list:
l2 level1 lfo3;tab-stops:14.15pt'><&#33;[if &#33;supportLists]><span lang=EN-GB><span
style='mso-list:Ignore'>6.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>to multiply extremely large
numbers, using the Fast Fourier Transform method [Pollard71].</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>When performing extensive modular
arithmetic, a time-critical operation is that of ëModular Multiplicationí, that
is multiplication of two numbers followed by reduction to the remainder when
divided by a fixed <i style='mso-bidi-font-style:normal'>n</i>, the modulus.
One obvious solution would be to use the <b style='mso-bidi-font-weight:normal'>mad</b>
routine described above. However Montgomery [Monty85] has proposed an
alternative method. This requires that numbers are first converted to a special
<i style='mso-bidi-font-style:normal'>n-residue</i> form. However once in this
form modular multiplication is somewhat faster, using a special routine that
requires no division whatsoever. When the calculation is complete, the answers
can be converted back to normal form. Note that modular addition and
subtraction of <i style='mso-bidi-font-style:normal'>n-residues</i> proceeds as
usual, using the same routines as used for normal arithmetic. Given the
requirement for conversion of variables to/from <i style='mso-bidi-font-style:
normal'>n-residue</i> format, Montgomery's method should only be considered
when a calculation requires an extensive amount of modular arithmetic using the
same modulus. It is in fact much more convenient to use in a C++ environment,
which hides these difficult details. See Chapter 7.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Montgomery arithmetic is used internally by
many of the MIRACL library routines that require extensive modular arithmetic,
such as the highly optimised modular exponentiation function <b
style='mso-bidi-font-weight:normal'>powmod</b>, and those functions which
implement GF(<i style='mso-bidi-font-style:normal'>p</i>) Elliptic Curve
arithmetic. Details can be found in Chapter 9.2.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>For the fastest possible modular
arithmetic, one must alas resort to assembly language, and to methods optimised
for a particular modulus, or moduli of a particular size. A number of different
techniques are supported and can be used. The first two methods, the Comba and
KCM methods, are implemented in the files <i style='mso-bidi-font-style:normal'>mrcomba</i>.<i
style='mso-bidi-font-style:normal'>c</i> and <i style='mso-bidi-font-style:
normal'>mrkcm.c </i>respectively<i style='mso-bidi-font-style:normal'>.</i>
These files are created from template files <i style='mso-bidi-font-style:normal'>mrcomba.tpl</i>
and <i style='mso-bidi-font-style:normal'>mrkcm.tpl</i> by inserting macros
defined in a <i style='mso-bidi-font-style:normal'>.mcs</i> file. This is done
automatically using the supplied <b style='mso-bidi-font-weight:normal'>m</b>acro
<b style='mso-bidi-font-weight:normal'>ex</b>pansion utility <b
style='mso-bidi-font-weight:normal'>mex</b>. Compile and run <i
style='mso-bidi-font-style:normal'>config.c</i> on your target system to
automatically create a suitable <i style='mso-bidi-font-style:normal'>mirdef.h</i>
and for advise on how to proceed. Also read <i style='mso-bidi-font-style:normal'>kcmcomba.txt</i>.
To get the fastest possible performance for your embedded application it is
recommended that you should develop your own <i style='mso-bidi-font-style:
normal'>x.mcs</i> file, if one is not already provided for your
processor/compiler.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Two other rather more experimental
techniques are implemented in the files <i style='mso-bidi-font-style:normal'>mr87v.c
</i>and<i style='mso-bidi-font-style:normal'> mr87f.c </i>for the Intel 80x86
family of processors only, using the Borland C++ compiler.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>If conditions are right the appropriate
code will be automatically invoked by calling for example <b style='mso-bidi-font-weight:
normal'>powmod</b>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>It is important to note that<b
style='mso-bidi-font-weight:normal'></b>the<b style='mso-bidi-font-weight:
normal'></b>four techniques described require a compiler that supports in-line
assembly. Furthermore the latter two techniques have only been tested with the
Borland C++ V4.5 compiler for the 80x86 family of processors. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>The first idea is to completely unravel and
reorganise the program loops implicit in the multiplication and reduction
process, as first advocated by [Comba] and modified by [Scott96]. See <i
style='mso-bidi-font-style:normal'>mrcomba.tpl</i>. A fixed length modulus must
be used and specified at compile time by defining <b style='mso-bidi-font-weight:
normal'>MR_COMBA</b> to the modulus size (in words) in <i style='mso-bidi-font-style:
normal'>mirdef.h</i>. This works well for small to medium size moduli,
particularly as used in GF(<i style='mso-bidi-font-style:normal'>p</i>)
elliptic curve cryptography. For even more speed, the modular reduction
algorithm can be optimised for a modulus that has a particularly simple form.
This can be done by manually inserting the appropriate code into <i
style='mso-bidi-font-style:normal'>mrcomba.tpl</i>. Example code for the case
of a modulus <i style='mso-bidi-font-style:normal'>p</i> = 2<sup>192</sup>-2<sup>64</sup>-1
is given there in the routine <b style='mso-bidi-font-weight:normal'>comba_redc</b>.
To invoke this special code <b style='mso-bidi-font-weight:normal'>MR_SPECIAL </b>must
be defined in <i style='mso-bidi-font-style:normal'>mirdef.h.<o:p></o:p></i></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>This technique can be combined with
Karatsubaís idea for fast multiplication<span style="mso-spacerun:yes">†
</span>[Knuth81] to speed up modular multiplication for larger moduli [WeiDai].
This Karatsuba-Comba-Montgomery (KCM) method is invoked by defining <b
style='mso-bidi-font-weight:normal'>MR_KCM</b> in <i style='mso-bidi-font-style:
normal'>mirdef.h</i>. The modulus size in computer words is restricted to be
equal to <b style='mso-bidi-font-weight:normal'>MR_KCM*2<sup>n</sup></b> for
any positive <b style='mso-bidi-font-weight:normal'><i style='mso-bidi-font-style:
normal'>n</i></b> (within reason). This is a consequence of using Karatsubaís
algorithm. For example defining <b style='mso-bidi-font-weight:normal'>MR_KCM</b>
to be 8 on a 32-bit computer allows popular modulus sizes of 512, 1024, 2048
.... bits.<span style="mso-spacerun:yes">† </span></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Another alternative is to exploit the
floating point co-processor (if there is one), as its multiplication
instruction is often faster than that of the integer unit [Rubin]. This is the
case for the original Intel Pentium processor whose embedded co-processor takes
only 3 cycles to perform a multiplication, compared with the 10 required for an
integer multiply, although this is not true of the Pentium Pro, II, or III.
Also the co-processor has eight extra registers, and can manipulate 64-bit
numbers directly. These features allow the programmer some extra flexibility,
which can be used to advantage. Some experimental code has been written in the
modules <i style='mso-bidi-font-style:normal'>mr87f.c </i>and<i
style='mso-bidi-font-style:normal'> mr87v.c</i>, which may be exploited by
defining <b style='mso-bidi-font-weight:normal'>MR_PENTIUM</b> in <i
style='mso-bidi-font-style:normal'>mirdef.h</i>. Use <i style='mso-bidi-font-style:
normal'>config.c</i> to generate <i style='mso-bidi-font-style:normal'>mirdef.h</i>
&#8211; this time the underlying type must be chosen as </span><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB style='font-family:"Courier New"'>double</span></b><span
lang=EN-GB style='font-family:"Courier New"'>.</span><span lang=EN-GB> The
module <i style='mso-bidi-font-style:normal'>mr87v.c</i> implements compact
looping code, which will work with any modulus less than a certain maximum. The
module <i style='mso-bidi-font-style:normal'>mr87f.c</i> unrolls the loops for
more speed, but is bulkier and requires a fixed size modulus. Note that these
modes of operation are incompatible with a full-width base, and work best with
a number base of (usually) 2<sup>28</sup> or 2<sup>29</sup> &#8211; <i
style='mso-bidi-font-style:normal'>config.c </i>will work it out for you.<span
style="mso-spacerun:yes">† </span>Note also that although this method will
speed modular exponentiation on a Pentium, it may actually be slower for most
other 80x86 processors, so use with care. In one test a 2048 bit number was
raised to a 2048-bit power, <i style='mso-bidi-font-style:normal'>mod</i> a
2048 bit modulus. This took 2.4 seconds on a 60MHz Pentium.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><&#33;--[if gte vml 1]><v:shapetype id="_x0000_t75"
coordsize="21600,21600" o:spt="75" o:preferrelative="t" path="m@4@5l@4@11@9@11@9@5xe"
filled="f" stroked="f"><v:stroke joinstyle="miter"/><v:formulas><v:f eqn="if lineDrawn pixelLineWidth 0"/><v:f eqn="sum @0 1 0"/><v:f eqn="sum 0 0 @1"/><v:f eqn="prod @2 1 2"/><v:f eqn="prod @3 21600 pixelWidth"/><v:f eqn="prod @3 21600 pixelHeight"/><v:f eqn="sum @0 0 1"/><v:f eqn="prod @6 1 2"/><v:f eqn="prod @7 21600 pixelWidth"/><v:f eqn="sum @8 21600 0"/><v:f eqn="prod @7 21600 pixelHeight"/><v:f eqn="sum @10 21600 0"/></v:formulas><v:path o:extrusionok="f" gradientshapeok="t" o:connecttype="rect"/><o:lock v:ext="edit" aspectratio="t"/></v:shapetype><v:shape id="_x0000_i1025" type="#_x0000_t75" style='width:415pt;
height:184pt' o:ole="" filled="t"><v:fill color2="black"/><v:imagedata src="manual_files/image012.wmz" o:title=""/><v:textbox inset="0,0,0,0"/></v:shape><&#33;[endif]--><&#33;[if &#33;vml]><img border=0 width=417 height=186
src="manual_files/image013.gif" v:shapes="_x0000_i1025"><&#33;[endif]><&#33;--[if gte mso 9]><xml><o:OLEObject Type="Embed" ProgID="Excel.Chart.8" ShapeID="_x0000_i1025"
DrawAspect="Content" ObjectID="_1307025226"></o:OLEObject></xml><&#33;[endif]--></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoIndexHeading><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>This diagram illustrates the relative
timings required by each method on a Pentium Pro 200MHz processor when compiled
with the Borland C 32 bit compiler.<b style='mso-bidi-font-weight:normal'><i
style='mso-bidi-font-style:normal'></i></b>The base line ìClassicî method
refers to the assembly language code implemented directly in <i
style='mso-bidi-font-style:normal'>mrarth2.c </i>and <i style='mso-bidi-font-style:
normal'>mrmonty.c</i>. The Comba and KCM implementations use assembly language
from the <i style='mso-bidi-font-style:normal'>ms86.mcs</i> file. The modulus
sizes are on the <b style='mso-bidi-font-weight:normal'><i style='mso-bidi-font-style:
normal'>x</i></b> axis, and the scaled time in seconds on the <b
style='mso-bidi-font-weight:normal'><i style='mso-bidi-font-style:normal'>y</i></b>
axis. Note that in the calculation of<span style="mso-spacerun:yes">† </span><b
style='mso-bidi-font-weight:normal'><i style='mso-bidi-font-style:normal'>x<sup>y</sup>
mod n</i></b> it is assumed that <b style='mso-bidi-font-weight:normal'><i
style='mso-bidi-font-style:normal'>x</i></b>, <b style='mso-bidi-font-weight:
normal'><i style='mso-bidi-font-style:normal'>y</i></b> and <b
style='mso-bidi-font-weight:normal'><i style='mso-bidi-font-style:normal'>n</i></b>
are randomly generated, all of same length in bits, and of no special
form.<span style="mso-spacerun:yes">† </span>It is assumed for example that the
Comb optimisation<span style="mso-spacerun:yes">† </span>technique (See [HAC]
and <i style='mso-bidi-font-style:normal'>brick.c</i>) does not apply (that is <b
style='mso-bidi-font-weight:normal'><i style='mso-bidi-font-style:normal'>x</i></b>
is a variable). The times shown are correct for the 8192 bit modulus. Times for
smaller moduli are cumulatively scaled up by 8. So the times shown for a 4096
bit modulus should be divided by 8, for a 2048 bit modulus divided by 64, etc.
Completely unrolled code is impracticable for the larger moduli, and hence
timings for these methods are not given. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Note that the Comba method is optimal for
moduli of 512 bits and less. This implies that it will be the optimal technique
for fast GF(<i style='mso-bidi-font-style:normal'>p</i>) elliptic curve
implementations, and for 1024-bit RSA decryption (which requires two 512-bit
exponentiations and an application of the Chinese Remainder theorem). However
these conclusions are processor-dependent, and may not be globally true. Also
the Comba method can generate a lot of code, and this may be an important
consideration in some applications. In some circumstances (for example when the
instruction cache is very small), it may in fact be advisable to take the
working unrolled assembly language and carefully, manually, re-roll it.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>From Version 5.20 of MIRACL, a new data
type is supported directly<span style="mso-spacerun:yes">† </span>in C. This is
called a <i style='mso-bidi-font-style:normal'>zzn2</i> type, and basically it
consists of two <i style='mso-bidi-font-style:normal'>bigs</i> in <i
style='mso-bidi-font-style:normal'>n-residue</i> format</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Courier New"'>typedef struct<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Courier New"'>{<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Courier New"'><span style="mso-spacerun:yes">†††
</span>big a;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Courier New"'><span style="mso-spacerun:yes">†††
</span>big b;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Courier New"'>} zzn2;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>where <i style='mso-bidi-font-style:normal'>a</i>
and <i style='mso-bidi-font-style:normal'>b</i> can be considered as the real
and imaginary parts respectively. The value of a <i style='mso-bidi-font-style:
normal'>zzn2</i> is <i style='mso-bidi-font-style:normal'>a+ib</i>, where <i
style='mso-bidi-font-style:normal'>i</i> is the imaginary square root of a
quadratic non-residue. A <i style='mso-bidi-font-style:normal'>zzn2</i>
variable<i style='mso-bidi-font-style:normal'></i>is a representation of an
element of a quadratic extension field with respect to a prime modulus <i
style='mso-bidi-font-style:normal'>p</i>.<span style="mso-spacerun:yes">†
</span>For example if <i style='mso-bidi-font-style:normal'>p</i>=3 mod 4, then
<i style='mso-bidi-font-style:normal'>i</i> can be taken as &#8730;-1, and the
analogy to complex numbers with their real and imaginary parts becomes
clear.<span style="mso-spacerun:yes">† </span>They are particularly useful in
implementations of cryptographic pairings. For an example of use, see the
example program <i style='mso-bidi-font-style:normal'>cardona.cpp</i> which
solves a cubic equation. A default value for the quadratic non-residue (which
depends on the modulus) is stored in the instance variable <i style='mso-bidi-font-style:
normal'>qnr</i>. Only the values -1 and -2 are currently supported.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>To assist programmers generating code for a
processor in a non-standard environment (e.g. an embedded controller), the code
for dynamic memory allocation is always invoked from the module <i
style='mso-bidi-font-style:normal'>mralloc.c</i>. By default this calls the
standard C run-time functions <b style='mso-bidi-font-weight:normal'>calloc </b>and
<b style='mso-bidi-font-weight:normal'>free</b>. However it can easily be
modified to use an alternative user-defined memory allocation mechanism. For
the same reason all screen/keyboard output and input is via the standard
run-time functions <b style='mso-bidi-font-weight:normal'>fputc</b> and <b
style='mso-bidi-font-weight:normal'>fgetc</b>. By intercepting calls to these
functions, I/O can be redirected to non-standard devices. <br clear=all
style='page-break-before:always'></span><a name="_toc1087"></a><b style='mso-bidi-font-weight:normal'><span
lang=EN-GB style='font-size:14.0pt;mso-bidi-font-size:10.0pt;font-family:Arial;
mso-bidi-font-family:"Times New Roman";mso-font-kerning:.5pt'>Floating-Slash
numbers</span></b></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>The straightforward way to represent
rational numbers is as reduced fractions, as a numerator and denominator with
all common factors cancelled out. These numbers can then be added, subtracted,
multiplied and divided in the obvious way and the result reduced by dividing
both numerator and denominator by their Greatest Common Divisor. An efficient
GCD subroutine, using Lehmers modification of the classical Euclidean algorithm
for multiprecision numbers [Knuth81], is included in the MIRACL package. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>An alternative way to represent rationals
would be as a finite continued fraction [Knuth81]. Every rational number <i
style='mso-bidi-font-style:normal'>p/q</i> can be written as </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB><span
style='position:relative;top:42.0pt;mso-text-raise:-42.0pt'><&#33;--[if gte vml 1]><v:shape
id="_x0000_i1026" type="#_x0000_t75" style='width:187pt;height:97pt' o:ole=""
filled="t"><v:fill color2="black"/><v:imagedata src="manual_files/image014.emz" o:title=""/><v:textbox inset="0,0,0,0"/></v:shape><&#33;[endif]--><&#33;[if &#33;vml]><img border=0 width=189 height=99
src="manual_files/image015.gif" v:shapes="_x0000_i1026"><&#33;[endif]></span><&#33;--[if gte mso 9]><xml><o:OLEObject Type="Embed" ProgID="Equation.2" ShapeID="_x0000_i1026"
DrawAspect="Content" ObjectID="_1307025228"></o:OLEObject></xml><&#33;[endif]--></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>or more elegantly as <i style='mso-bidi-font-style:
normal'>p/q</i> = [<i style='mso-bidi-font-style:normal'>a<sub>0</sub>/a<sub>1</sub>/a<sub>2</sub>/..../a<sub>n</sub></i>]
where the <i style='mso-bidi-font-style:normal'>a<sub>i</sub></i> are positive
integers, usually quite small. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>For example</span></p><p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB><span
style='position:relative;top:17.5pt;mso-text-raise:-17.5pt'><&#33;--[if gte vml 1]><v:shape
id="_x0000_i1027" type="#_x0000_t75" style='width:156pt;height:47pt' o:ole=""
filled="t"><v:fill color2="black"/><v:imagedata src="manual_files/image016.wmz" o:title=""/><v:textbox inset="0,0,0,0"/></v:shape><&#33;[endif]--><&#33;[if &#33;vml]><img border=0 width=158 height=49
src="manual_files/image017.gif" v:shapes="_x0000_i1027"><&#33;[endif]></span><&#33;--[if gte mso 9]><xml><o:OLEObject Type="Embed" ProgID="Equation.3" ShapeID="_x0000_i1027"
DrawAspect="Content" ObjectID="_1307025229"></o:OLEObject></xml><&#33;[endif]--></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Note that the <i style='mso-bidi-font-style:
normal'>a<sub>i</sub></i> elements of the above continued fraction
representation are easily found as the quotients generated as a by-product when
the Euclidean GCD algorithm is applied to <i style='mso-bidi-font-style:normal'>p</i>
and <i style='mso-bidi-font-style:normal'>q</i>. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>As we are committed to fixed length
representation of rationals, a problem arises when the result of some operation
exceeds this fixed length. There is a necessity for some scheme of truncation,
or rounding. While there is no obvious way to truncate a large fraction, it is
a simple matter to truncate the continued fraction representation. The
resulting, smaller, fraction is called a best rational approximation, or a
convergent, to the original fraction. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Consider truncating 277/642 = [0/2/3/6/1/3/3].
Simply drop the last element from the CF representation, giving [0/2/3/6/1/3] =
85/197, which is a very close approximation to 277/642 (error = 0.0018%).
Chopping more terms from the CF expansion gives the successive convergents as
22/51, 19/44, 3/7, 1/2, 0/1. As the fractions get smaller, the error increases.
Obviously the truncation rule for a computer implementation should be to choose
the biggest convergent that fits the computer representation. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>The type of rounding described above is
also called ëMediant roundingí. If <i style='mso-bidi-font-style:normal'>p/q</i>
and <i style='mso-bidi-font-style:normal'>r/s</i> are two neighbouring
representable slash numbers astride a gap, then their mediant is the
unrepresentable <i style='mso-bidi-font-style:normal'>(p+r)/(q+s)</i>. All
larger fractions between <i style='mso-bidi-font-style:normal'>p/q</i> and the
mediant will round to <i style='mso-bidi-font-style:normal'>p/q</i>, and those
between <i style='mso-bidi-font-style:normal'>r/s</i> and the mediant will
round to <i style='mso-bidi-font-style:normal'>r/s</i>. The mediant itself
rounds to the ësimplerí of <i style='mso-bidi-font-style:normal'>p/q</i> and <i
style='mso-bidi-font-style:normal'>r/s</i>. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>This is theoretically a very good way to
round, much better than the rather arbitrary and base-dependent methods used in
floating-point arithmetic, and is the method used here. The full theoretical
basis of floating-slash arithmetic is described in detail by Matula &amp;
Kornerup [Matula85]. It should be noted that our <i style='mso-bidi-font-style:
normal'>flash</i> representation is in fact a cross between the fixed- and
floating-slash systems analysed by Matula &amp; Kornerup, as our slash can only
float between words, and not between bits. However the characteristics of the <i
style='mso-bidi-font-style:normal'>flash</i> data-type will tend to those of
floating-slash, as the precision is increased.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>The MIRACL routine <b style='mso-bidi-font-weight:
normal'>mround</b> implements mediant rounding. If the result of an arithmetic
operation is the fraction <i style='mso-bidi-font-style:normal'>p/q</i>, then
the Euclidean GCD algorithm is applied as before to <i style='mso-bidi-font-style:
normal'>p</i> and <i style='mso-bidi-font-style:normal'>q</i>. However this
time the objective is not to use the algorithm to calculate the GCD per se, but
to use its quotients to build successive convergents to <i style='mso-bidi-font-style:
normal'>p/q</i>. This process is stopped when the next convergent is too large
to fit the <i style='mso-bidi-font-style:normal'>flash</i> representation. The
complete algorithm is given below (Kornerup &amp; Matula [Korn83]) </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><span style='mso-tab-count:1'>††††††††††† </span>Given
<i style='mso-bidi-font-style:normal'>p</i></span><span lang=EN-GB
style='font-family:Symbol'>≥</span><span lang=EN-GB>0 and <i style='mso-bidi-font-style:
normal'>q</i></span><span lang=EN-GB style='font-family:Symbol'>≥</span><span
lang=EN-GB>1</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:16.0pt;mso-bidi-font-size:
10.0pt'><span style='mso-tab-count:1'>†††††††† </span><i style='mso-bidi-font-style:
normal'>b<sub>-2</sub>=p<span style='mso-tab-count:2'>††††††††††††††††† </span>x<sub>-2</sub>=0<span
style='mso-tab-count:2'>††††††††††††††††† </span>y<sub>-2</sub>=1<o:p></o:p></i></span></p><p class=MsoNormal><i style='mso-bidi-font-style:normal'><span lang=EN-GB
style='font-size:16.0pt;mso-bidi-font-size:10.0pt'><span style='mso-tab-count:
1'>†††††††† </span>b<sub>-1</sub>=q<span style='mso-tab-count:2'>††††††††††††††††† </span>x<sub>-1</sub>=1<span
style='mso-tab-count:2'>††††††††††††††††† </span>y<sub>-1</sub>=0<o:p></o:p></span></i></p><p class=MsoNormal><span lang=EN-GB style='font-size:16.0pt;mso-bidi-font-size:
10.0pt'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Now for <i style='mso-bidi-font-style:normal'>i=0,1,.....
</i>and for <i style='mso-bidi-font-style:normal'>b<sub>i-1</sub>&gt;0, </i>find
the quotient <i style='mso-bidi-font-style:normal'>a<sub>i</sub></i> and
remainder <i style='mso-bidi-font-style:normal'>b<sub>i</sub></i> when <i
style='mso-bidi-font-style:normal'>b<sub>i-2</sub></i> is divided by <i
style='mso-bidi-font-style:normal'>b<sub>i-1</sub>,</i> such that </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:16.0pt;mso-bidi-font-size:
10.0pt'><span style='mso-tab-count:1'>†††††††† </span><i style='mso-bidi-font-style:
normal'>b<sub>i</sub> = -a<sub>i</sub>.b<sub>i-1</sub> + b<sub>i-2</sub></i></span><span
lang=EN-GB style='font-size:14.0pt;mso-bidi-font-size:10.0pt'><o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Then calculate</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:16.0pt;mso-bidi-font-size:
10.0pt'><span style='mso-tab-count:1'>†††††††† </span><i style='mso-bidi-font-style:
normal'>x<sub>i</sub> = a<sub>i</sub>.x<sub>i-1</sub> + x<sub>i-2<o:p></o:p></sub></i></span></p><p class=MsoNormal><i style='mso-bidi-font-style:normal'><span lang=EN-GB
style='font-size:16.0pt;mso-bidi-font-size:10.0pt'><span style='mso-tab-count:
1'>†††††††† </span>y<sub>i</sub> = a<sub>i</sub>.y<sub>i-1</sub> + y<sub>i-2<o:p></o:p></sub></span></i></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Stop when <span style='position:relative;
top:10.5pt;mso-text-raise:-10.5pt'><&#33;--[if gte vml 1]><v:shape id="_x0000_i1028"
type="#_x0000_t75" style='width:15pt;height:33pt' o:ole="" filled="t"><v:fill color2="black"/><v:imagedata src="manual_files/image018.emz" o:title=""/><v:textbox inset="0,0,0,0"/></v:shape><&#33;[endif]--><&#33;[if &#33;vml]><img border=0 width=17 height=35
src="manual_files/image019.gif" v:shapes="_x0000_i1028"><&#33;[endif]></span><&#33;--[if gte mso 9]><xml><o:OLEObject Type="Embed" ProgID="Equation.2" ShapeID="_x0000_i1028"
DrawAspect="Content" ObjectID="_1307025230"></o:OLEObject></xml><&#33;[endif]--><span style="mso-spacerun:yes">†</span>is to big to fit the <i
style='mso-bidi-font-style:normal'>flash</i> representation, and take <span
style='position:relative;top:10.5pt;mso-text-raise:-10.5pt'><&#33;--[if gte vml 1]><v:shape
id="_x0000_i1029" type="#_x0000_t75" style='width:22pt;height:33pt' o:ole=""
filled="t"><v:fill color2="black"/><v:imagedata src="manual_files/image020.emz" o:title=""/><v:textbox inset="0,0,0,0"/></v:shape><&#33;[endif]--><&#33;[if &#33;vml]><img border=0 width=24 height=35
src="manual_files/image021.gif" v:shapes="_x0000_i1029"><&#33;[endif]></span><&#33;--[if gte mso 9]><xml><o:OLEObject Type="Embed" ProgID="Equation.2" ShapeID="_x0000_i1029"
DrawAspect="Content" ObjectID="_1307025231"></o:OLEObject></xml><&#33;[endif]--><span style="mso-spacerun:yes">†</span>as the rounded result.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>If applied to 277/642, this process will
give the same sequence of convergents as stated earlier. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Since this rounding procedure must be
applied to the result of each arithmetic operation, and since it is potentially
rather slow, a lot of effort has been made to optimise its implementation.
Lehmer's idea of operating only with the most significant piece of each number
for as long as possible [Knuth81] is used, so that for most of the iterations
only single-precision arithmetic is needed. Special care is taken to avoid the
rounded result overshooting the limits of the <i style='mso-bidi-font-style:
normal'>flash</i> representation [Scott89a]. The application of the basic
arithmetic routines to the calculation of elementary functions such as <i
style='mso-bidi-font-style:normal'>log(x)</i>, <i style='mso-bidi-font-style:
normal'>exp(x)</i>, <i style='mso-bidi-font-style:normal'>sin(x)</i>, <i
style='mso-bidi-font-style:normal'>cos(x)</i>, <i style='mso-bidi-font-style:
normal'>tan(x)</i> etc., uses the fast algorithms described by Brent [Brent76].</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>In many cases the result given by a program
can be guaranteed to be exact. This can be checked by testing the instance variable
<b style='mso-bidi-font-weight:normal'>EXACT</b>, which is initialised to TRUE
and is only set to FALSE if any rounding takes place. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>A disadvantage of using a <i
style='mso-bidi-font-style:normal'>flash</i> type of variable to approximate
real arithmetic is the non-uniformity in gap-size between representable values
(Matula &amp; Kornerup [Matula85]).</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>To illustrate this consider a
floating-slash system which is constrained to have the product of numerator and
denominator less than 256. Observe that the first representable fraction less
than 1/1 in such a system is 15/16, a gap of 1/16. The next fraction larger
than 0/1 is 1/255, a gap of 1/255. In general, for a <i style='mso-bidi-font-style:
normal'>k</i>-bit floating-slash system, the gap size varies from smaller than
2<sup>-k</sup> to a worst case 2<sup>-k/2</sup>. In practise this means that a
real value that falls into one of the larger gaps, will be represented by a
fraction which will be accurate to only half its usual precision. Fortunately
such large gaps are rare, and increasingly so for higher precision, occurring
only near simple fractions. However it does mean that real results can only be
completely trusted to half the given decimal places. A partial solution to this
problem would be to represent rationals directly as continued fractions. This
gives a much better uniformity of gap-size (Kornerup &amp; Matula [Korn85]),
but would be very difficult to implement using a high level language.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Arithmetic on <i style='mso-bidi-font-style:
normal'>flash</i> data-types is undoubtedly slower than on an equivalent sized
multiprecision floating-point type (e.g. [Brent78]). The advantages of the <i
style='mso-bidi-font-style:normal'>flash</i> approach are its ability to
exactly represent rational numbers, and do exact arithmetic on them. Even when
rounding is needed, the result often works out correctly, due to the tendency
of mediant-rounding to prefer a simple fraction over a complex one. For example
the <i style='mso-bidi-font-style:normal'>roots</i> program (Chapter 8) when asked
to find the square root of 2 and then square the result, comes back with the
exact answer of 2, despite much internal rounding.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span lang=EN-GB>WARNING</span></b><span
lang=EN-GB>&#33; Do <b style='mso-bidi-font-weight:normal'>NOT</b> mix <i
style='mso-bidi-font-style:normal'>flash</i> arithmetic with the built-in <i
style='mso-bidi-font-style:normal'>double</i> arithmetic. They donít mix well.
If you decide to use <i style='mso-bidi-font-style:normal'>flash </i>arithmetic,
use it throughout, and convert all constants at the start to type <i
style='mso-bidi-font-style:normal'>flash</i>. Even better specify such
constants if possible as fractions. So (in C++) it is much preferable to write</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB style='font-family:
Courier'><span style='mso-tab-count:2'>††††††††† </span>x=Flash(5,8);<span
style='mso-tab-count:1'>† </span>// x=5/8<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>rather than</span><span
lang=EN-GB style='font-family:Courier'><span style='mso-tab-count:1'>†† </span>x=.625;<br
clear=all style='page-break-before:always'></span><a name="_toc1145"></a><b style='mso-bidi-font-weight:normal'><span
lang=EN-GB style='font-size:14.0pt;mso-bidi-font-size:10.0pt;font-family:Arial;
mso-bidi-font-family:"Times New Roman";mso-font-kerning:.5pt'>The C++ Interface</span></b></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Many users of the MIRACL package would be
disappointed that they have to calculate </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB><span
style='position:relative;top:10.0pt;mso-text-raise:-10.0pt'><&#33;--[if gte vml 1]><v:shape
id="_x0000_i1030" type="#_x0000_t75" style='width:114pt;height:33pt' o:ole=""
filled="t"><v:fill color2="black"/><v:imagedata src="manual_files/image022.emz" o:title=""/><v:textbox inset="0,0,0,0"/></v:shape><&#33;[endif]--><&#33;[if &#33;vml]><img border=0 width=116 height=35
src="manual_files/image023.gif" v:shapes="_x0000_i1030"><&#33;[endif]></span><&#33;--[if gte mso 9]><xml><o:OLEObject Type="Embed" ProgID="Equation.2" ShapeID="_x0000_i1030"
DrawAspect="Content" ObjectID="_1307025232"></o:OLEObject></xml><&#33;[endif]--></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>for a flash variable <i style='mso-bidi-font-style:
normal'>x</i> by the sequence</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:3'>†††††††††††††† </span>fmul(x,x,t);<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:3'>†††††††††††††† </span>fadd(t,x,t);<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:3'>†††††††††††††† </span>fincr(t,1,1,t);<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>rather than by simply </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><span style='mso-tab-count:3'>††††††††††††††††††††††††††††††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>t=x*x+x+1;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Someone could of course use the MIRACL
library to write a special purpose C compiler which could properly interpret
such an instruction (see Cherry and Morris [Cherry] for an example of this
approach). However such a drastic step is not necessary. A superset of C,
called C++ has gained general acceptance as the natural successor to C. The
enhancements to C are mainly aimed at making it an object-oriented language. By
defining <i style='mso-bidi-font-style:normal'>big</i> and <i style='mso-bidi-font-style:
normal'>flash</i> variables as ëclassesí (in C++ terminology), it is possible
to ëoverloadí the usual mathematical operators, so that the compiler will
automatically substitute calls to the appropriate MIRACL routines when these
operators are used in conjunction with <i style='mso-bidi-font-style:normal'>big</i>
or <i style='mso-bidi-font-style:normal'>flash</i> variables. Furthermore C++
is able to look after the initialisation (and ultimate elimination) of these
data-types automatically, using its constructor/destructor mechanism, which is
included with the class definition. This relieves the programmer from the
tedium of explicitly initialising each <i style='mso-bidi-font-style:normal'>big</i>
and <i style='mso-bidi-font-style:normal'>flash</i> variable by repeated calls
to <b style='mso-bidi-font-weight:normal'>mirvar</b> . Indeed once the classes
are properly defined and set up, it is as simple to work with the new
data-types as with the built-in <i style='mso-bidi-font-style:normal'>double</i>
and <i style='mso-bidi-font-style:normal'>int</i> types. Using C++ also helps
shield the user from the internal workings of MIRACL.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>The MIRACL library is interfaced to C++ via
the header files <i style='mso-bidi-font-style:normal'>big.h</i>, <i
style='mso-bidi-font-style:normal'>flash.h,</i><i style='mso-bidi-font-style:
normal'>zzn.h</i>, <i style='mso-bidi-font-style:normal'>gf2m.h, ecn.h</i> and <i
style='mso-bidi-font-style:normal'>ec2.h</i>. Function implementation is in the
associated files <i style='mso-bidi-font-style:normal'>big.cpp</i>,<span
style="mso-spacerun:yes">† </span><i style='mso-bidi-font-style:normal'>flash.cpp</i>,
<i style='mso-bidi-font-style:normal'>zzn.cpp, gf2m.cpp, </i><span
style="mso-spacerun:yes">†</span><i style='mso-bidi-font-style:normal'>ecn.cpp </i>and<i
style='mso-bidi-font-style:normal'> ec2.cpp</i>, which must be linked into any
application that requires them. The Chinese Remainder Theorem is also elegantly
implemented as a class, in files <i style='mso-bidi-font-style:normal'>crt.h</i>
and <i style='mso-bidi-font-style:normal'>crt.cpp</i>. See <i style='mso-bidi-font-style:
normal'>decode.cpp</i> for an example of use. The Comb method for fast modular
exponentiation with precomputation [HAC] is implemented in <i style='mso-bidi-font-style:
normal'>brick.h</i>. See <i style='mso-bidi-font-style:normal'>brick.cpp</i>
for an example of use. The GF(<i style='mso-bidi-font-style:normal'>p</i>)
elliptic curve equivalents are in <i style='mso-bidi-font-style:normal'>ebrick.h</i>
and <i style='mso-bidi-font-style:normal'>ebrick.cpp</i> and the GF(2<sup>m</sup>)
elliptic curve equivalents in <i style='mso-bidi-font-style:normal'>ebrick2.h</i>
and <i style='mso-bidi-font-style:normal'>ebrick2.cpp </i>respectively.<u><br
clear=all style='page-break-before:always'></u><b style='mso-bidi-font-weight:normal'>EXAMPLE<o:p></o:p></b></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'>/*<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style="mso-spacerun:yes">†</span>*<span style="mso-spacerun:yes">††
</span>Program to calculate factorials.<o:p></o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB style='font-family:
Courier'><span style="mso-spacerun:yes">†</span>*/<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'>#include
&lt;iostream&gt;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'>#include
&quot;big.h&quot;<span style="mso-spacerun:yes">†† </span>/* include MIRACL
system */<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'>using namespace
std;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:184.5pt'><span lang=EN-GB style='font-family:
Courier'>Miracl precision(500,10); // This makes sure that MIRACL<o:p></o:p></span></p><p class=MsoNormal style='tab-stops:184.5pt'><span lang=EN-GB style='font-family:
Courier'><span style='mso-tab-count:1'>††††††††††††††††††††††††† </span>// is
initialised before main()<span style='mso-tab-count:1'>††† </span>// is called<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'>void main()<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'>{ /* calculate
factorial of number */<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style="mso-spacerun:yes">††† </span>Big nf=1;<span style="mso-spacerun:yes">†††
</span><span style="mso-spacerun:yes">†††</span>/* declare &quot;Big&quot;
variable nf */<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style="mso-spacerun:yes">††† </span></span><span lang=PT-BR style='font-family:
Courier;mso-ansi-language:PT-BR'>int n;<o:p></o:p></span></p><p class=MsoNormal><span lang=PT-BR style='font-family:Courier;mso-ansi-language:
PT-BR'><span style="mso-spacerun:yes">††† </span>cout &lt;&lt; &quot;factorial
program\n&quot;;<o:p></o:p></span></p><p class=MsoNormal><span lang=PT-BR style='font-family:Courier;mso-ansi-language:
PT-BR'><span style="mso-spacerun:yes">††† </span></span><span lang=EN-GB
style='font-family:Courier'>cout &lt;&lt; &quot;input number n= \n&quot;;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style="mso-spacerun:yes">††† </span></span><span lang=PT-BR style='font-family:
Courier;mso-ansi-language:PT-BR'>cin &gt;&gt; n;<o:p></o:p></span></p><p class=MsoNormal><span lang=PT-BR style='font-family:Courier;mso-ansi-language:
PT-BR'><span style="mso-spacerun:yes">††† </span>while (n&gt;1) <o:p></o:p></span></p><p class=MsoNormal><span lang=PT-BR style='font-family:Courier;mso-ansi-language:
PT-BR'><span style="mso-spacerun:yes">††††††† </span>nf*=(n--);<span
style="mso-spacerun:yes">† </span>/* nf=n&#33;=n*(n-1)*(n-2)*....3*2*1<span
style="mso-spacerun:yes">† </span>*/<o:p></o:p></span></p><p class=MsoNormal><span lang=PT-BR style='font-family:Courier;mso-ansi-language:
PT-BR'><span style="mso-spacerun:yes">††† </span></span><span lang=EN-GB
style='font-family:Courier'>cout &lt;&lt; &quot;n&#33;= \n&quot; &lt;&lt; nf
&lt;&lt; &quot;\n&quot;;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'>}<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Compare this with the C version of Chapter
3. Note the neat use of a dummy class <i style='mso-bidi-font-style:normal'>Miracl</i>
used to set the precision of the <i style='mso-bidi-font-style:normal'>big</i>
variables. Its declaration at global scope ensures that MIRACL is initialised
before <i style='mso-bidi-font-style:normal'>main()</i> is called. (Note that
this would not be appropriate in a multi-threaded environment.) When compiling
and linking this program, donít forget to link in the <i style='mso-bidi-font-style:
normal'>Big</i> class implementation file <i style='mso-bidi-font-style:normal'>big.cpp.<o:p></o:p></i></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Conversion to/from internal <i
style='mso-bidi-font-style:normal'>Big</i> format is quite important:-</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>To convert a hex character string to a <i
style='mso-bidi-font-style:normal'>Big<o:p></o:p></i></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style="mso-spacerun:yes">†††
</span>Big x;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style="mso-spacerun:yes">†††
</span>char c[100];<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style="mso-spacerun:yes">†††
</span>...<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style="mso-spacerun:yes">†††
</span>mip-&gt;IOBASE=16;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style="mso-spacerun:yes">†††
</span>x=c;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>To convert a <i style='mso-bidi-font-style:
normal'>Big</i> to a hex character string</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style="mso-spacerun:yes">†††
</span>mip-&gt;IOBASE=16;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style="mso-spacerun:yes">†††
</span>c &lt;&lt; x;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>To convert to/from pure binary, use the <b
style='mso-bidi-font-weight:normal'>from_binary</b>( ) and <b style='mso-bidi-font-weight:
normal'>to_binary</b>( ) friend functions.</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB style='font-family:
"Courier New";mso-bidi-font-family:"Times New Roman"'><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB style='font-family:
"Courier New";mso-bidi-font-family:"Times New Roman"'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style="mso-spacerun:yes">††
</span>int len;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style="mso-spacerun:yes">††
</span>char c[100];<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style="mso-spacerun:yes">†</span><span
style="mso-spacerun:yes">† </span>...<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style="mso-spacerun:yes">††
</span>Big x=from_binary(len,c);<span style="mso-spacerun:yes">† </span><o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style="mso-spacerun:yes">†††
</span><span style='mso-tab-count:2'>††††† </span>// creates Big x from len
bytes of binary in c <o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style="mso-spacerun:yes">†</span><o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style="mso-spacerun:yes">††
</span>len=to_binary(x,100,c,FALSE); <o:p></o:p></span></p><p class=MsoNormal style='margin-left:36.0pt;text-indent:36.0pt'><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>//
converts Big x to len bytes binary in c[100] <o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style="mso-spacerun:yes">††
</span>len=to_binary(x,100,c,TRUE);<span style="mso-spacerun:yes">† </span><o:p></o:p></span></p><p class=MsoNormal style='margin-left:36.0pt;text-indent:36.0pt'><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>//
converts Big x to len bytes binary in c[100] <o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style="mso-spacerun:yes">†</span><span
style='mso-tab-count:2'>†††††††† </span>// (right justified with leading zeros)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>In many of the example programs,
particularly the factoring programs, all the arithmetic is done <i
style='mso-bidi-font-style:normal'>mod n</i>. To avoid the tedious reduction <i
style='mso-bidi-font-style:normal'>mod n</i> required after each operation, a
new C++ class <i style='mso-bidi-font-style:normal'>ZZn</i> has been used, and
defined in the file <i style='mso-bidi-font-style:normal'>zzn.h</i>. This class
<i style='mso-bidi-font-style:normal'>ZZn</i> (for <i style='mso-bidi-font-style:
normal'>ZZ(n)</i> or the ring of integers <i style='mso-bidi-font-style:normal'>mod
n</i> ) has its arithmetic operators defined to automatically perform the
reduction. The function <b style='mso-bidi-font-weight:normal'>modulo(n)</b>
sets the modulus. In an analogous fashion the C++ class <i style='mso-bidi-font-style:
normal'>GF2m</i> deals with elements of the field defined over GF(2<i
style='mso-bidi-font-style:normal'><sup>m</sup></i>). In this case the
ìmodulusî is set via <b style='mso-bidi-font-weight:normal'>modulo(m,a,b,c)</b>,
which also specifies either a trinomial basis <i style='mso-bidi-font-style:
normal'>t<sup>m</sup> + t<sup>a</sup> +1, </i>(and set <i style='mso-bidi-font-style:
normal'>b=c=0</i>),<i style='mso-bidi-font-style:normal'></i>or a pentanomial
basis <i style='mso-bidi-font-style:normal'>t<sup>m</sup> + t<sup>a</sup> + t<sup>b</sup>
+ t<sup>c</sup> +1</i>. See the IEEE P1363 documentation for details. <a
href="http://grouper.ieee.org/groups/1363/draft.html">http://grouper.ieee.org/groups/1363/draft.html</a></span></p><p class=MsoIndexHeading><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Internally the <i style='mso-bidi-font-style:
normal'>ZZn</i> class uses Montgomery representation. See <i style='mso-bidi-font-style:
normal'>zzn.h</i>. Note that the internal implementation of <i
style='mso-bidi-font-style:normal'>ZZn</i> is hidden from the application
programmer, a classic feature of C++. Thus the awkward internals of Montgomery
representation need not concern the C++ programmer.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>The class <i style='mso-bidi-font-style:
normal'>ECn</i> defined in <i style='mso-bidi-font-style:normal'>ecn.h</i>
makes manipulation of points on GF (<i style='mso-bidi-font-style:normal'>p</i>)
elliptic curves a simple matter, again hiding all the grizzly details. The
class <i style='mso-bidi-font-style:normal'>EC2</i> defined in <i
style='mso-bidi-font-style:normal'>ec2.h</i> does the same for GF(2<sup>m</sup>)
elliptic curves.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Almost all of MIRACLís functionality is
accessible from C++. Programming can often be done intuitively, without
reference to this manual, using familiar C syntax as illustrated above. Other
functions are accessed using the ëobviousí syntax - as in for example </span><span
lang=EN-GB style='font-family:Courier'>x=gcd(x,y);</span><span lang=EN-GB>, or </span><span
lang=EN-GB style='font-family:Courier'>y=sin(x);</span><span lang=EN-GB>. For
more details examine the header files and example programs.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>C++ versions of most of the example
programs are included in the distribution media, with the file extensions <i
style='mso-bidi-font-style:normal'>.cpp<o:p></o:p></i></span></p><p class=MsoNormal><i style='mso-bidi-font-style:normal'><span lang=EN-GB><o:p>&nbsp;</o:p></span></i></p><p class=MsoNormal><span lang=EN-GB>One problem with manipulating large objects
in C++ is the tendency of the compiler to generate code to create/destroy/copy
multiple temporary objects. By default MIRACL obtains memory for <i
style='mso-bidi-font-style:normal'>Big</i> and <i style='mso-bidi-font-style:
normal'>Flash</i> variables from the heap. This can be quite time-consuming,
and all such objects need ultimately to be destroyed. It would be faster to
assign memory instead from the stack, especially for relative small big
numbers. This can now be achieved by defining <b style='mso-bidi-font-weight:
normal'>BIGS=m</b> at compilation time. For example if using the Microsoft C++
compiler from the command line:-</span></p><p class=MsoIndexHeading><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>C:miracl&gt;cl /O2 /GX /DBIGS=50
brent.cpp big.cpp zzn.cpp miracl.lib<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Note that the value of <b style='mso-bidi-font-weight:
normal'>m</b> should be the same as or less than the value of <b
style='mso-bidi-font-weight:normal'>n</b> that is specified in the call to </span><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>mirsys(<b
style='mso-bidi-font-weight:normal'>n</b>,0);</span><span lang=EN-GB> or in </span><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>Miracl
precision=<b style='mso-bidi-font-weight:normal'>n</b>; </span><span
lang=EN-GB>in the main program.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>When using finite-field arithmetic, valid
numbers are always less than a certain fixed modulus. For example in the finite
field mod <i style='mso-bidi-font-style:normal'>n</i>, the class defined in <i
style='mso-bidi-font-style:normal'>zzn.h</i> and <i style='mso-bidi-font-style:
normal'>zzn.cpp</i> might handle numbers with respect to a 512-bit modulus <i
style='mso-bidi-font-style:normal'>n</i>, which is set by <b style='mso-bidi-font-weight:
normal'>modulo(n)</b>. In this case one can define <b style='mso-bidi-font-weight:
normal'>ZZNS=16</b> so that all elements are of a size 16x32=512, and are
created on the stack. (This works particularly well in combination with the Comba
mechanism described in Chapter 5.)</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>In a similar fashion, when working over the
field GF(2</span><sup><span lang=EN-GB style='mso-bidi-font-size:12.0pt'>283</span></sup><span
lang=EN-GB>) , one can define <b style='mso-bidi-font-weight:normal'>GF2MS=9</b>,
so that all elements in the field are stored in a fixed memory allocation of 9
words taken from the stack. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>In these latter two cases the precision <b
style='mso-bidi-font-weight:normal'>n</b> specified in the call to </span><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>mirsys(<b
style='mso-bidi-font-weight:normal'>n</b>,0);</span><span lang=EN-GB> or in </span><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>Miracl
precision=<b style='mso-bidi-font-weight:normal'>n; </b></span><span
lang=EN-GB>in the main program should be at least 2 greater than the <b
style='mso-bidi-font-weight:normal'>m</b> that specified in the <b
style='mso-bidi-font-weight:normal'>ZZNS=m</b> or <b style='mso-bidi-font-weight:
normal'>GF2MS=m</b> definition.</span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>This is not recommended for program
development, or if the objects are very large. It is only relevant with C++
programs. See the comments in the sample programs <i style='mso-bidi-font-style:
normal'>ibe_dec.cpp</i> and <i style='mso-bidi-font-style:normal'>dl.cpp</i>
for examples of the use of this mechanism. However the benefits can often be
substantial &#8211; programs may be up to twice as fast.</span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Finally here is a more elaborate C++
program to implement a relatively complex cryptographic protocol. Note the
convention of using capitalised variables for field elements.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoPlainText>/*</p><p class=MsoPlainText><span style="mso-spacerun:yes">†</span>*<span
style="mso-spacerun:yes">†† </span>Gunthers's ID based key exchange - Finite
field version</p><p class=MsoPlainText><span style="mso-spacerun:yes">†</span>*<span
style="mso-spacerun:yes">†† </span>See RFC 1824</p><p class=MsoPlainText><span style="mso-spacerun:yes">†</span>*<span
style="mso-spacerun:yes">†† </span>r^r variant (with Perfect Forward Security)</p><p class=MsoPlainText><span style="mso-spacerun:yes">†</span>*/</p><p class=MsoPlainText><o:p>&nbsp;</o:p></p><p class=MsoPlainText>#include &lt;iostream&gt;</p><p class=MsoPlainText>#include &lt;fstream&gt;</p><p class=MsoPlainText>#include &quot;zzn.h&quot;</p><p class=MsoPlainText><o:p>&nbsp;</o:p></p><p class=MsoPlainText>using namespace std;</p><p class=MsoPlainText><o:p>&nbsp;</o:p></p><p class=MsoPlainText>Miracl precision=100;</p><p class=MsoPlainText><o:p>&nbsp;</o:p></p><p class=MsoPlainText>char *IDa=&quot;Identity 1&quot;;</p><p class=MsoPlainText>char *IDb=&quot;Identity 2&quot;;</p><p class=MsoPlainText><o:p>&nbsp;</o:p></p><p class=MsoPlainText>// Hash function</p><p class=MsoPlainText>Big H(char *ID)</p><p class=MsoPlainText>{ // hash character string to 160-bit big number</p><p class=MsoPlainText><span style="mso-spacerun:yes">††† </span>int b;</p><p class=MsoPlainText><span style="mso-spacerun:yes">††† </span>Big h;</p><p class=MsoPlainText><span style="mso-spacerun:yes">††† </span>char s[20];</p><p class=MsoPlainText><span style="mso-spacerun:yes">††† </span>sha sh;</p><p class=MsoPlainText><span style="mso-spacerun:yes">†††
</span>shs_init(&amp;sh);</p><p class=MsoPlainText><span style="mso-spacerun:yes">††† </span>while (*ID&#33;=0)
shs_process(&amp;sh,*ID++);</p><p class=MsoPlainText><span style="mso-spacerun:yes">†††
</span>shs_hash(&amp;sh,s);</p><p class=MsoPlainText><span style="mso-spacerun:yes">†††
</span>h=from_binary(20,s);</p><p class=MsoPlainText><span style="mso-spacerun:yes">††† </span>return h;</p><p class=MsoPlainText>}</p><p class=MsoPlainText><o:p>&nbsp;</o:p></p><p class=MsoPlainText>int main()</p><p class=MsoPlainText>{</p><p class=MsoPlainText><span style="mso-spacerun:yes">††† </span>int bits;</p><p class=MsoPlainText><span style="mso-spacerun:yes">††† </span>ifstream
common(&quot;common.dss&quot;);<span style="mso-spacerun:yes">††† </span>//
construct file stream</p><p class=MsoPlainText><span style="mso-spacerun:yes">††† </span>Big
p,q,g,x,k,ra,rb,sa,sb,ta,tb,wa,wb;</p><p class=MsoPlainText><span style="mso-spacerun:yes">††† </span><span lang=ES
style='mso-ansi-language:ES'>ZZn G,Y,Ra,Rb,Ua,Ub,Va,Vb,Key;<o:p></o:p></span></p><p class=MsoPlainText><span lang=ES style='mso-ansi-language:ES'><span
style="mso-spacerun:yes">††† </span></span>ZZn A[4];</p><p class=MsoPlainText><span style="mso-spacerun:yes">††† </span>Big b[4];</p><p class=MsoPlainText><span style="mso-spacerun:yes">††† </span>long seed;</p><p class=MsoPlainText><span style="mso-spacerun:yes">††† </span>miracl
*mip=&amp;precision;</p><p class=MsoPlainText><span style="mso-spacerun:yes">††† </span>cout &lt;&lt;
&quot;Enter 9 digit random number seed<span style="mso-spacerun:yes">† </span>=
&quot;;</p><p class=MsoPlainText><span style="mso-spacerun:yes">††† </span>cin &gt;&gt;
seed; irand(seed);</p><p class=MsoPlainText><o:p>&nbsp;</o:p></p><p class=MsoPlainText>// get common data. Its in hex. G^q mod p = 1</p><p class=MsoPlainText><span style="mso-spacerun:yes">††† </span>common &gt;&gt;
bits;</p><p class=MsoPlainText><span style="mso-spacerun:yes">†††
</span>mip-&gt;IOBASE=16;</p><p class=MsoPlainText><span style="mso-spacerun:yes">††† </span>common &gt;&gt;
p &gt;&gt; q &gt;&gt; g;</p><p class=MsoPlainText><span style="mso-spacerun:yes">†††
</span>mip-&gt;IOBASE=10;</p><p class=MsoPlainText><span style="mso-spacerun:yes">††† </span>modulo(p);<span
style="mso-spacerun:yes">††† </span>// set modulus</p><p class=MsoPlainText><span style="mso-spacerun:yes">††† </span></p><p class=MsoPlainText><span style="mso-spacerun:yes">††† </span>G=(ZZn)g;</p><p class=MsoPlainText><o:p>&nbsp;</o:p></p><p class=MsoPlainText><span style="mso-spacerun:yes">††† </span>cout &lt;&lt;
&quot;Setting up Certification Authority ... &quot; &lt;&lt; endl;</p><p class=MsoPlainText><o:p>&nbsp;</o:p></p><p class=MsoPlainText>// CA generates its secret and public keys</p><p class=MsoPlainText><o:p>&nbsp;</o:p></p><p class=MsoPlainText><span style="mso-spacerun:yes">††† </span>x=rand(q);<span
style="mso-spacerun:yes">††††††† </span>// CA secret key, 0 &lt; x &lt; q</p><p class=MsoPlainText><span style="mso-spacerun:yes">†††
</span>Y=pow(G,x);<span style="mso-spacerun:yes">†††††† </span>// CA public
key, Y=G^x</p><p class=MsoPlainText><o:p>&nbsp;</o:p></p><p class=MsoPlainText><span style="mso-spacerun:yes">††† </span>cout &lt;&lt;
&quot;Visiting CA ....&quot; &lt;&lt; endl;</p><p class=MsoPlainText><o:p>&nbsp;</o:p></p><p class=MsoPlainText>// Visit to CA - a</p><p class=MsoPlainText><span style="mso-spacerun:yes">††† </span>k=rand(q);</p><p class=MsoPlainText><span style="mso-spacerun:yes">††† </span>Ra=pow(G,k);</p><p class=MsoPlainText><span style="mso-spacerun:yes">††† </span><span
lang=EN-IE style='mso-ansi-language:EN-IE'>ra=(Big)Ra%q;<o:p></o:p></span></p><p class=MsoPlainText><span lang=EN-IE style='mso-ansi-language:EN-IE'><span
style="mso-spacerun:yes">††† </span></span><span lang=PT-BR style='mso-ansi-language:
PT-BR'>sa=(H(IDa)+(k*ra)%q);<o:p></o:p></span></p><p class=MsoPlainText><span lang=PT-BR style='mso-ansi-language:PT-BR'><span
style="mso-spacerun:yes">††† </span></span><span lang=FR style='mso-ansi-language:
FR'>sa=(sa*inverse(x,q))%q;<o:p></o:p></span></p><p class=MsoPlainText><span lang=FR style='mso-ansi-language:FR'><o:p>&nbsp;</o:p></span></p><p class=MsoPlainText>// Visit to CA - b</p><p class=MsoPlainText><span style="mso-spacerun:yes">††† </span>k=rand(q);</p><p class=MsoPlainText><span style="mso-spacerun:yes">††† </span>Rb=pow(G,k);</p><p class=MsoPlainText><span style="mso-spacerun:yes">††† </span>rb=(Big)Rb%q;</p><p class=MsoPlainText><span style="mso-spacerun:yes">††† </span><span
lang=PT-BR style='mso-ansi-language:PT-BR'>sb=(H(IDb)+(k*rb)%q);<o:p></o:p></span></p><p class=MsoPlainText><span lang=PT-BR style='mso-ansi-language:PT-BR'><span
style="mso-spacerun:yes">††† </span></span><span lang=FR style='mso-ansi-language:
FR'>sb=(sb*inverse(x,q))%q;<o:p></o:p></span></p><p class=MsoPlainText><span lang=FR style='mso-ansi-language:FR'><o:p>&nbsp;</o:p></span></p><p class=MsoPlainText><span lang=FR style='mso-ansi-language:FR'><span
style="mso-spacerun:yes">††† </span>cout &lt;&lt; &quot;Offline calculations
.... &quot; &lt;&lt; endl;<span style="mso-spacerun:yes">† </span><o:p></o:p></span></p><p class=MsoPlainText><span lang=FR style='mso-ansi-language:FR'><o:p>&nbsp;</o:p></span></p><p class=MsoPlainText><span lang=FR style='mso-ansi-language:FR'>// offline
calculation - a<o:p></o:p></span></p><p class=MsoPlainText><span lang=FR style='mso-ansi-language:FR'><span
style="mso-spacerun:yes">††† </span>wa=rand(q);<o:p></o:p></span></p><p class=MsoPlainText><span lang=FR style='mso-ansi-language:FR'><span
style="mso-spacerun:yes">††† </span>Va=pow(G,wa);<o:p></o:p></span></p><p class=MsoPlainText><span lang=FR style='mso-ansi-language:FR'><span
style="mso-spacerun:yes">††† </span>ta=rand(q);<o:p></o:p></span></p><p class=MsoPlainText><span lang=FR style='mso-ansi-language:FR'><span
style="mso-spacerun:yes">††† </span>Ua=pow(Y,ta);<o:p></o:p></span></p><p class=MsoPlainText><span lang=FR style='mso-ansi-language:FR'><o:p>&nbsp;</o:p></span></p><p class=MsoPlainText><span lang=FR style='mso-ansi-language:FR'>// offline
calculation - b<o:p></o:p></span></p><p class=MsoPlainText><span lang=FR style='mso-ansi-language:FR'><span
style="mso-spacerun:yes">††† </span>wb=rand(q);<o:p></o:p></span></p><p class=MsoPlainText><span lang=FR style='mso-ansi-language:FR'><span
style="mso-spacerun:yes">††† </span>Vb=pow(G,wb);<o:p></o:p></span></p><p class=MsoPlainText><span lang=FR style='mso-ansi-language:FR'><span
style="mso-spacerun:yes">††† </span>tb=rand(q);<o:p></o:p></span></p><p class=MsoPlainText><span lang=FR style='mso-ansi-language:FR'><span
style="mso-spacerun:yes">††† </span></span><span lang=ES style='mso-ansi-language:
ES'>Ub=pow(Y,tb);<o:p></o:p></span></p><p class=MsoPlainText><span lang=ES style='mso-ansi-language:ES'><o:p>&nbsp;</o:p></span></p><p class=MsoPlainText><span lang=ES style='mso-ansi-language:ES'>// Swap ID, R,
U, V<o:p></o:p></span></p><p class=MsoPlainText><span lang=ES style='mso-ansi-language:ES'><span
style="mso-spacerun:yes">††† </span></span>cout &lt;&lt; &quot;Calculate Key
... &quot; &lt;&lt; endl;</p><p class=MsoPlainText><o:p>&nbsp;</o:p></p><p class=MsoPlainText>// calculate key &#8211; a </p><p class=MsoPlainText>// Key =
Vb^wa.Ub^sa.G^[(H(IDa)*tb)%q].Rb^[(rb*ta)%q]<span style="mso-spacerun:yes">††
</span>mod p</p><p class=MsoPlainText><o:p>&nbsp;</o:p></p><p class=MsoPlainText><span style="mso-spacerun:yes">††† </span>rb=(Big)Rb%q;</p><p class=MsoPlainText><span style="mso-spacerun:yes">††† </span>A[0]=Vb;
A[1]=Ub; A[2]=G; A[3]=Rb;</p><p class=MsoPlainText><span style="mso-spacerun:yes">††† </span><span lang=FR
style='mso-ansi-language:FR'>b[0]=wa; b[1]=sa; b[2]=(H(IDb)*ta)%q;
b[3]=(rb*ta)%q;<o:p></o:p></span></p><p class=MsoPlainText><span lang=FR style='mso-ansi-language:FR'><o:p>&nbsp;</o:p></span></p><p class=MsoPlainText><span lang=FR style='mso-ansi-language:FR'><span
style="mso-spacerun:yes">††† </span></span>Key=pow(4,A,b);<span
style="mso-spacerun:yes">††† </span>// extended exponentiation</p><p class=MsoPlainText><span style="mso-spacerun:yes">††† </span>cout &lt;&lt;
&quot;Key= \n&quot; &lt;&lt; Key &lt;&lt; endl;</p><p class=MsoPlainText><o:p>&nbsp;</o:p></p><p class=MsoPlainText>// calculate key - b</p><p class=MsoPlainText><span style="mso-spacerun:yes">††† </span>ra=(Big)Ra%q;</p><p class=MsoPlainText><span style="mso-spacerun:yes">††† </span><span
lang=PT-BR style='mso-ansi-language:PT-BR'>A[0]=Va; A[1]=Ua; A[2]=G; A[3]=Ra;<o:p></o:p></span></p><p class=MsoPlainText><span lang=PT-BR style='mso-ansi-language:PT-BR'><span
style="mso-spacerun:yes">††† </span>b[0]=wb; b[1]=sb; b[2]=(H(IDa)*tb)%q;
b[3]=(ra*tb)%q;<o:p></o:p></span></p><p class=MsoPlainText><span lang=PT-BR style='mso-ansi-language:PT-BR'><o:p>&nbsp;</o:p></span></p><p class=MsoPlainText><span lang=PT-BR style='mso-ansi-language:PT-BR'><span
style="mso-spacerun:yes">††† </span></span>Key=pow(4,A,b);<span
style="mso-spacerun:yes">††† </span>// extended exponentiation</p><p class=MsoPlainText><span style="mso-spacerun:yes">††† </span>cout &lt;&lt;
&quot;Key= \n&quot; &lt;&lt; Key &lt;&lt; endl;</p><p class=MsoPlainText><span style="mso-spacerun:yes">††† </span>return 0;</p><p class=MsoPlainText>}</p><p class=MsoPlainText><o:p>&nbsp;</o:p></p><p class=MsoPlainText><o:p>&nbsp;</o:p></p><p class=MsoPlainText><span style='font-size:12.0pt;font-family:"Times New Roman"'><o:p>&nbsp;</o:p></span></p><p class=MsoPlainText><span style='font-size:12.0pt;font-family:"Times New Roman"'><o:p>&nbsp;</o:p></span></p><p class=MsoPlainText><span style='font-size:12.0pt;font-family:"Times New Roman"'>MIRACL
has evolved quite a complex class hierarchy &#8211; see the diagram below.
Where possible classes are built directly on top of the C/assembly core. Note
the support for polynomials, power series and extension fields.<br clear=all
style='page-break-before:always'></span><&#33;--[if gte vml 1]><o:wrapblock><v:shape id="_x0000_s2124" type="#_x0000_t202"
style='position:absolute;margin-left:-32.05pt;margin-top:-.05pt;width:108.1pt;
height:693.1pt;z-index:251668480;mso-wrap-distance-left:9.05pt;
mso-wrap-distance-right:9.05pt' strokeweight=".5pt"><v:fill color2="black"/><v:textbox inset="7.45pt,3.85pt,7.45pt,3.85pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal align=center style='text-align:center'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB style='font-size:
16.0pt'><o:p>&nbsp;</o:p></span></b></p><p class=MsoNormal align=center style='text-align:center'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB style='font-size:
16.0pt'><o:p>&nbsp;</o:p></span></b></p><p class=MsoNormal align=center style='text-align:center'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB style='font-size:
16.0pt'><o:p>&nbsp;</o:p></span></b></p><p class=MsoNormal align=center style='text-align:center'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB style='font-size:
16.0pt'><o:p>&nbsp;</o:p></span></b></p><p class=MsoNormal align=center style='text-align:center'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB style='font-size:
16.0pt'><o:p>&nbsp;</o:p></span></b></p><p class=MsoNormal align=center style='text-align:center'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB style='font-size:
16.0pt'><o:p>&nbsp;</o:p></span></b></p><p class=MsoNormal align=center style='text-align:center'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB style='font-size:
16.0pt'><o:p>&nbsp;</o:p></span></b></p><p class=MsoNormal align=center style='text-align:center'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB style='font-size:
16.0pt'><o:p>&nbsp;</o:p></span></b></p><p class=MsoNormal align=center style='text-align:center'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB style='font-size:
16.0pt'><o:p>&nbsp;</o:p></span></b></p><p class=MsoNormal align=center style='text-align:center'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB style='font-size:
16.0pt'><o:p>&nbsp;</o:p></span></b></p><p class=MsoNormal align=center style='text-align:center'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB style='font-size:
16.0pt'><o:p>&nbsp;</o:p></span></b></p><p class=MsoNormal align=center style='text-align:center'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB style='font-size:
16.0pt'><o:p>&nbsp;</o:p></span></b></p><p class=MsoNormal align=center style='text-align:center'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB style='font-size:
16.0pt'><o:p>&nbsp;</o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span
lang=EN-GB style='font-size:16.0pt'><o:p>&nbsp;</o:p></span></b></p><p class=MsoNormal align=center style='text-align:center'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB style='font-size:
16.0pt'><o:p>&nbsp;</o:p></span></b></p><p class=MsoNormal align=center style='text-align:center'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB style='font-size:
16.0pt'><o:p>&nbsp;</o:p></span></b></p><p class=MsoNormal align=center style='text-align:center'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB style='font-size:
16.0pt'><o:p>&nbsp;</o:p></span></b></p><p class=MsoNormal align=center style='text-align:center'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB style='font-size:
16.0pt'>MIRACL CORE<o:p></o:p></span></b></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:shape id="_x0000_s2125" type="#_x0000_t202" style='position:absolute;
margin-left:120.95pt;margin-top:-.05pt;width:72.1pt;height:27.1pt;z-index:251669504;
mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt' strokeweight=".5pt"><v:fill color2="black"/><v:textbox inset="7.45pt,3.85pt,7.45pt,3.85pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal align=center style='text-align:center'><span
lang=EN-GB style='font-size:14.0pt'>EBrick<o:p></o:p></span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:shape id="_x0000_s2126" type="#_x0000_t202" style='position:absolute;
margin-left:120.95pt;margin-top:44.95pt;width:72.1pt;height:27.1pt;z-index:251670528;
mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt' strokeweight=".5pt"><v:fill color2="black"/><v:textbox inset="7.45pt,3.85pt,7.45pt,3.85pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal align=center style='text-align:center'><span
lang=EN-GB style='font-size:14.0pt'>EBrick2<o:p></o:p></span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:shape id="_x0000_s2127" type="#_x0000_t202" style='position:absolute;
margin-left:120.95pt;margin-top:89.95pt;width:72.1pt;height:27.1pt;z-index:251671552;
mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt' strokeweight=".5pt"><v:fill color2="black"/><v:textbox inset="7.45pt,3.85pt,7.45pt,3.85pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal align=center style='text-align:center'><span
lang=EN-GB style='font-size:14.0pt'>Crt<o:p></o:p></span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:shape id="_x0000_s2128" type="#_x0000_t202" style='position:absolute;
margin-left:120.95pt;margin-top:134.95pt;width:72.1pt;height:27.1pt;
z-index:251672576;mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt'
strokeweight=".5pt"><v:fill color2="black"/><v:textbox inset="7.45pt,3.85pt,7.45pt,3.85pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal align=center style='text-align:center'><span
lang=EN-GB style='font-size:14.0pt'>EC2<o:p></o:p></span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:shape id="_x0000_s2129" type="#_x0000_t202" style='position:absolute;
margin-left:120.95pt;margin-top:188.95pt;width:72.1pt;height:27.1pt;
z-index:251673600;mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt'
strokeweight=".5pt"><v:fill color2="black"/><v:textbox inset="7.45pt,3.85pt,7.45pt,3.85pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal align=center style='text-align:center'><span
lang=EN-GB style='font-size:14.0pt'>ECn<o:p></o:p></span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:shape id="_x0000_s2130" type="#_x0000_t202" style='position:absolute;
margin-left:120.95pt;margin-top:242.95pt;width:72.1pt;height:27.1pt;
z-index:251674624;mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt'
strokeweight=".5pt"><v:fill color2="black"/><v:textbox inset="7.45pt,3.85pt,7.45pt,3.85pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal align=center style='text-align:center'><span
lang=EN-GB style='font-size:14.0pt'>Flash<o:p></o:p></span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:shape id="_x0000_s2131" type="#_x0000_t202" style='position:absolute;
margin-left:111.95pt;margin-top:323.75pt;width:77.05pt;height:27.1pt;
z-index:251675648;mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt'
strokeweight=".5pt"><v:fill color2="black"/><v:textbox inset="7.45pt,3.85pt,7.45pt,3.85pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal align=center style='text-align:center'><span
lang=EN-GB style='font-size:14.0pt'>ZZn<o:p></o:p></span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:shape id="_x0000_s2132" type="#_x0000_t202" style='position:absolute;
margin-left:233.9pt;margin-top:206.9pt;width:90.1pt;height:27.1pt;z-index:251676672;
mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt' strokeweight=".5pt"><v:fill color2="black"/><v:textbox inset="7.45pt,3.85pt,7.45pt,3.85pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal align=center style='text-align:center'><span
lang=EN-GB style='font-size:14.0pt'>ZZn2<o:p></o:p></span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:shape id="_x0000_s2133" type="#_x0000_t202" style='position:absolute;
margin-left:233.9pt;margin-top:161.9pt;width:90.1pt;height:27.1pt;z-index:251677696;
mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt' strokeweight=".5pt"><v:fill color2="black"/><v:textbox inset="7.45pt,3.85pt,7.45pt,3.85pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal align=center style='text-align:center'><span
lang=EN-GB style='font-size:14.0pt'>ZZn4<o:p></o:p></span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:shape id="_x0000_s2134" type="#_x0000_t202" style='position:absolute;
margin-left:233.9pt;margin-top:116.9pt;width:90.1pt;height:27.1pt;z-index:251678720;
mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt' strokeweight=".5pt"><v:fill color2="black"/><v:textbox inset="7.45pt,3.85pt,7.45pt,3.85pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal align=center style='text-align:center'><span
lang=EN-GB style='font-size:14.0pt'>ZZn8<o:p></o:p></span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:shape id="_x0000_s2135" type="#_x0000_t202" style='position:absolute;
margin-left:350.9pt;margin-top:206.9pt;width:90.1pt;height:27.1pt;z-index:251679744;
mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt' strokeweight=".5pt"><v:fill color2="black"/><v:textbox inset="7.45pt,3.85pt,7.45pt,3.85pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal align=center style='text-align:center'><span
lang=EN-GB style='font-size:14.0pt'>ECn2<o:p></o:p></span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:shape id="_x0000_s2136" type="#_x0000_t202" style='position:absolute;
margin-left:350.9pt;margin-top:161.9pt;width:90.1pt;height:27.1pt;z-index:251680768;
mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt' strokeweight=".5pt"><v:fill color2="black"/><v:textbox inset="7.45pt,3.85pt,7.45pt,3.85pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal align=center style='text-align:center'><span
lang=EN-GB style='font-size:14.0pt'>ECn4<o:p></o:p></span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:shape id="_x0000_s2137" type="#_x0000_t202" style='position:absolute;
margin-left:93.95pt;margin-top:512.75pt;width:77.05pt;height:27.1pt;
z-index:251681792;mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt'
strokeweight=".5pt"><v:fill color2="black"/><v:textbox inset="7.45pt,3.85pt,7.45pt,3.85pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal align=center style='text-align:center'><span
lang=EN-GB style='font-size:14.0pt'>GF2m<o:p></o:p></span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:shape id="_x0000_s2138" type="#_x0000_t202" style='position:absolute;
margin-left:93.95pt;margin-top:647.95pt;width:72.1pt;height:27.1pt;z-index:251682816;
mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt' strokeweight=".5pt"><v:fill color2="black"/><v:textbox inset="7.45pt,3.85pt,7.45pt,3.85pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal align=center style='text-align:center'><span
lang=EN-GB style='font-size:14.0pt'>Big<o:p></o:p></span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:shape id="_x0000_s2139" type="#_x0000_t202" style='position:absolute;
margin-left:206.9pt;margin-top:647.9pt;width:72.1pt;height:27.1pt;z-index:251683840;
mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt' strokeweight=".5pt"><v:fill color2="black"/><v:textbox inset="7.45pt,3.85pt,7.45pt,3.85pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal align=center style='text-align:center'><span
lang=EN-GB style='font-size:14.0pt'>Float<o:p></o:p></span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:shape id="_x0000_s2140" type="#_x0000_t202" style='position:absolute;
margin-left:305.9pt;margin-top:647.9pt;width:72.1pt;height:27.1pt;z-index:251684864;
mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt' strokeweight=".5pt"><v:fill color2="black"/><v:textbox inset="7.45pt,3.85pt,7.45pt,3.85pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal align=center style='text-align:center'><span
lang=EN-GB style='font-size:14.0pt'>Complex<o:p></o:p></span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:shape id="_x0000_s2141" type="#_x0000_t202" style='position:absolute;
margin-left:305.9pt;margin-top:602.9pt;width:72.1pt;height:27.1pt;z-index:251685888;
mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt' strokeweight=".5pt"><v:fill color2="black"/><v:textbox inset="7.45pt,3.85pt,7.45pt,3.85pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal align=center style='text-align:center'><span
lang=EN-GB style='font-size:14.0pt'>FPoly<o:p></o:p></span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:shape id="_x0000_s2142" type="#_x0000_t202" style='position:absolute;
margin-left:206.9pt;margin-top:602.9pt;width:72.1pt;height:27.1pt;z-index:251686912;
mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt' strokeweight=".5pt"><v:fill color2="black"/><v:textbox inset="7.45pt,3.85pt,7.45pt,3.85pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal align=center style='text-align:center'><span
lang=EN-GB style='font-size:14.0pt'>Ps_Big<o:p></o:p></span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:line id="_x0000_s2143" style='position:absolute;flip:x;z-index:251687936'
from="162pt,612pt" to="207pt,9in" strokeweight=".26mm"><v:stroke endarrow="block" joinstyle="miter"/></v:line><v:line id="_x0000_s2144" style='position:absolute;flip:x;z-index:251688960'
from="171pt,657pt" to="207pt,657pt" strokeweight=".26mm"><v:stroke endarrow="block" joinstyle="miter"/></v:line><v:line id="_x0000_s2145" style='position:absolute;flip:x;z-index:251689984'
from="279pt,657pt" to="306pt,657pt" strokeweight=".26mm"><v:stroke endarrow="block" joinstyle="miter"/></v:line><v:line id="_x0000_s2146" style='position:absolute;flip:x;z-index:251691008'
from="270pt,612pt" to="306pt,9in" strokeweight=".26mm"><v:stroke endarrow="block" joinstyle="miter"/></v:line><v:shape id="_x0000_s2147" type="#_x0000_t202" style='position:absolute;
margin-left:206.9pt;margin-top:512.9pt;width:72.1pt;height:27.1pt;z-index:251692032;
mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt' strokeweight=".5pt"><v:fill color2="black"/><v:textbox inset="7.45pt,3.85pt,7.45pt,3.85pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal align=center style='text-align:center'><span
lang=EN-GB style='font-size:14.0pt'>Poly2<o:p></o:p></span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:shape id="_x0000_s2148" type="#_x0000_t202" style='position:absolute;
margin-left:206.9pt;margin-top:557.9pt;width:72.1pt;height:27.1pt;z-index:251693056;
mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt' strokeweight=".5pt"><v:fill color2="black"/><v:textbox inset="7.45pt,3.85pt,7.45pt,3.85pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal align=center style='text-align:center'><span
lang=EN-GB style='font-size:14.0pt'>Poly2XY<o:p></o:p></span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:shape id="_x0000_s2149" type="#_x0000_t202" style='position:absolute;
margin-left:206.9pt;margin-top:467.9pt;width:72.1pt;height:27.1pt;z-index:251694080;
mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt' strokeweight=".5pt"><v:fill color2="black"/><v:textbox inset="7.45pt,3.85pt,7.45pt,3.85pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal align=center style='text-align:center'><span
lang=EN-GB style='font-size:14.0pt'>GF2m4x<o:p></o:p></span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:line id="_x0000_s2150" style='position:absolute;flip:x;z-index:251695104'
from="162pt,486pt" to="207pt,513pt" strokeweight=".26mm"><v:stroke endarrow="block" joinstyle="miter"/></v:line><v:line id="_x0000_s2151" style='position:absolute;flip:x;z-index:251696128'
from="171pt,522pt" to="207pt,522pt" strokeweight=".26mm"><v:stroke endarrow="block" joinstyle="miter"/></v:line><v:line id="_x0000_s2152" style='position:absolute;flip:x y;
z-index:251697152' from="162pt,540pt" to="207pt,567pt" strokeweight=".26mm"><v:stroke endarrow="block" joinstyle="miter"/></v:line><v:shape id="_x0000_s2153" type="#_x0000_t202" style='position:absolute;
margin-left:305.9pt;margin-top:512.9pt;width:81.1pt;height:27.1pt;z-index:251698176;
mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt' strokeweight=".5pt"><v:fill color2="black"/><v:textbox inset="7.45pt,3.85pt,7.45pt,3.85pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal align=center style='text-align:center'><span
lang=EN-GB style='font-size:14.0pt'>Poly2Mod<o:p></o:p></span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:line id="_x0000_s2154" style='position:absolute;flip:x;z-index:251699200'
from="279pt,522pt" to="306pt,522pt" strokeweight=".26mm"><v:stroke endarrow="block" joinstyle="miter"/></v:line><v:line id="_x0000_s2155" style='position:absolute;z-index:251700224'
from="279pt,2in" to="279pt,162pt" strokeweight=".26mm"><v:stroke endarrow="block" joinstyle="miter"/></v:line><v:line id="_x0000_s2156" style='position:absolute;z-index:251701248'
from="279pt,189pt" to="279pt,207pt" strokeweight=".26mm"><v:stroke endarrow="block" joinstyle="miter"/></v:line><v:line id="_x0000_s2157" style='position:absolute;flip:x;z-index:251702272'
from="324pt,171pt" to="351pt,171pt" strokeweight=".26mm"><v:stroke endarrow="block" joinstyle="miter"/></v:line><v:line id="_x0000_s2158" style='position:absolute;flip:x;z-index:251703296'
from="324pt,3in" to="351pt,3in" strokeweight=".26mm"><v:stroke endarrow="block" joinstyle="miter"/></v:line><v:line id="_x0000_s2159" style='position:absolute;flip:x;z-index:251704320'
from="180pt,234pt" to="279pt,324pt" strokeweight=".26mm"><v:stroke endarrow="block" joinstyle="miter"/></v:line><v:line id="_x0000_s2160" style='position:absolute;flip:x;z-index:251705344'
from="76.05pt,9.05pt" to="121.05pt,9.05pt" strokeweight=".26mm"><v:stroke endarrow="block" joinstyle="miter"/></v:line><v:line id="_x0000_s2161" style='position:absolute;flip:x;z-index:251706368'
from="76.05pt,54.05pt" to="121.05pt,54.05pt" strokeweight=".26mm"><v:stroke endarrow="block" joinstyle="miter"/></v:line><v:line id="_x0000_s2162" style='position:absolute;flip:x;z-index:251707392'
from="76.05pt,99.05pt" to="121.05pt,99.05pt" strokeweight=".26mm"><v:stroke endarrow="block" joinstyle="miter"/></v:line><v:line id="_x0000_s2163" style='position:absolute;flip:x;z-index:251708416'
from="76.05pt,144.05pt" to="121.05pt,144.05pt" strokeweight=".26mm"><v:stroke endarrow="block" joinstyle="miter"/></v:line><v:line id="_x0000_s2164" style='position:absolute;flip:x;z-index:251709440'
from="76.05pt,198.05pt" to="121.05pt,198.05pt" strokeweight=".26mm"><v:stroke endarrow="block" joinstyle="miter"/></v:line><v:line id="_x0000_s2165" style='position:absolute;flip:x;z-index:251710464'
from="76.05pt,252.05pt" to="121.05pt,252.05pt" strokeweight=".26mm"><v:stroke endarrow="block" joinstyle="miter"/></v:line><v:line id="_x0000_s2166" style='position:absolute;flip:x;z-index:251711488'
from="76.05pt,333.05pt" to="112.05pt,333.25pt" strokeweight=".26mm"><v:stroke endarrow="block" joinstyle="miter"/></v:line><v:line id="_x0000_s2167" style='position:absolute;flip:x;z-index:251712512'
from="76.05pt,522.05pt" to="94.05pt,522.25pt" strokeweight=".26mm"><v:stroke endarrow="block" joinstyle="miter"/></v:line><v:line id="_x0000_s2168" style='position:absolute;flip:x;z-index:251713536'
from="76.05pt,657.05pt" to="94.05pt,657.25pt" strokeweight=".26mm"><v:stroke endarrow="block" joinstyle="miter"/></v:line><v:shape id="_x0000_s2169" type="#_x0000_t202" style='position:absolute;
margin-left:233.9pt;margin-top:278.9pt;width:72.1pt;height:27.1pt;z-index:251714560;
mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt' strokeweight=".5pt"><v:fill color2="black"/><v:textbox inset="7.45pt,3.85pt,7.45pt,3.85pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal align=center style='text-align:center'><span
lang=EN-GB style='font-size:14.0pt'>PolyXY<o:p></o:p></span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:shape id="_x0000_s2170" type="#_x0000_t202" style='position:absolute;
margin-left:233.9pt;margin-top:323.9pt;width:72.1pt;height:27.1pt;z-index:251715584;
mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt' strokeweight=".5pt"><v:fill color2="black"/><v:textbox inset="7.45pt,3.85pt,7.45pt,3.85pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal align=center style='text-align:center'><span
lang=EN-GB style='font-size:14.0pt'>Poly<o:p></o:p></span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:shape id="_x0000_s2171" type="#_x0000_t202" style='position:absolute;
margin-left:233.9pt;margin-top:377.9pt;width:72.1pt;height:27.1pt;z-index:251716608;
mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt' strokeweight=".5pt"><v:fill color2="black"/><v:textbox inset="7.45pt,3.85pt,7.45pt,3.85pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal align=center style='text-align:center'><span
lang=EN-GB style='font-size:14.0pt'>Ps_ZZn<o:p></o:p></span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:line id="_x0000_s2172" style='position:absolute;flip:x;z-index:251717632'
from="189pt,333pt" to="234pt,333pt" strokeweight=".26mm"><v:stroke endarrow="block" joinstyle="miter"/></v:line><v:line id="_x0000_s2173" style='position:absolute;flip:x;z-index:251718656'
from="189pt,4in" to="234pt,324pt" strokeweight=".26mm"><v:stroke endarrow="block" joinstyle="miter"/></v:line><v:line id="_x0000_s2174" style='position:absolute;flip:x y;
z-index:251719680' from="189pt,351pt" to="234pt,387pt" strokeweight=".26mm"><v:stroke endarrow="block" joinstyle="miter"/></v:line><v:shape id="_x0000_s2175" type="#_x0000_t202" style='position:absolute;
margin-left:350.9pt;margin-top:323.9pt;width:72.1pt;height:27.1pt;z-index:251720704;
mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt' strokeweight=".5pt"><v:fill color2="black"/><v:textbox inset="7.45pt,3.85pt,7.45pt,3.85pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal align=center style='text-align:center'><span
lang=EN-GB style='font-size:14.0pt'>PolyMod<o:p></o:p></span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:line id="_x0000_s2176" style='position:absolute;flip:x;z-index:251721728'
from="306pt,333pt" to="351pt,333pt" strokeweight=".26mm"><v:stroke endarrow="block" joinstyle="miter"/></v:line><v:shape id="_x0000_s2177" type="#_x0000_t202" style='position:absolute;
margin-left:345.95pt;margin-top:422.95pt;width:77.05pt;height:27.1pt;
z-index:251722752;mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt'
strokeweight=".5pt"><v:fill color2="black"/><v:textbox inset="7.45pt,3.85pt,7.45pt,3.85pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal><span lang=EN-GB style='font-size:14.0pt'>Variable<o:p></o:p></span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><&#33;[endif]--><&#33;[if &#33;vml]><span style='mso-ignore:vglayout;position:
relative;z-index:251668480'><span style='position:absolute;left:-35px;
top:-19px;width:476px;height:696px'><img width=476 height=696
src="manual_files/image024.gif" v:shapes="_x0000_s2124 _x0000_s2125 _x0000_s2126 _x0000_s2127 _x0000_s2128 _x0000_s2129 _x0000_s2130 _x0000_s2131 _x0000_s2132 _x0000_s2133 _x0000_s2134 _x0000_s2135 _x0000_s2136 _x0000_s2137 _x0000_s2138 _x0000_s2139 _x0000_s2140 _x0000_s2141 _x0000_s2142 _x0000_s2143 _x0000_s2144 _x0000_s2145 _x0000_s2146 _x0000_s2147 _x0000_s2148 _x0000_s2149 _x0000_s2150 _x0000_s2151 _x0000_s2152 _x0000_s2153 _x0000_s2154 _x0000_s2155 _x0000_s2156 _x0000_s2157 _x0000_s2158 _x0000_s2159 _x0000_s2160 _x0000_s2161 _x0000_s2162 _x0000_s2163 _x0000_s2164 _x0000_s2165 _x0000_s2166 _x0000_s2167 _x0000_s2168 _x0000_s2169 _x0000_s2170 _x0000_s2171 _x0000_s2172 _x0000_s2173 _x0000_s2174 _x0000_s2175 _x0000_s2176 _x0000_s2177"></span></span><&#33;[endif]><&#33;--[if gte vml 1]></o:wrapblock><&#33;[endif]--><span
lang=EN-IE style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:"Times New Roman";
mso-ansi-language:EN-IE'><o:p>&nbsp;</o:p></span></p><p class=MsoPlainText><br clear=all style='page-break-before:always'><o:p>&nbsp;</o:p></p><br style='mso-ignore:vglayout' clear=ALL><h1 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level1 lfo1;tab-stops:
0cm'><a name="_toc1370"></a><&#33;[if &#33;supportLists]><span lang=EN-GB
style='mso-fareast-font-family:Arial;mso-bidi-font-family:Arial'><span
style='mso-list:Ignore'>8.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>Example Programs</span></h1><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Note: The programs described here are of an
experimental nature, and in many cases are not completely ëfinished offí. For
further information read the comments associated with the appropriate source
file.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h2 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level2 lfo1;tab-stops:
0cm'><a name="_toc1374"></a><&#33;[if &#33;supportLists]><span lang=EN-GB
style='mso-fareast-font-family:Arial;mso-bidi-font-family:Arial'><span
style='mso-list:Ignore'>8.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>Simple Programs</span></h2><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc1376"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>8.1.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>hail.c</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>This program allows you to investigate
so-called hailstone numbers, as described by Gruenberger [Gruen]. The procedure
is simple. Starting with any number apply the following rules:</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>(a) <span style='mso-tab-count:1'>†††††† </span>If
it is odd, multiply it by 3 and add 1.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>(b) <span style='mso-tab-count:1'>††††† </span>If
it is even, divide it by 2.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>(c) <span style='mso-tab-count:1'>†††††† </span>Repeat
the process, until the number becomes equal to 1, in which case stop. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>It would appear that for any initial number
this process always eventually terminates, although it has not been proved that
this must happen, or that the process cannot get stuck in an infinite loop.
What goes up, it seems, must come down. Try the program for an initial value of
27. Then try it using much bigger numbers, like 10709980568908647 (which has
interesting behaviour).</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc1388"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>8.1.2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>palin.c</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>This programs allows one to investigate
palindromic reversals [Gruen]. A palindromic number is one which reads the same
in both directions. Start with any number and apply the following rules. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:35.45pt;text-indent:-35.45pt'><span
lang=EN-GB>(a) <span style='mso-tab-count:1'>††††† </span>Add the number to the
number obtained by reversing the order of the digits. Make this the new number.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>(b) <span style='mso-tab-count:1'>††††† </span>Stop
the process when the new number is palindromic.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>It appears that for most initial numbers
this process quickly terminates. Try it for 89. Then try it for 196.<br
clear=all style='page-break-before:always'><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc1399"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>8.1.3<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>mersenne.c</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>This program attempts to generate all prime
numbers of the form 2<sup>n</sup>-1. The largest known primes have always been
of this form because of the efficiency of this Lucas-Lehmer test. The routine <b
style='mso-bidi-font-weight:normal'>fft_mult</b> is used, as it is faster for
very large numbers.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h2 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level2 lfo1;tab-stops:
0cm'><a name="_toc1403"></a><&#33;[if &#33;supportLists]><span lang=EN-GB
style='mso-fareast-font-family:Arial;mso-bidi-font-family:Arial'><span
style='mso-list:Ignore'>8.2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>Factoring Programs</span></h2><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Six different Integer Factorisation
programs are included, covering all modern approaches to this classical
problem. For more background and information on the algorithms used, see
[Scott89c].</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc1407"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>8.2.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>brute.c</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>This program attempts to factorise a number
by brute force division, using a table of small prime numbers. When attempting
a difficult factorisation it makes sense to try this approach first. Factorise
12345678901234567890 using this program. Then try it on bigger random numbers.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc1411"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>8.2.2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>brent.c</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>This program attempts to factorise a number
using the Brent-Pollard method. This method is faster at finding larger factors
than the simple-minded brute force approach. However it will not always
succeed, even for simple factorisations. Use it to factorise R17, that is
11111111111111111 (seventeen ones). Then try it on larger numbers that would
not yield to the brute force approach.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc1415"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>8.2.3<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>pollard.c</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Another factoring program, which implements
Pollard's<i style='mso-bidi-font-style:normal'> (p-1)</i> method, specialises
in quickly finding a factor <i style='mso-bidi-font-style:normal'>p</i> of a
number <i style='mso-bidi-font-style:normal'>N</i> for which <i
style='mso-bidi-font-style:normal'>(p-1)</i> has itself only small factors.
Phase 1 of this method will work if all these small factors are less than
LIMIT1. If Phase 1 fails then Phase 2 searches for just one final larger factor
less than </span></p><p class=MsoNormal><span lang=EN-GB>LIMIT2. The constants LIMIT1 and LIMIT2 are
set inside the program. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc1420"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>8.2.4<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>williams.c</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>This program is similar to Pollards method,
but can find a factor <i style='mso-bidi-font-style:normal'>p</i> of <i
style='mso-bidi-font-style:normal'>N</i> for which <i style='mso-bidi-font-style:
normal'>(p+1)</i> has only small factors. Again two phases are used. In fact
this method is sometimes a <i style='mso-bidi-font-style:normal'>(p+1)</i>
method, and sometimes a <i style='mso-bidi-font-style:normal'>(p-1)</i> method,
so several attempts are made to hit on the <i style='mso-bidi-font-style:normal'>(p+1)</i>
condition. The algorithm is rather more complex than that used in Pollards
method, and is somewhat slower. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc1424"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>8.2.5<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>lenstra.c</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Lenstra [Monty87] has discovered a new
method of factorisation, generically similar to the Pollard and Williams methods,
but potentially much more powerful. It works by randomly generating an Elliptic
Curve, which can then be used to find a factor <i style='mso-bidi-font-style:
normal'>p</i> of<i style='mso-bidi-font-style:normal'> N</i>, for which <i
style='mso-bidi-font-style:normal'>p+1-</i></span><i style='mso-bidi-font-style:
normal'><span lang=EN-GB style='font-family:Symbol'>d</span></i><span
lang=EN-GB> has only small factors, where </span><span lang=EN-GB
style='font-family:Symbol'>d</span><span lang=EN-GB> depends on the particular
curve chosen. If one curve fails then another can be tried, an option not
possible with the Pollard/Williams methods. Again this is a two phase method,
and although it has very good asymptotic behaviour, it is much slower than the
Pollard/Williams methods for each iteration. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc1428"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>8.2.6<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>qsieve.c</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>This is a sophisticated
Pomerance-Silverman-Montgomery [Pomerance], [Silverman] factoring program.
which factors F7 = 2<sup>128</sup>+1</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB>340282366920938463463374607431768211457
</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>in less than 30 seconds, running on a 60MHz
Pentium-based computer. When this number was first factored, it took 90 minutes
on an IBM 360 mainframe (Morrison &amp; Brillhart [Morrison]), albeit using a
somewhat inferior algorithm. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Its speciality is factoring all numbers (up
to about sixty digits long), irrespective of the size of the factors. If the
number to be factored is <i style='mso-bidi-font-style:normal'>N</i>, then the
program actually works with a number <i style='mso-bidi-font-style:normal'>k.N</i>,
where <i style='mso-bidi-font-style:normal'>k</i> is a small Knuth-Schroepel
multiplier. The program itself works out the best value of <i style='mso-bidi-font-style:
normal'>k</i> to use. Internally, the program uses a ëfactor baseí of small
primes. The larger the number, the bigger will be this factor base. The program
works by accumulating information from a number of simpler factorisations. As
it progresses with these it prints out <i style='mso-bidi-font-style:normal'>working...n</i>.
When it thinks it has enough information it prints out <i style='mso-bidi-font-style:
normal'>trying</i>, but these tries may be premature and may not succeed. The
program will always terminate before the number <i style='mso-bidi-font-style:
normal'>n</i> in <i style='mso-bidi-font-style:normal'>working...n</i> reaches
the size of the factor base.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>This program uses much more memory than any
of the other example programs, particularly when factoring bigger numbers. The
amount of memory that the program can take is limited by the values defined for
MEM, MLF and SSIZE at the beginning of the program. These limit the number of
primes in the factor base, the number of ëlargerí primes used by the so-called
large-prime variation of the algorithm, and the sieve size respectively. They
should be increased if possible, or reduced if your computer has insufficient
memory. See [Silverman] for more details.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Use <b style='mso-bidi-font-weight:normal'>qsieve</b>
to factor 10000000000000000000000000000000009 (thirty-five digits).<br
clear=all style='page-break-before:always'><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc1442"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>8.2.7<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>factor.c</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>This program combines the above algorithms
into a single general purpose program for factoring integers. Each method is
used in turn in the attempt to extract factors. The number to be factored is
given in the command line, as in <b style='mso-bidi-font-weight:normal'>factor
11111111111</b>. The number can alternatively be specified as a formula, using
the switch ë-fí, as in<span style="mso-spacerun:yes">†††††† </span><b
style='mso-bidi-font-weight:normal'>factor -f (10#11-1)/9</b>. The symbol #
here means ëto the power ofí (# is used instead of ^ as the latter symbol has a
special meaning for DOS on an IBM PC). Type <b style='mso-bidi-font-weight:
normal'>factor</b> on its own for a full description of this and other switches
that can be used to control the input/output of this program.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h2 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level2 lfo1;tab-stops:
0cm'><a name="_toc1447"></a><&#33;[if &#33;supportLists]><span lang=EN-GB
style='mso-fareast-font-family:Arial;mso-bidi-font-family:Arial'><span
style='mso-list:Ignore'>8.3<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>Discrete Logarithm Programs</span></h2><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Two programs implement Pollards algorithms
[Pollard78] for extracting discrete logarithms. The discrete logarithm problem
is to find <i style='mso-bidi-font-style:normal'>x</i> given <i
style='mso-bidi-font-style:normal'>y</i>,<i style='mso-bidi-font-style:normal'>
r</i> and <i style='mso-bidi-font-style:normal'>n</i> in</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal align=center style='text-align:center'><span lang=EN-GB><span
style='position:relative;top:10.0pt;mso-text-raise:-10.0pt'><&#33;--[if gte vml 1]><v:shape
id="_x0000_i1031" type="#_x0000_t75" style='width:110pt;height:33pt' o:ole=""
filled="t"><v:fill color2="black"/><v:imagedata src="manual_files/image025.emz" o:title=""/><v:textbox inset="0,0,0,0"/></v:shape><&#33;[endif]--><&#33;[if &#33;vml]><img border=0 width=112 height=35
src="manual_files/image026.gif" v:shapes="_x0000_i1031"><&#33;[endif]></span><&#33;--[if gte mso 9]><xml><o:OLEObject Type="Embed" ProgID="Equation.2" ShapeID="_x0000_i1031"
DrawAspect="Content" ObjectID="_1307025233"></o:OLEObject></xml><&#33;[endif]--></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>The above is a good example of a one-way
function. It is easy to calculate <i style='mso-bidi-font-style:normal'>y</i>
given <i style='mso-bidi-font-style:normal'>x</i>, but apparently extremely
difficult to find <i style='mso-bidi-font-style:normal'>x </i>given <i
style='mso-bidi-font-style:normal'>y</i>. Pollard's algorithms however perform
quite well under certain circumstances, if <i style='mso-bidi-font-style:normal'>x</i>
is known to be small or if <i style='mso-bidi-font-style:normal'>n</i> is a
prime <i style='mso-bidi-font-style:normal'>p</i> for which <i
style='mso-bidi-font-style:normal'>p-1</i> has only small factors.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc1455"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>8.3.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>kangaroo.c</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>This program finds <i style='mso-bidi-font-style:
normal'>x</i> in the above, assuming that <i style='mso-bidi-font-style:normal'>x</i>
is quite small. The value of <i style='mso-bidi-font-style:normal'>r</i> is
fixed (at 16), and the modulus <i style='mso-bidi-font-style:normal'>n</i> is
also fixed inside the program. Initially a ëtrapí is set. Subsequently the
discrete logarithm can be found (almost certainly) for any number, assuming its
discrete logarithm is less than a certain upper limit. The number of steps
required will be approximately the square root of this limit.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc1459"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>8.3.2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>genprime.c</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>A prime number <i style='mso-bidi-font-style:
normal'>p</i> with known factorisation of <i style='mso-bidi-font-style:normal'>p-1</i>
is generated by this program, for use by the <i style='mso-bidi-font-style:
normal'>index.c</i> and <i style='mso-bidi-font-style:normal'>identity.c </i>programs
described below. The factors of <i style='mso-bidi-font-style:normal'>p-1</i>
are output to a file <i style='mso-bidi-font-style:normal'>prime.dat</i>.<br
clear=all style='page-break-before:always'><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc1463"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>8.3.3<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>index.c</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>This program implements Pollard's rho
algorithm for extracting discrete logarithms, when the modulus <i
style='mso-bidi-font-style:normal'>n</i> in the above equation is a prime<i
style='mso-bidi-font-style:normal'> p</i>, and when<i style='mso-bidi-font-style:
normal'> p-1</i> has only relatively small factors. The number of steps
required is a function of the square root of the largest of these factors. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h2 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level2 lfo1;tab-stops:
0cm'><a name="_toc1467"></a><&#33;[if &#33;supportLists]><span lang=EN-GB
style='mso-fareast-font-family:Arial;mso-bidi-font-family:Arial'><span
style='mso-list:Ignore'>8.4<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>Public-Key Cryptography</span></h2><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Public Key Cryptography is a two key
cryptographic system with the very desirable feature that the encoding key can
be made publicly available, without weakening the strength of the cipher. The
first example program demonstrates many popular public-key techniques. Then two
functional Public-Key cryptography systems, whose strength appears to depend on
the difficulty of factorisation, are presented. The first is the classic RSA
system (Rivest, Shamir &amp; Adleman [RSA]). This is fast to encode a message,
but painfully slow at decoding. A much faster technique has been invented by
Blum and Goldwasser. This probabilistic Public Key system is also stronger than
RSA in some senses. For more details see [Brassard], who describes it as ëthe
best that academia has had to offer thus farí. For both methods the keys are
constructed from ëstrongí primes to enhance security. Closely associated with
PK Cryptography, is the concept of the Digital Signature.<span
style="mso-spacerun:yes">† </span>A group of example programs implement the
Digital Signature Standard, using classic finite fields and elliptic curves
over both the fields GF(<i style='mso-bidi-font-style:normal'>p</i>) and GF(2<i
style='mso-bidi-font-style:normal'><sup>m</sup></i>).</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc1471"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>8.4.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>pk-demo.c</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>This program carries out a 1024-bit
Diffie-Hellman key exchange, and then another Diffie-Hellman type key exchange,
but this time based on a 160-bit prime and an elliptic curve. Next a test
string is encrypted and decrypted using the El Gamal method. The program
finishes with a 1024 bit RSA encryption/decryption of the same string. For a
good description of all these techniques see [Stinson]. Anyone attempting to
implement a PK system using MIRACL is strongly encouraged to examine this file,
and its C++ counter-part <b style='mso-bidi-font-weight:normal'>pk-demo.cpp<o:p></o:p></b></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc1475"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>8.4.2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>bmark.c/imratio.c</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>The benchmarking program <i
style='mso-bidi-font-style:normal'>bmark.c </i>allows the user to quickly
determine the time that will be required to implement any of the popular public
key methods. It can be compiled and linked with any of the variants of the
MIRACL library, as specified in <i style='mso-bidi-font-style:normal'>mirdef.h</i>,
to determine which gives the best performance on a particular platform for a
particular PK method. The program <i style='mso-bidi-font-style:normal'>imratio.c</i>
when compiled and run calculates the significant ratios S/M, I/M and J/M, where
S is the time for a modular squaring, M the time for a modular multiplication,
I the time for a modular inversion, and J the time for a Jacobi symbol
calculation.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc1479"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>8.4.3<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>genkey.c</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>This program generates the ëpublicí
encoding key and ëprivateí decoding keys that are necessary for both the
original Rivest-Shamir-Adleman PK system and the superior Blum-Goldwasser
method [Brassard]. These keys can take a long time to generate, as they are
formed from very large prime numbers, which must be generated carefully for
maximum security.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>The size of each prime in bits is set
inside the program by a </span><span lang=EN-GB style='font-family:Courier'>#define</span><span
lang=EN-GB>. The security of the system depends on the difficulty of factoring
the encoding ëpublicí key, which is formed from two such large primes. The
largest numbers which can be routinely factored using hundreds of powerful
computers are 430 bits long (1996). So a minimum size of 512 bits for each
prime gives plenty of security (for now&#33;) </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>After this program has run, the two keys
are created in files PUBLIC.KEY and PRIVATE.KEY.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc1487"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>8.4.4<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>encode.c</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Messages or files may be encoded with this
program, which uses the ëpublicí encoding key from the file PUBLIC.KEY,
generated by the program <i style='mso-bidi-font-style:normal'>genkey</i>,
which must have been run prior to using this program. When run, the user is
prompted for a file to encipher. Either supply the name of a text file, or
press return to enter a message directly from the keyboard. In the former case
the encoded output is sent to a file with the same name, but with the extension
.RSA. In the latter case a prompt is issued for an output filename, which must
be given. Text entered from the keyboard must be terminated by a CONTROL-Z
(end-of-file character). Type out the encoded file and be impressed by how
indecipherable it looks. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc1491"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>8.4.5<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>decode.c</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Messages or files encoded using the RSA
system may be decoded using this program, which uses the ëprivateí decoding key
from the file PRIVATE.KEY generated by the program <i style='mso-bidi-font-style:
normal'>genkey</i> which must have been run at some stage prior to using this
program.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>When run, the user is prompted for the name
of the file to be decoded. Type in the filename (without an extension - the
program will assume the extension .RSA) and press return. Then the user is
asked for an output filename. Either supply a filename or press return, in
which case the decoded output will be sent straight to the screen. A problem
with the RSA system becomes immediately apparent - decoding takes quite a
relatively long time&#33; This is particularly true for larger key sizes and long
messages.<br clear=all style='page-break-before:always'><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc1497"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>8.4.6<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>enciph.c</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>This program works in an identical fashion
to the program ëencodeí, except that it prompts for a random seed before
encrypting the data. This random seed is then used internally to generate a
larger random number. The encryption process depends on this random number,
which means that the same data will not necessarily produce the same
cipher-text, which is one of the strengths of this approach. As well as
creating a file with a .BLG extension containing the encrypted data, a second
small file (with the .KEY extension) is also produced.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc1501"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>8.4.7<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>deciph.c</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>This program works in an identical fashion
to the program ëdecodeí. However it has the advantage that it runs much more
quickly. There will be a significant initial delay while a rather complex
calculation is carried out. This uses the private key and the data in the .KEY
file to recover the large random number used in the encryption process.
Thereafter deciphering is as fast as encipherment.</span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc1504"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>8.4.8<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>dssetup.c</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>A standard method for digital signature has
been proposed by the American National Institute of Standards and Technology
(NIST), and fully described in the Digital Signature Standard [DSS]. This
program generates a prime <i style='mso-bidi-font-style:normal'>q</i>, another
much larger prime <i style='mso-bidi-font-style:normal'>p=2nq+</i>1, (where <i
style='mso-bidi-font-style:normal'>n</i> is random) and a generator <i
style='mso-bidi-font-style:normal'>g</i>. This information is made common to
all. This program generates the common information {<i style='mso-bidi-font-style:
normal'>p,q,g</i>}<i style='mso-bidi-font-style:normal'></i>into a file <i
style='mso-bidi-font-style:normal'>common.dss<o:p></o:p></i></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc1508"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>8.4.9<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>limlee.c</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>It has been shown by Lim &amp; Lee [LimLee]
that for certain Discrete Logarithm based protocols (but not for the Digital
Signature Standard) there is a weakness associated with primes of the kind
generated by the <i style='mso-bidi-font-style:normal'>dssetup.c</i> program
described above. To avoid these problems they recommend that <i
style='mso-bidi-font-style:normal'>p</i> is of the form <i style='mso-bidi-font-style:
normal'>p=2.p<sub>1</sub>.p<sub>2</sub>.p<sub>3</sub>Öq + </i>1, where the <i
style='mso-bidi-font-style:normal'>p<sub>i</sub></i>are primes greater than <i
style='mso-bidi-font-style:normal'>q</i>.<i style='mso-bidi-font-style:normal'></i>This program generates the values (<i style='mso-bidi-font-style:normal'>p,q,g</i>)
into a file <i style='mso-bidi-font-style:normal'>common.dss</i>, and can be
used in place of <i style='mso-bidi-font-style:normal'>dssetup.c</i>. It is a
little slower.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc1512"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>8.4.10<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>dssgen.c</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Each individual user who wishes to
digitally sign a computer file randomly generates their own private key <i
style='mso-bidi-font-style:normal'>x&lt;q</i> and makes available a public key <i
style='mso-bidi-font-style:normal'>y=g<sup>x</sup> mod p. </i>The security of
the system depends on the sizes of <i style='mso-bidi-font-style:normal'>p</i>
and <i style='mso-bidi-font-style:normal'>q</i> (at least 512 bits and 160 bits
respectively). This program generates a single public/private key pair in the
files <i style='mso-bidi-font-style:normal'>public.dss</i> and <i
style='mso-bidi-font-style:normal'>private.dss</i> respectively.<br clear=all
style='page-break-before:always'><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc1516"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>8.4.11<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>dssign.c</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>This program uses the private key from <i
style='mso-bidi-font-style:normal'>private.dss</i> to ësigní a document stored
in a file. First the file data is ëhashedí down to a 160 bit number using SHA,
the Standard Hash Algorithm. This is also specified by the NIST and is
implemented in the provided module <i style='mso-bidi-font-style:normal'>mrshs.c</i>.
The 160-bit hash is duly ësignedí as described in [DSS], and the signature, in
the form of two 160-bit numbers, written out to a file. This file has the same
name as the document file, but with the extension <i style='mso-bidi-font-style:
normal'>.dss</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc1520"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>8.4.12<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>dssver.c</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>This program uses the public key from <i
style='mso-bidi-font-style:normal'>public.dss</i> to verify the signature
associated with a file, as described in [DSS].</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc1524"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>8.4.13<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>ecsgen.c, ecsign.c, ecsver.c</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>The Digital Signature technique can also be
implemented using Elliptic Curves over the field GF(<i style='mso-bidi-font-style:
normal'>p</i>)[Jurisic]. Common domain information in the order {<i
style='mso-bidi-font-style:normal'>p</i>,<i style='mso-bidi-font-style:normal'>A,B,q,X,Y</i>}is
extracted from the file <i style='mso-bidi-font-style:normal'>common.ecs</i>
created using one of the point-counting algorithms described below. These
values specify an initial point (<i style='mso-bidi-font-style:normal'>X,Y</i>)
on an elliptic curve <i style='mso-bidi-font-style:normal'>y<sup>2</sup>=x<sup>3</sup>+Ax+B
</i>mod<i style='mso-bidi-font-style:normal'> p</i> which has <i
style='mso-bidi-font-style:normal'>q</i> points on it. The advantages are a
much smaller public key for the same level of security. Smaller numbers can be
used as the discrete logarithm problem is apparently much more difficult in the
context of an elliptic curve. This in turn implies that elliptic curve
arithmetic is also potentially faster. However the use of smaller numbers is
somewhat offset by the more complex calculations involved.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>This set of programs has the same
functionality as those described above for the standard DSS. Note however that
the file extension <i style='mso-bidi-font-style:normal'>.ecs</i> is used for
all the generated files. Read the comments in the source files for more
information.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc1530"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>8.4.14<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>ecsgen2.c, ecsign2.c,
ecsver2.cpp</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>These programs provide the same
functionality as those provided above, but use elliptic curves defined over the
field GF(2<i style='mso-bidi-font-style:normal'><sup>m</sup></i>). Domain
information in this case is extracted from the file <i style='mso-bidi-font-style:
normal'>common2.ecs</i> in the order {<i style='mso-bidi-font-style:normal'>m,A,B,q,X,Y,a,b,c</i>},
where (<i style='mso-bidi-font-style:normal'>X,Y</i>) specifies an initial
point on the elliptic curve <i style='mso-bidi-font-style:normal'>y<sup>2</sup>=x<sup>3</sup>+Ax<sup>2</sup>+B</i>
defined over GF(2<i style='mso-bidi-font-style:normal'><sup>m</sup></i>). The
parameters of a trinomial or pentanomial basis are also specified, <i
style='mso-bidi-font-style:normal'>t<sup>m</sup>+t<sup>a</sup>+1 </i>or<i
style='mso-bidi-font-style:normal'> t<sup>m</sup>+t<sup>a</sup>+t<sup>b</sup>+t<sup>c</sup>+1</i>
respectively. In the former case <i style='mso-bidi-font-style:normal'>b</i>
and <i style='mso-bidi-font-style:normal'>c</i> are zero. Finally <i
style='mso-bidi-font-style:normal'>cf.q</i> specifies the number of points on
the curve, the product of a large prime factor <i style='mso-bidi-font-style:
normal'>q</i> and a small cofactor <i style='mso-bidi-font-style:normal'>cf.</i>
The latter is normally 2 or 4. The file <i style='mso-bidi-font-style:normal'>common2.ecs</i>
can be created by the <b style='mso-bidi-font-weight:normal'>schoof2</b>
program described below.<br clear=all style='page-break-before:always'><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc1534"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>8.4.15<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>cm.cpp, schoof.cpp,
mueller.cpp, process.cpp, sea.cpp, schoof2.cpp</span></h3><p class=MsoIndexHeading><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>A problem with Elliptic curve cryptography
is the construction of suitable curves. This is actually much more difficult
than the equivalent problem in the integer finite field as implemented by the
program <i style='mso-bidi-font-style:normal'>dssetup.c/dssetup.cpp</i>. One
approach is the Complex Multiplication method, as described in the Annex to the
IEEE P1363 Standard Specifications for Public Key Cryptography (available from
the Web). This is implemented here by the C++ program <i style='mso-bidi-font-style:
normal'>cm.cpp</i> and its supporting modules <i style='mso-bidi-font-style:
normal'>float.cpp</i>, <i style='mso-bidi-font-style:normal'>complex.cpp,
flpoly.cpp, poly.cpp</i>, and associated header files. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>The program when run uses command line
arguments. Type <b style='mso-bidi-font-weight:normal'>cm</b> on its own to get
instructions. For example</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB style='font-family:
Courier'>cm -f 2#224-2#96+1 -o common.ecs<o:p></o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>generates the
common information needed to implement elliptic curve cryptography into the
file <i style='mso-bidi-font-style:normal'>common.ecs</i>.</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>As an alternative
to the CM method, a random curve can be generated, and the points on the curve
directly counted. This is more time-consuming than complex multiplication, but
may lead to more secure, less structured curves. The basic algorithm is due to
Schoof [Sch],[Blake] and is only practical due to the use of Fast Fourier
Transform methods [Shoup] for the multiplication/division of large degree
polynomials. See <i style='mso-bidi-font-style:normal'>mrfast.c</i>. Its still
very slow, much slower than <b style='mso-bidi-font-weight:normal'>cm</b>. Type
<b style='mso-bidi-font-weight:normal'>schoof</b> on its own to get
instructions. For example</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB style='font-family:
Courier'>schoof &#8211;f 2#192-2#64-1 &#8211;3 35317045537<o:p></o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB style='font-family:
Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>counts the points
on the curve <i style='mso-bidi-font-style:normal'>y<sup>2</sup> = x<sup>3</sup>
&#8211;3x +35317045537</i> mod <i style='mso-bidi-font-style:normal'>2<sup>192</sup>-2<sup>64</sup>-1</i>.</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoPlainText><span style='font-size:12.0pt;mso-bidi-font-size:10.0pt;
font-family:"Times New Roman"'>This curve is randomly selected (actually
35317045537 is my international phone number). The answer is the prime number<o:p></o:p></span></p><p class=MsoPlainText><span style='font-size:12.0pt;mso-bidi-font-size:10.0pt;
font-family:"Times New Roman"'><o:p>&nbsp;</o:p></span></p><p class=MsoPlainText>6277101735386680763835789423127240467907482257771524603027</p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Be prepared to
wait, orÖ.</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Use the suite of
programs, <b style='mso-bidi-font-weight:normal'>mueller</b>, <b
style='mso-bidi-font-weight:normal'>process</b>, and <b style='mso-bidi-font-weight:
normal'>sea</b>, which together implement the superior, but more complex,
Schoof-Elkies-Atkin method for point counting. See [Blake] for details.</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>First of all the <b
style='mso-bidi-font-weight:normal'>mueller</b> program should be run, to
generate the required Modular Polynomials. This needs to be done just once
&#8211; ever. The greater your collection of Modular Polynomials, the greater
the size of prime modulus that can be used for the elliptic curves of interest.
Note that this program is particularly hard on memory resources, as well as
taking a long time to run. However after an hour at most you should have enough
Modular Polynomials to start experimenting. As with all these programs, simply
typing the program name without parameters generates instructions for use. Also
be sure to read the comments at the start of the source file, in this case <i
style='mso-bidi-font-style:normal'>mueller.cpp.<o:p></o:p></i></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Next run the <b
style='mso-bidi-font-weight:normal'>process</b> application, which processes
the file of raw modular polynomials output by <b style='mso-bidi-font-weight:
normal'>mueller</b>, for use with a specified prime modulus.</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Finally run <b
style='mso-bidi-font-weight:normal'>sea</b> to count the points on the curve,
and optionally to create a <i style='mso-bidi-font-style:normal'>.ecs</i> file
as described above. </span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>For example:-</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB style='font-family:
"Courier New";mso-bidi-font-family:"Times New Roman"'>mueller 0 120 &#8211;o
mueller.raw<o:p></o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB style='font-family:
"Courier New";mso-bidi-font-family:"Times New Roman"'>process &#8211;f
65112*2#144-1 &#8211;i mueller.raw &#8211;o test160.pol<o:p></o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB style='font-family:
"Courier New";mso-bidi-font-family:"Times New Roman"'>sea &#8211;3 49 &#8211;i
test160.pol<o:p></o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>generates all the
modular polynomials for primes from 0 to 120, and outputs them to the file <i
style='mso-bidi-font-style:normal'>mueller.raw</i>. Then these polynomials are
processed with respect to the prime <i style='mso-bidi-font-style:normal'>p </i>=
65112.2<sup>144</sup>-1, to create the file <i style='mso-bidi-font-style:normal'>test160.pol</i>.
Finally the main <b style='mso-bidi-font-weight:normal'>sea</b> application
counts the points on the curve y<sup>2</sup>=x<sup>3</sup>-3x+49 mod <i
style='mso-bidi-font-style:normal'>p<o:p></o:p></i></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>This may be more complicated
to use, but its much faster than <b style='mso-bidi-font-weight:normal'>schoof</b>.</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Read the comments
at the start of <i style='mso-bidi-font-style:normal'>sea.cpp</i> for more
information.</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>For elliptic
curves over GF(2<i style='mso-bidi-font-style:normal'><sup>m</sup></i>), the
program <b style='mso-bidi-font-weight:normal'>schoof2</b> can be used, which
is quite similar to <b style='mso-bidi-font-weight:normal'>schoof</b>. It is
even slower, but just about usable on contemporary hardware. For example</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB style='font-family:
"Courier New";mso-bidi-font-family:"Times New Roman"'>schoof2 1 52 191 9
&#8211;o common2.ecs<o:p></o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB style='font-family:
"Courier New";mso-bidi-font-family:"Times New Roman"'><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>counts the points
on the curve<span style="mso-spacerun:yes">† </span><i style='mso-bidi-font-style:
normal'>y<sup>2</sup>+xy=x<sup>3</sup>+x<sup>2</sup>+52</i>, over the field
GF(2<sup>191</sup>). A suitable irreducible basis must also be specified, in
this case <i style='mso-bidi-font-style:normal'>t<sup>191</sup>+t<sup>9</sup>+1</i>.
Tables of suitable bases can be found in many documents, for example in
Appendix A of the IEEE P1363 standard. See [Menezes] for a description of the
method.</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>For more
information on building these applications see the files <i style='mso-bidi-font-style:
normal'>cm.txt, schoof.txt, schoof2.txt </i>and<i style='mso-bidi-font-style:
normal'> sea.txt.<o:p></o:p></i></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc1583"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>8.4.16<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>crsetup.cpp, crgen.cpp,
crencode.cpp, crdecode.cpp</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Public key schemes should ideally be immune
from <i style='mso-bidi-font-style:normal'>adaptive chosen cipher-text</i>
attacks, whereby an attacker is able to obtain decryptions of any presented
cipher-texts other than the particular one they are interested in. Recently
Cramer &amp; Shoup [CS] have come up with a Public Key encryption method that
is provably immune to such powerful attacks. The program <b style='mso-bidi-font-weight:
normal'>crsetup</b> creates various global parameters, and <b style='mso-bidi-font-weight:
normal'>crgen</b> generates one set of public and private keys in the files <i
style='mso-bidi-font-style:normal'>public.crs</i> and <i style='mso-bidi-font-style:
normal'>private.crs</i> respectively. To encrypt an ASCII file called for
example <i style='mso-bidi-font-style:normal'>fred.txt</i>, run the <b
style='mso-bidi-font-weight:normal'>crencode<i style='mso-bidi-font-style:normal'></i></b>program that generates a random session key, and uses it to encrypt the
file. This session key is in turn encrypted by the public key and stored in the
file <i style='mso-bidi-font-style:normal'>fred.key</i>. The binary encrypted
file itself is stored as <i style='mso-bidi-font-style:normal'>fred.crs</i>.<i
style='mso-bidi-font-style:normal'></i>To decrypt the file, run the <b
style='mso-bidi-font-weight:normal'>crdecode</b> program, which uses the
private key to recover the session key, and hence decode the text to the
screen.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>A couple of points are worth highlighting.
First of all the bulk encryption is carried out using a block cipher method.
Such hybrid systems are standard practise, as block ciphers are much faster
than public key methods. The block cipher scheme used is the new Advanced
Encryption Standard block cipher, which is implemented in <i style='mso-bidi-font-style:
normal'>mraes.c</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Examination of the source code <i
style='mso-bidi-font-style:normal'>crdecode.cpp</i> reveals that decryption is
a two-pass process. On the first pass the program determines the validity of
the cipher-text, and only after that is known to be valid does the program go
on to decrypt the file. So the decryption procedure will not respond at all to
arbitrary bit strings concocted by an attacker.</span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc1590"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>8.4.17<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>brick.c, ebrick.c, ebrick2.c</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Certain Cryptographic protocols require the
exponentiation of a fixed number <i style='mso-bidi-font-style:normal'>g</i>,
that is the calculation of <i style='mso-bidi-font-style:normal'>g<sup>x</sup>
mod n</i>, where <i style='mso-bidi-font-style:normal'>g</i> and <i
style='mso-bidi-font-style:normal'>n</i> are known in advance. In this case the
calculation can be substantially speeded up by a precomputation which generates
a small table of <i style='mso-bidi-font-style:normal'>big</i> numbers. The
method was first described by Brickell et al [Brick]. The example program <i
style='mso-bidi-font-style:normal'>brick.c</i> illustrates the method. The GF(<i
style='mso-bidi-font-style:normal'>p</i>) elliptic curve equivalent is provided
in <i style='mso-bidi-font-style:normal'>ebrick.c</i> and the GF(2<i
style='mso-bidi-font-style:normal'><sup>m</sup></i>) equivalent in <i
style='mso-bidi-font-style:normal'>ebrick2.c</i>. In a typical application the
precomputed tables might be generated using one of these programs (see commented-out
code in <i style='mso-bidi-font-style:normal'>ebrick2.c</i>), which then might
be transferred to ROM in an embedded program. The embedded program might use a
static build of MIRACL to make use of these tables.</span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc1593"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>8.4.18<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>identity.c</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>This is a program that allows individuals,
issued with certain secret information, to establish mutual keys by performing
a calculation involving only the other correspondents publicly known identity.
No interchange of data is required [Maurer], and so this is called
Non-Interactive Key Exchange. Note that the ëpublicly known identityí might,
for example, be simply an email address. For a full description see [Scott92].
This example program generates the secret data from the proffered Identity.
However before this program is run, the program <i style='mso-bidi-font-style:
normal'>genprime.c</i> must be run twice, to generate a pair of suitable
trap-door primes. Copy the output of the program, <i style='mso-bidi-font-style:
normal'>prime.dat,</i> first to <i style='mso-bidi-font-style:normal'>trap1.dat</i>
and then to <i style='mso-bidi-font-style:normal'>trap2.dat</i>. The product of
these primes will be used as the composite modulus used for subsequent
calculations.</span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc1596"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>8.4.19<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>Pairing based Cryptography</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>A number of experimental programs are
provided to implement cryptographic protocols based on <i style='mso-bidi-font-style:
normal'>pairings</i>. Notably there are examples of Identity-Based Encryption
(IBE) and authenticated key exchange. Read the files <i style='mso-bidi-font-style:
normal'>pairings.txt</i>, <i style='mso-bidi-font-style:normal'>ake.txt</i> and
<i style='mso-bidi-font-style:normal'>ibe.txt</i> for details.<br clear=all
style='page-break-before:always'><o:p>&nbsp;</o:p></span></p><h2 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level2 lfo1;tab-stops:
0cm'><a name="_toc1600"></a><&#33;[if &#33;supportLists]><span lang=EN-GB
style='mso-fareast-font-family:Arial;mso-bidi-font-family:Arial'><span
style='mso-list:Ignore'>8.5<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>ëflashí Programs</span></h2><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Several programs demonstrate the use of <i
style='mso-bidi-font-style:normal'>flash</i> variables. One gives an
implementation of Gaussian elimination to solve a set of linear equations,
involving notoriously ill-conditioned Hilbert matrices. Others show how
rational arithmetic can be used to approximate real arithmetic, in, for example
the calculation of roots and </span><span lang=EN-GB style='font-family:Symbol'>p</span><span
lang=EN-GB>. The former program detected an error in the value for the square
root of 5 given in Knuthís appendix A [Knuth81]. The correct value is </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><span style='mso-tab-count:1'>††††††††††† </span>2.23606
79774 99789 69640 91736 68731 <b style='mso-bidi-font-weight:normal'>2</b>7623
54406 </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>The error is in the tenth last digit, which
is a 2, and not a 1.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>The <i style='mso-bidi-font-style:normal'>roots</i>
program runs particularly fast when calculating the square roots of single
precision integers, as a simple form of continued fraction generator can be
used. In one test the golden ratio <span style='position:relative;top:3.0pt;
mso-text-raise:-3.0pt'><&#33;--[if gte vml 1]><v:shape id="_x0000_i1032" type="#_x0000_t75"
style='width:58pt;height:18pt' o:ole="" filled="t"><v:fill color2="black"/><v:imagedata src="manual_files/image027.emz" o:title=""/><v:textbox inset="0,0,0,0"/></v:shape><&#33;[endif]--><&#33;[if &#33;vml]><img border=0 width=60 height=20
src="manual_files/image028.gif" v:shapes="_x0000_i1032"><&#33;[endif]></span><&#33;--[if gte mso 9]><xml><o:OLEObject Type="Embed" ProgID="Equation.2" ShapeID="_x0000_i1032"
DrawAspect="Content" ObjectID="_1307025234"></o:OLEObject></xml><&#33;[endif]--><span style="mso-spacerun:yes">†</span>was calculated to 100,000
decimal places in 3 hours of CPU time on a VAX11/780.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>The ësampleí program was used to calculate </span><span
lang=EN-GB style='font-family:Symbol'>p</span><span lang=EN-GB> correct to 1000
decimal places, taking less than a minute on a 25MHz 80386-based IBM PC to do
so.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc1613"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>8.5.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>roots.c</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>This program calculates the square root of
an input number, using Newtons method. Try using it to calculate the square
root of two. The accuracy obtained depends on the size of the flash variables,
specified in the initial call to <b style='mso-bidi-font-weight:normal'>mirsys</b>.
The tendency of flash arithmetic to prefer simple numbers can be illustrated by
requesting, say, the square root of 7. The program calculates this value and
then squares it, to give 7 again exactly. On your pocket calculator the same
result will only be obtained if clever use is made of extra (hidden) guard
digits. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc1617"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>8.5.2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>hilbert.c</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Traditionally the inversion of ëHilbertí
matrices is regarded as a tough test for any system of arithmetic. This
programs solves the set of linear equations <i style='mso-bidi-font-style:normal'>H.x
= b</i>, where <i style='mso-bidi-font-style:normal'>H</i> is a Hilbert matrix
and <i style='mso-bidi-font-style:normal'>b</i> is the vector [1,1,1,1,....1],
using the classical Gaussian Elimination method.</span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc1620"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>8.5.3<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>sample.c</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>This program is the same as that used by
Brent [Brent78] to demonstrate some of the capabilities of his Fortran
Multiprecision arithmetic package. It calculates </span><span lang=EN-GB
style='font-family:Symbol'>p</span><span lang=EN-GB>, <span style='position:
relative;top:3.0pt;mso-text-raise:-3.0pt'><&#33;--[if gte vml 1]><v:shape id="_x0000_i1033"
type="#_x0000_t75" style='width:82pt;height:18pt' o:ole="" filled="t"><v:fill color2="black"/><v:imagedata src="manual_files/image029.emz" o:title=""/><v:textbox inset="0,0,0,0"/></v:shape><&#33;[endif]--><&#33;[if &#33;vml]><img border=0 width=84 height=20
src="manual_files/image030.gif" v:shapes="_x0000_i1033"><&#33;[endif]></span><&#33;--[if gte mso 9]><xml><o:OLEObject Type="Embed" ProgID="Equation.2" ShapeID="_x0000_i1033"
DrawAspect="Content" ObjectID="_1307025235"></o:OLEObject></xml><&#33;[endif]-->, and <span style='position:relative;top:3.0pt;mso-text-raise:
-3.0pt'><&#33;--[if gte vml 1]><v:shape id="_x0000_i1034" type="#_x0000_t75"
style='width:67pt;height:18pt' o:ole="" filled="t"><v:fill color2="black"/><v:imagedata src="manual_files/image031.emz" o:title=""/><v:textbox inset="0,0,0,0"/></v:shape><&#33;[endif]--><&#33;[if &#33;vml]><img border=0 width=69 height=20
src="manual_files/image032.gif" v:shapes="_x0000_i1034"><&#33;[endif]></span><&#33;--[if gte mso 9]><xml><o:OLEObject Type="Embed" ProgID="Equation.2" ShapeID="_x0000_i1034"
DrawAspect="Content" ObjectID="_1307025236"></o:OLEObject></xml><&#33;[endif]-->.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc1624"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>8.5.4<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>ratcalc.c</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>As a comprehensive and useful demonstration
of flash arithmetic this program simulates a standard full-function scientific
calculator. Its unique feature (besides its 36-digit accuracy) is its ability
to work directly with fractions, and to handle mixed calculations involving
both fractions and decimals. By using this program the user will quickly get a
feel for flash arithmetic and its capabilities. Note that this program contains
some non-portable code (screen handling routines) that must be tailored to each
individual computer/terminal combination. The version supplied works only on
standard PCs using DOS, or a command prompt window in Windows ëNT/í98.<br
clear=all style='page-break-before:always'><o:p>&nbsp;</o:p></span></p><h1 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level1 lfo1;tab-stops:
0cm'><a name="_toc1628"></a><&#33;[if &#33;supportLists]><span lang=EN-GB
style='mso-fareast-font-family:Arial;mso-bidi-font-family:Arial'><span
style='mso-list:Ignore'>9.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>The MIRACL routines</span></h1><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Note: In these routines a <i
style='mso-bidi-font-style:normal'>big</i> parameter can also be used wherever
a <i style='mso-bidi-font-style:normal'>flash</i> is specified, but not
visa-versa. Further information may be gleaned from the (lightly) commented
source code. An asterix * after the name indicates that the function does not
take a <i style='mso-bidi-font-style:normal'>mip</i> parameter if <b
style='mso-bidi-font-weight:normal'>MR_GENERIC_MT </b><span
style="mso-spacerun:yes">†</span>is defined in <i style='mso-bidi-font-style:
normal'>mirdef.h</i>. See Section 2.3 for more details. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h2 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level2 lfo1;tab-stops:
0cm'><a name="_toc1633"></a><&#33;[if &#33;supportLists]><span lang=EN-GB
style='mso-fareast-font-family:Arial;mso-bidi-font-family:Arial'><span
style='mso-list:Ignore'>9.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>Low level routines</span></h2><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc1635"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.1.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>absol *</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=FR style='mso-ansi-language:FR'>Function:</span><span
lang=FR style='font-family:Courier;mso-ansi-language:FR'><span
style='mso-tab-count:1'>††† </span>void <b style='mso-bidi-font-weight:normal'>absol</b>(x,y)<o:p></o:p></span></p><p class=MsoNormal><span lang=FR style='font-family:Courier;mso-ansi-language:
FR'><span style='mso-tab-count:2'>††††††††† </span></span><span lang=EN-GB
style='font-family:Courier'>flash x,y;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrcore.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Gives absolute value of a big or flash number.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Two
big/flash variables <i style='mso-bidi-font-style:normal'>x</i> and <i
style='mso-bidi-font-style:normal'>y</i>. On exit <i style='mso-bidi-font-style:
normal'>y</i>=&#124;<i style='mso-bidi-font-style:normal'>x</i>&#124;.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>None </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc1650"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.1.2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>add</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>void <b
style='mso-bidi-font-weight:normal'>add</b>(x,y,z)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big x,y,z;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrarth0.c
</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Adds two big numbers.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Three
big numbers <i style='mso-bidi-font-style:normal'>x</i>, <i style='mso-bidi-font-style:
normal'>y</i> and <i style='mso-bidi-font-style:normal'>z</i>. On exit <i
style='mso-bidi-font-style:normal'>z=x+y</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>None </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Example:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>add(x,x,x);<span
style="mso-spacerun:yes">† </span>/* This doubles the value of <i
style='mso-bidi-font-style:normal'>x</i>. */<br clear=all style='page-break-before:
always'><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc1667"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.1.3<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>brand</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>int <b style='mso-bidi-font-weight:normal'>brand</b>()<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrcore.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Generates random integer number </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return Value:<span style='mso-tab-count:
1'>† </span>A random integer number</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Restrictions:<span style='mso-tab-count:1'>†† </span>First use must
be preceded by an initial call to <b style='mso-bidi-font-weight:normal'>irand</b>.</span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><span style='mso-tab-count:2'>††††††††††††††††††††††††††††††††††† </span>NOTE:
This generator is <u>not</u> cryptographicly strong. For cryptographic
applications, use the <b style='mso-bidi-font-weight:normal'>strong_rng</b>
routine.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc1685"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.1.4<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>bigbits</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>void <b
style='mso-bidi-font-weight:normal'>bigbits</b>(n,x)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>int n;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big x;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrbits.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Generates a big
random number of given length. Uses the built-in simple random number generator
initialised by <b style='mso-bidi-font-weight:normal'>irand.<o:p></o:p></b></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Parameters<span style='mso-tab-count:1'>††††† </span>A big number <i
style='mso-bidi-font-style:normal'>x</i> and an integers <i style='mso-bidi-font-style:
normal'>n</i>. On exit <i style='mso-bidi-font-style:normal'>x</i> contains a
big random number <i style='mso-bidi-font-style:normal'>n</i> bits long.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Example:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>bigbits(100,x);<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><span style='mso-tab-count:2'>††††††††††††††††††††††† </span>This
generates a 100 bit random number </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><span lang=EN-GB style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:
"Times New Roman";mso-fareast-font-family:"Times New Roman";mso-ansi-language:
EN-GB;mso-fareast-language:AR-SA;mso-bidi-language:AR-SA'><br clear=all
style='page-break-before:always'></span><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc1705"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.1.5<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>big_to_bytes</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>int
<b style='mso-bidi-font-weight:normal'>big_to_bytes</b>(max,x,ptr,justify)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style='mso-tab-count:2'>††††††††† </span>int
max;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style='mso-tab-count:2'>††††††††† </span>big
x;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style='mso-tab-count:2'>††††††††† </span>char
*ptr;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style='mso-tab-count:2'>††††††††† </span>BOOL
justify<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrarth1.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Converts a positive big number <i style='mso-bidi-font-style:
normal'>x</i> into a binary octet string</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A big number <i
style='mso-bidi-font-style:normal'>x</i> and a byte array <i style='mso-bidi-font-style:
normal'>ptr</i> of length <i style='mso-bidi-font-style:normal'>max</i>. Error
checking is carried out to ensure that the function does not write beyond the
limits of <i style='mso-bidi-font-style:normal'>ptr</i> if <i style='mso-bidi-font-style:
normal'>max&gt;0</i>. If <i style='mso-bidi-font-style:normal'>max</i>=0, no
checking is carried out. If <i style='mso-bidi-font-style:normal'>max</i>&gt;0
and <i style='mso-bidi-font-style:normal'>justify</i>=TRUE, the output is
right-justified, otherwise leading zeros are suppressed. </span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Return value:<span style='mso-tab-count:1'>†† </span>The number of
bytes generated in <i style='mso-bidi-font-style:normal'>ptr</i>. If <i
style='mso-bidi-font-style:normal'>justify</i>=TRUE then the return value is <i
style='mso-bidi-font-style:normal'>max</i>.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Restrictions:<span style='mso-tab-count:1'>††† </span><i
style='mso-bidi-font-style:normal'>max</i> must be greater than 0 if <i
style='mso-bidi-font-style:normal'>justify</i>=TRUE<br clear=all
style='page-break-before:always'><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc1723"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.1.6<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>bytes_to_big</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>void
<b style='mso-bidi-font-weight:normal'>bytes_to_big</b>(len,ptr,x)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style='mso-tab-count:2'>††††††††† </span>int
len;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style='mso-tab-count:2'>††††††††† </span>char
*ptr;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style='mso-tab-count:2'>††††††††† </span>big
x;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrarth1.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Converts a
binary octet string to a big number. Binary to big conversion.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A
pointer to a byte array <i style='mso-bidi-font-style:normal'>ptr</i> of length
<i style='mso-bidi-font-style:normal'>len</i>, and a big result <i
style='mso-bidi-font-style:normal'>x</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Example:<span style='mso-tab-count:1'>†††††††† </span></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>/*<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span
style="mso-spacerun:yes">†</span>*<span style="mso-spacerun:yes">† </span>test
program to exercise big_to_bytes() and bytes_to_big()<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span
style="mso-spacerun:yes">†</span>*/<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>#include &lt;stdio.h&gt;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>#include &quot;miracl.h&quot;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>int main()<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>{<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style="mso-spacerun:yes">†††
</span>int i,len;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style="mso-spacerun:yes">†††
</span>miracl *mip=mirsys(100,0);<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style="mso-spacerun:yes">†††
</span>big x,y;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style="mso-spacerun:yes">†††
</span>char b[200]; /* b needs space allocated to it */<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style="mso-spacerun:yes">†††
</span>x=mirvar(0);<span style="mso-spacerun:yes">† </span>/* all big variables
need to be &quot;mirvar&quot;ed */<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style="mso-spacerun:yes">†††
</span></span><span lang=ES style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman";mso-ansi-language:ES'>y=mirvar(0);<o:p></o:p></span></p><p class=MsoNormal><span lang=ES style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman";mso-ansi-language:ES'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=ES style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman";mso-ansi-language:ES'><span
style="mso-spacerun:yes">††† </span>expb2(100,x);<o:p></o:p></span></p><p class=MsoNormal><span lang=ES style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman";mso-ansi-language:ES'><span
style="mso-spacerun:yes">††† </span>incr(x,3,x);<span
style="mso-spacerun:yes">††††††††††††††† </span>/* x=2^100 + 3 */<o:p></o:p></span></p><p class=MsoNormal><span lang=ES style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman";mso-ansi-language:ES'><o:p>&nbsp;</o:p></span></p><p class=MsoFootnoteText><span lang=ES style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman";mso-ansi-language:ES'><span
style="mso-spacerun:yes">††† </span></span><span lang=EN-GB style='font-family:
"Courier New";mso-bidi-font-family:"Times New Roman"'>len=big_to_bytes(200,x,b,FALSE);<span
style="mso-spacerun:yes">† </span><o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span
style="mso-spacerun:yes">†††††††††††††††††† </span>/* Now b contains big number
x in raw binary */<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span
style="mso-spacerun:yes">†††††††††††††††††† </span>/* it is len bytes in length
*/<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span
style="mso-spacerun:yes">†</span>/* now print out the raw binary number b in
hex */<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style="mso-spacerun:yes">†††
</span>for (i=0;i&lt;len;i++) printf(&quot;%02x&quot;,b[i]);<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style="mso-spacerun:yes">†††
</span>printf(&quot;\n&quot;);<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style="mso-spacerun:yes">†††
</span>bytes_to_big(len,b,y);<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span
style="mso-spacerun:yes">†</span>/* now convert it back to big format, and
print it out again */<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style="mso-spacerun:yes">†††
</span></span><span lang=EN-IE style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman";mso-ansi-language:EN-IE'>mip-&gt;IOBASE=16;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-IE style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman";mso-ansi-language:EN-IE'><span
style="mso-spacerun:yes">††† </span>cotnum(y,stdout);<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-IE style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman";mso-ansi-language:EN-IE'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-IE style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman";mso-ansi-language:EN-IE'><span
style="mso-spacerun:yes">††† </span></span><span lang=EN-GB style='font-size:
10.0pt;font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>return
0;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>}<br clear=all style='page-break-before:
always'></span><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc1777"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.1.7<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>cinnum</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>int <b style='mso-bidi-font-weight:normal'>cinnum</b>(x,f)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>flash x;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>FILE *f;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrio2.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Inputs a flash
number from the keyboard or a file, using as number base the current value of
the instance variable IOBASE. Flash numbers can be entered using either a slash
ë/í to indicate numerator and denominator, or with a radix point.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A big/flash
number <i style='mso-bidi-font-style:normal'>x</i> and a file descriptor <i
style='mso-bidi-font-style:normal'>f</i>. For input from the keyboard specify <i
style='mso-bidi-font-style:normal'>f </i>as <i style='mso-bidi-font-style:normal'>stdin</i>,
otherwise as the descriptor of some other opened file. To force input of a
fixed number of bytes, set the instance variable<span
style="mso-spacerun:yes">† </span>INPLEN to the required number, just before
calling <b style='mso-bidi-font-weight:normal'>cinnum</b>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>The number of input characters.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Example:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>mip-&gt;</span><span lang=EN-GB
style='font-size:10.0pt;font-family:Courier'>IOBASE=256;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:Courier'><span
style='mso-tab-count:2'>††††††††††† </span></span><span lang=EN-GB
style='font-family:Courier'>mip-&gt;</span><span lang=EN-GB style='font-size:
10.0pt;font-family:Courier'>INPLEN=14;<span style='mso-tab-count:1'>† </span>/*
This inputs 14 bytes from <i style='mso-bidi-font-style:normal'>fp</i> and */<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:Courier'><span
style='mso-tab-count:2'>††††††††††† </span></span><span lang=EN-GB
style='font-family:Courier'>cinnum(x,fp);</span><span lang=EN-GB
style='font-size:10.0pt;font-family:Courier'><span style='mso-tab-count:1'>†† </span>/*
converts them into big number <i style='mso-bidi-font-style:normal'>x</i><span
style="mso-spacerun:yes">† </span>*/<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><b style='mso-bidi-font-weight:normal'><span lang=EN-GB style='font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:"Times New Roman";mso-fareast-font-family:
"Times New Roman";mso-ansi-language:EN-GB;mso-fareast-language:AR-SA;
mso-bidi-language:AR-SA'><br clear=all style='page-break-before:always'></span></b><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc1797"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.1.8<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>cinstr</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>int <b
style='mso-bidi-font-weight:normal'>cinstr</b>(x,s)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>flash x;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>char *s;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module;<span style='mso-tab-count:1'>††††††††† </span>mrio2.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Inputs a flash
number from a character string, using as number base the current value of the
instance variable IOBASE. Flash numbers can be input using a slash ë/í to
indicate numerator and denominator, or with a radix point.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A big/flash
number <i style='mso-bidi-font-style:normal'>x</i> and a string <i
style='mso-bidi-font-style:normal'>s</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>The number of input characters.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Example:</span><span lang=EN-GB
style='font-size:10.0pt;font-family:Courier'><span style='mso-tab-count:1'>†††† </span>/*
input large hex number into big x */<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:Courier'><span
style='mso-tab-count:2'>††††††††††† </span></span><span lang=PT-BR
style='font-size:10.0pt;font-family:Courier;mso-ansi-language:PT-BR'>mip-&gt;IOBASE=16;<o:p></o:p></span></p><p class=MsoNormal><span lang=PT-BR style='font-size:10.0pt;font-family:Courier;
mso-ansi-language:PT-BR'><span style='mso-tab-count:2'>††††††††††† </span>cinstr(x,îAF12398065BFE4C96DB723Aî);<o:p></o:p></span></p><p class=MsoNormal><span lang=PT-BR style='mso-ansi-language:PT-BR'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=PT-BR style='mso-ansi-language:PT-BR'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=PT-BR style='mso-ansi-language:PT-BR'><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc1820"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.1.9<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>compare *</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>int <b
style='mso-bidi-font-weight:normal'>compare</b>(x,y)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big x,y;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrcore.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Compares two big numbers.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Two
big numbers <i style='mso-bidi-font-style:normal'>x</i> and <i
style='mso-bidi-font-style:normal'>y</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>Returns +1 if <i style='mso-bidi-font-style:normal'>x&gt;y</i>,
returns 0 if <i style='mso-bidi-font-style:normal'>x=y</i>, returns -1 if <i
style='mso-bidi-font-style:normal'>x&lt;y</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>None<br clear=all style='page-break-before:always'><a name="_toc1834"></a><b style='mso-bidi-font-weight:normal'>convert</b></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>void <b
style='mso-bidi-font-weight:normal'>convert</b>(n,x) <o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>int n;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big x;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrcore.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Convert an integer number to big number format.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>An
integer<i style='mso-bidi-font-style:normal'> n</i> and a big number<i
style='mso-bidi-font-style:normal'> x</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc1852"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.1.11<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>copy *</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>void <b
style='mso-bidi-font-weight:normal'>copy</b>(x,y)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>flash x,y;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrcore.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Copies a big or flash number to another.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Two big or
flash numbers <i style='mso-bidi-font-style:normal'>x</i> and <i
style='mso-bidi-font-style:normal'>y</i>. On exit <i style='mso-bidi-font-style:
normal'>y=x</i>. Note that if <i style='mso-bidi-font-style:normal'>x</i> and <i
style='mso-bidi-font-style:normal'>y</i> are the same variable, no operation is
performed.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>None<br clear=all style='page-break-before:always'><a name="_toc1865"></a><b style='mso-bidi-font-weight:normal'>cotnum</b></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>int <b
style='mso-bidi-font-weight:normal'>cotnum</b>(x,f)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>flash x;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>FILE *f;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrio2.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Output a big or
flash number to the screen or to a file, using as number base the value
currently assigned to the instance variable IOBASE. A flash number will be
converted to radix-point representation if the instance variable </span><span
lang=EN-GB style='font-family:Courier'>RPOINT=ON</span><span lang=EN-GB>.
Otherwise it will be output as a fraction.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Parameters<span style='mso-tab-count:1'>††††† </span>A big/flash
number <i style='mso-bidi-font-style:normal'>x</i> and a file descriptor <i
style='mso-bidi-font-style:normal'>f</i>. If <i style='mso-bidi-font-style:
normal'>f</i> is <i style='mso-bidi-font-style:normal'>stdout</i> then output
will be to the screen, otherwise to the file opened with descriptor <i
style='mso-bidi-font-style:normal'>f</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>Number of output characters.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Example:</span><span lang=EN-GB
style='font-size:10.0pt;font-family:Courier'><span style='mso-tab-count:1'>†††† </span>mip-&gt;</span><span
lang=EN-GB style='font-family:Courier'>IOBASE=16;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>cotnum(x,fp);<o:p></o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><span style='mso-tab-count:1'>††††††††††††††††††††††† </span>This
outputs <i style='mso-bidi-font-style:normal'>x</i> in hex, to the file
associated with <i style='mso-bidi-font-style:normal'>fp</i>.<br clear=all
style='page-break-before:always'><a name="_toc1884"></a><b style='mso-bidi-font-weight:normal'>cotstr</b></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>int <b
style='mso-bidi-font-weight:normal'>cotstr</b>(x,s)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>flash x;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>char *s;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrio2.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Description<span style='mso-tab-count:1'>†††† </span>Output a big or
flash number to the specified string, using as number base the value currently
assigned to the instance variable IOBASE. A flash number will be converted to
radix-point representation if the instance variable </span><span lang=EN-GB
style='font-family:Courier'>RPOINT=ON</span><span lang=EN-GB>. Otherwise it
will be output as a fraction.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Parameters<span style='mso-tab-count:1'>††††† </span>A big/flash
number <i style='mso-bidi-font-style:normal'>x</i> and a string <i
style='mso-bidi-font-style:normal'>s</i>. On exit <i style='mso-bidi-font-style:
normal'>s</i> will contain a representation of the number <i style='mso-bidi-font-style:
normal'>x</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>Number of output characters.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Restrictions<span style='mso-tab-count:1'>††† </span>Note that there
is nothing to prevent this routine from overflowing the limits of the user
supplied character array <i style='mso-bidi-font-style:normal'>s</i>, causing
obscure runtime problems. It is the programmers responsibility to ensure that <i
style='mso-bidi-font-style:normal'>s</i> is big enough to contain the number
output to it. Alternatively use the internally declared instance string <b
style='mso-bidi-font-weight:normal'>IOBUFF</b>, which is of size <b
style='mso-bidi-font-weight:normal'>IOBSIZ</b>. If this array overflows a
MIRACL error <b style='mso-bidi-font-weight:normal'>will</b> be flagged.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc1901"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.1.14<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>decr</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>void <b
style='mso-bidi-font-weight:normal'>decr</b>(x,n,z) <o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big x,z;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>int n;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrarth0.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Decrement a big number by an integer amount. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Big
numbers <i style='mso-bidi-font-style:normal'>x</i> and <i style='mso-bidi-font-style:
normal'>z</i>, and integer <i style='mso-bidi-font-style:normal'>n.<o:p></o:p></i></span></p><p class=MsoNormal><span lang=EN-GB><span style='mso-tab-count:2'>††††††††††††††††††††††† </span>On
exit <i style='mso-bidi-font-style:normal'>z=x-n</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>None<br clear=all style='page-break-before:always'><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc1918"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.1.15<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>divide</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=FR style='mso-ansi-language:FR'>Function:</span><span
lang=FR style='font-family:Courier;mso-ansi-language:FR'><span
style='mso-tab-count:1'>††† </span>void <b style='mso-bidi-font-weight:normal'>divide</b>(x,y,z)<o:p></o:p></span></p><p class=MsoNormal><span lang=FR style='font-family:Courier;mso-ansi-language:
FR'><span style='mso-tab-count:2'>††††††††† </span></span><span lang=EN-GB
style='font-family:Courier'>big x,y,z;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrarth2.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Divides one big number by another.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Three big
numbers <i style='mso-bidi-font-style:normal'>x</i>, <i style='mso-bidi-font-style:
normal'>y</i> and <i style='mso-bidi-font-style:normal'>z</i>. On exit <i
style='mso-bidi-font-style:normal'>z=x/y</i>; <i style='mso-bidi-font-style:
normal'>x=x mod y</i>. The quotient only is returned if <i style='mso-bidi-font-style:
normal'>x</i> and <i style='mso-bidi-font-style:normal'>z</i> are the same, the
remainder only if <i style='mso-bidi-font-style:normal'>y</i> and <i
style='mso-bidi-font-style:normal'>z</i> are the same.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Restrictions:<span style='mso-tab-count:1'>†† </span>Parameters <i
style='mso-bidi-font-style:normal'>x</i> and <i style='mso-bidi-font-style:
normal'>y</i> must be different, and <i style='mso-bidi-font-style:normal'>y</i>
must be non-zero.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=ES style='mso-ansi-language:ES'>Example:<span
style='mso-tab-count:1'>†††††††† </span></span><span lang=ES style='font-family:
Courier;mso-ansi-language:ES'>divide(x,y,y);<o:p></o:p></span></p><p class=MsoNormal><span lang=ES style='mso-ansi-language:ES'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=ES style='mso-ansi-language:ES'><span style='mso-tab-count:1'>††††††††††††††††††††††† </span></span><span
lang=EN-GB>This sets <i style='mso-bidi-font-style:normal'>x</i> equal to the
remainder when <i style='mso-bidi-font-style:normal'>x</i> is divided by <i
style='mso-bidi-font-style:normal'>y</i>. The quotient is not returned. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc1938"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.1.16<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>divisible</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>BOOL <b style='mso-bidi-font-weight:
normal'>divisible</b>(x,y)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big x,y;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrarth2.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Tests a big number for divisibility by another</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Two
big numbers <i style='mso-bidi-font-style:normal'>x</i> and <i
style='mso-bidi-font-style:normal'>y</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>TRUE if <i style='mso-bidi-font-style:normal'>y</i> divides <i
style='mso-bidi-font-style:normal'>x</i> exactly, otherwise FALSE</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>The parameter <i style='mso-bidi-font-style:normal'>y</i> must be
non-zero.<br clear=all style='page-break-before:always'><a name="_toc1952"></a><b style='mso-bidi-font-weight:normal'>ecp_memalloc</b></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>void
*<b style='mso-bidi-font-weight:normal'>ecp_memalloc</b>(n)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style='mso-tab-count:2'>††††††††† </span>int
n;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><o:p>&nbsp;</o:p></span></p><p class=MsoIndexHeading><span lang=EN-GB>Module:<span style='mso-tab-count:
1'>††††††††† </span>mrcore.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Reserves space
for <i style='mso-bidi-font-style:normal'>n</i> elliptic curve points in one
heap access. Individual points can subsequently be initialised from this memory
by calling <b style='mso-bidi-font-weight:normal'>epoint_init_mem</b>.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>The number <i
style='mso-bidi-font-style:normal'>n</i> of elliptic curve points to reserve
space for.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Return value:<span style='mso-tab-count:1'>†† </span>A pointer to
the allocated memory.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Restrictions:<span style='mso-tab-count:1'>††† </span>None.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc1968"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.1.18<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>ecp_memkill</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>void
<b style='mso-bidi-font-weight:normal'>ecp_memkill</b>(mem,n)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style='mso-tab-count:2'>††††††††† </span></span><span
lang=EN-IE style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman";
mso-ansi-language:EN-IE'>char *mem;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-IE style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman";mso-ansi-language:EN-IE'><span
style='mso-tab-count:2'>††††††††† </span>int n;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-IE style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman";mso-ansi-language:EN-IE'><o:p>&nbsp;</o:p></span></p><p class=MsoIndexHeading><span lang=EN-IE style='mso-ansi-language:EN-IE'>Module:<span
style='mso-tab-count:1'>††††††††† </span>mrcore.c<o:p></o:p></span></p><p class=MsoIndex1><span lang=EN-IE style='mso-ansi-language:EN-IE'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Deletes and
sets to zero the memory previously allocated by <b style='mso-bidi-font-weight:
normal'>ecp_memalloc<o:p></o:p></b></span></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span lang=EN-GB><o:p>&nbsp;</o:p></span></b></p><p class=MsoBodyTextIndent><span lang=EN-GB>Parameters:<span style='mso-tab-count:
1'>†††† </span>A pointer to the memory to be erased and deleted, and the size
of that memory in elliptic curve points.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Return value:<span style='mso-tab-count:1'>†† </span>None</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Restrictions:<span style='mso-tab-count:1'>††† </span>Must be
preceded by a call to <b style='mso-bidi-font-weight:normal'>ecp_memalloc<o:p></o:p></b></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB><o:p>&nbsp;</o:p></span></b></p><span lang=EN-GB style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:
"Times New Roman";mso-fareast-font-family:"Times New Roman";mso-ansi-language:
EN-GB;mso-fareast-language:AR-SA;mso-bidi-language:AR-SA'><br clear=all
style='page-break-before:always'></span><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc1985"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.1.19<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>exsign *</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>int <b
style='mso-bidi-font-weight:normal'>exsign</b>(x)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>flash x;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrcore.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Extracts the sign of a big/flash number.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A
big/flash number <i style='mso-bidi-font-style:normal'>x</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>The sign of <i style='mso-bidi-font-style:normal'>x</i>, i.e. -1
if <i style='mso-bidi-font-style:normal'>x</i> is negative, +1 if <i
style='mso-bidi-font-style:normal'>x</i> is zero or positive.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc2000"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.1.20<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>getdig</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>int <b
style='mso-bidi-font-weight:normal'>getdig</b>(x,i)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big x;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>int i;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrcore.c
</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Extracts a digit from a big number.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A
big number<i style='mso-bidi-font-style:normal'> x</i>, and the required digit <i
style='mso-bidi-font-style:normal'>i</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>The value of the requested digit.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>Returns rubbish if required digit does not exist.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc2016"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.1.21<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>get_mip</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>miracl *<b style='mso-bidi-font-weight:
normal'>get_mip</b>(void)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:1'>†††† </span><o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrcore.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Get the current <u>M</u>iracl <u>I</u>nstance <u>P</u>ointer</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>The <i style='mso-bidi-font-style:normal'>mip</i> - <u>M</u>iracl <u>I</u>nstance
<u>P</u>ointer &#8211; for the current thread.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>This function does not exist if <b style='mso-bidi-font-weight:
normal'>MR_GENERIC_MT</b> is defined.<br clear=all style='page-break-before:
always'><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc2030"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.1.22<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>igcd *</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=FR style='mso-ansi-language:FR'>Function:</span><span
lang=FR style='font-family:Courier;mso-ansi-language:FR'><span
style='mso-tab-count:1'>††† </span>int <b style='mso-bidi-font-weight:normal'>igcd</b>(x,y)<o:p></o:p></span></p><p class=MsoNormal><span lang=FR style='font-family:Courier;mso-ansi-language:
FR'><span style='mso-tab-count:2'>††††††††† </span></span><span lang=EN-IE
style='font-family:Courier;mso-ansi-language:EN-IE'>int x,y;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-IE style='mso-ansi-language:EN-IE'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-IE style='mso-ansi-language:EN-IE'>Module:<span
style='mso-tab-count:1'>††††††††† </span>mrcore.c<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-IE style='mso-ansi-language:EN-IE'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Calculates the
Greatest Common Divisor of two integers using Euclids Method.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Two
integers <i style='mso-bidi-font-style:normal'>x</i> and <i style='mso-bidi-font-style:
normal'>y<o:p></o:p></i></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>The GCD of <i style='mso-bidi-font-style:normal'>x</i> and <i
style='mso-bidi-font-style:normal'>y<o:p></o:p></i></span></p><p class=MsoNormal><i style='mso-bidi-font-style:normal'><span lang=EN-GB><o:p>&nbsp;</o:p></span></i></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc2044"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.1.23<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>incr</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>void <b
style='mso-bidi-font-weight:normal'>incr</b>(x,n,z)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big x,z;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>int n;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrarth0.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Increment a big variable.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Big
numbers <i style='mso-bidi-font-style:normal'>x</i> and <i style='mso-bidi-font-style:
normal'>z</i>, and an integer <i style='mso-bidi-font-style:normal'>n</i>. On
exit <i style='mso-bidi-font-style:normal'>z=x+n</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>None </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Example:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-size:10.0pt;font-family:Courier'>incr(x,2,x);<span
style="mso-spacerun:yes">† </span>/* This increments x by 2. */<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><span lang=EN-GB style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:
"Times New Roman";mso-fareast-font-family:"Times New Roman";mso-ansi-language:
EN-GB;mso-fareast-language:AR-SA;mso-bidi-language:AR-SA'><br clear=all
style='page-break-before:always'></span><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc2064"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.1.24<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>init_big_from_rom</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>BOOL <b
style='mso-bidi-font-weight:normal'>init_big_from_rom</b></span><span
lang=EN-GB style='font-size:8.0pt;font-family:Courier'>(big,int,const
mr_small*,int,int*)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big x;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>int len;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>const mr_small *rom;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>int romsize;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>int *romptr;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrcore.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Initialises a big variable from ROM memory.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A big number <i
style='mso-bidi-font-style:normal'>x</i> and its length in computer words. The
address of ROM memory which stores up to <i style='mso-bidi-font-style:normal'>romsize</i>
computer words, and a pointer into the ROM. This pointer is incremented
internally as ROM memory is accessed to fill <i style='mso-bidi-font-style:
normal'>x</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Return value:<span style='mso-tab-count:1'>† </span>TRUE if
successful, or FALSE if an attempt is made to read beyond the end of the ROM</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc2083"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.1.25<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>init_point_from_rom</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>BOOL </span><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB style='font-size:10.0pt;
font-family:Courier'>init_point_from_rom</span></b><span lang=EN-GB
style='font-size:8.0pt;font-family:Courier'>(epoint *,int,const
mr_small*,int,int*)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>epoint *P;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>int len;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>const mr_small *rom;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>int romsize;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>int *romptr;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrcore.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Initialises an elliptic curve point from ROM memory.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>An elliptic
curve point <i style='mso-bidi-font-style:normal'>P</i> and its length of its
two big coordinates in computer words. The address of ROM memory which stores
up to <i style='mso-bidi-font-style:normal'>romsize</i> computer words, and a
pointer into the ROM. This pointer is incremented internally as ROM memory is
accessed to fill <i style='mso-bidi-font-style:normal'>P</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Return value:<span style='mso-tab-count:1'>† </span>TRUE if
successful, or FALSE if an attempt is made to read beyond the end of the ROM</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><b style='mso-bidi-font-weight:normal'><span lang=EN-GB style='font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:"Times New Roman";mso-fareast-font-family:
"Times New Roman";mso-ansi-language:EN-GB;mso-fareast-language:AR-SA;
mso-bidi-language:AR-SA'><br clear=all style='page-break-before:always'></span></b><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc2100"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.1.26<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>innum</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>int <b
style='mso-bidi-font-weight:normal'>innum</b>(x,f)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>flash x;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>FILE *f;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrio1.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Inputs a big or
flash number from a file or the keyboard, using as number base the value
specified in the initial call to <b style='mso-bidi-font-weight:normal'>mirsys</b>.
Flash numbers can be entered using either a slash ë/í to indicate numerator and
denominator, or with a radix point.</span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A big/flash
number <i style='mso-bidi-font-style:normal'>x</i> and a file descriptor <i
style='mso-bidi-font-style:normal'>f</i>. For input from the keyboard specify <i
style='mso-bidi-font-style:normal'>f</i> as <i style='mso-bidi-font-style:normal'>stdin</i>,
otherwise as the descriptor of some other opened file.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>The number of characters input.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Restrictions:<span style='mso-tab-count:1'>†† </span>The number base
specified in <b style='mso-bidi-font-weight:normal'>mirsys</b> must be less
than or equal to 256. If not use <b style='mso-bidi-font-weight:normal'>cinnum</b>
instead.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Hint:<span style='mso-tab-count:1'>†††††††††††††† </span>For fastest
inputting of ASCII text to a big number, and if a full-width base is possible,
use </span><span lang=EN-GB style='font-family:Courier'>mirsys(...,256);</span><span
lang=EN-GB> initially. This has the same effect as specifying </span><span
lang=EN-GB style='font-family:Courier'>mirsys(...,0);</span><span lang=EN-GB>,
except that now ASCII bytes may be input directly via </span><span lang=EN-GB
style='font-family:Courier'>innum(x,fp);</span><span lang=EN-GB> without the
time-consuming change of base implicit in the use of <b style='mso-bidi-font-weight:
normal'>cinnum</b>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc2118"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.1.27<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>insign *</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>void <b
style='mso-bidi-font-weight:normal'>insign</b>(s,x)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>int s;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>flash x;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrcore.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Forces a big/flash number to a particular sign.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A big/flash
number <i style='mso-bidi-font-style:normal'>x</i>, and the sign <i
style='mso-bidi-font-style:normal'>s</i> that it is to take. On exit <i
style='mso-bidi-font-style:normal'>x=s.&#124;x</i>&#124;.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Example:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>insign(PLUS,x);<span
style="mso-spacerun:yes">†† </span>/* force <i style='mso-bidi-font-style:normal'>x</i>
to be positive */<br clear=all style='page-break-before:always'><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc2136"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.1.28<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>instr</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>int <b
style='mso-bidi-font-weight:normal'>instr</b>(x,s)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>flash x;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>char *s;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrio1.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Description<span style='mso-tab-count:1'>†††† </span>Inputs a big or
flash number from a character string, using as number base the value specified
in the initial call to <b style='mso-bidi-font-weight:normal'>mirsys</b>. Flash
numbers can be entered using either a slash ë/í to indicate numerator and
denominator, or with a radix point.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters<span style='mso-tab-count:1'>††††† </span>A
big/flash number <i style='mso-bidi-font-style:normal'>x</i> and a character
string <i style='mso-bidi-font-style:normal'>s</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>The number of characters input.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Restrictions<span style='mso-tab-count:1'>††† </span>The number base
specified in <b style='mso-bidi-font-weight:normal'>mirsys</b> must be less
than or equal to 256. If not use <b style='mso-bidi-font-weight:normal'>cinstr</b>
instead.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><b style='mso-bidi-font-weight:normal'><span lang=EN-GB style='font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:"Times New Roman";mso-fareast-font-family:
"Times New Roman";mso-ansi-language:EN-GB;mso-fareast-language:AR-SA;
mso-bidi-language:AR-SA'><br clear=all style='page-break-before:always'></span></b><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc2152"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.1.29<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>irand</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>void <b
style='mso-bidi-font-weight:normal'>irand</b>(seed)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>long seed;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrcore.c
</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Initializes
internal random number system. Long integer types are used internally to yield
a generator with maximum period.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A long integer
seed, which is used to start off the random number generator.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc2168"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.1.30<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>lgconv</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>void <b
style='mso-bidi-font-weight:normal'>lgconv</b>(ln,x)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>long ln;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big x;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrcore.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Converts a long integer to big number format </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A
long integer <i style='mso-bidi-font-style:normal'>ln</i> and a big number <i
style='mso-bidi-font-style:normal'>x<o:p></o:p></i></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><b style='mso-bidi-font-weight:normal'><span lang=EN-GB style='font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:"Times New Roman";mso-fareast-font-family:
"Times New Roman";mso-ansi-language:EN-GB;mso-fareast-language:AR-SA;
mso-bidi-language:AR-SA'><br clear=all style='page-break-before:always'></span></b><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc2184"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.1.31<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>mad</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>void <b
style='mso-bidi-font-weight:normal'>mad</b>(x,y,z,w,q,r)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big x,y,z,w,q,r;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrarth2.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Multiply add
and divide big numbers. The initial product is stored in a double-length
internal variable to avoid the possibility of overflow at this stage.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Six big numbers
<i style='mso-bidi-font-style:normal'>x,y,z,w,q</i> and <i style='mso-bidi-font-style:
normal'>r</i>. On exit <i style='mso-bidi-font-style:normal'>q=(x.y+z)/w</i>
and <i style='mso-bidi-font-style:normal'>r</i> contains the remainder. If <i
style='mso-bidi-font-style:normal'>w</i> and <i style='mso-bidi-font-style:
normal'>q</i> are not distinct variables then only the remainder is returned;
if <i style='mso-bidi-font-style:normal'>q</i> and <i style='mso-bidi-font-style:
normal'>r</i> are not distinct then only the quotient is returned. The addition
of <i style='mso-bidi-font-style:normal'>z</i> is not done if <i
style='mso-bidi-font-style:normal'>x</i> and <i style='mso-bidi-font-style:
normal'>z</i> (or <i style='mso-bidi-font-style:normal'>y</i> and <i
style='mso-bidi-font-style:normal'>z</i>) are the same.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Restrictions:<span style='mso-tab-count:1'>†† </span>Parameters <i
style='mso-bidi-font-style:normal'>w</i> and <i style='mso-bidi-font-style:
normal'>r</i> must be distinct. The value of <i style='mso-bidi-font-style:
normal'>w</i> must not be zero.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Example:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>mad(x,x,x,w,x,x); /* <i
style='mso-bidi-font-style:normal'>x=x^2/w</i> */<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc2204"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.1.32<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>memalloc</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>void
*<b style='mso-bidi-font-weight:normal'>memalloc</b>(n)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style='mso-tab-count:2'>††††††††† </span>int
n;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><o:p>&nbsp;</o:p></span></p><p class=MsoIndexHeading><span lang=EN-GB>Module:<span style='mso-tab-count:
1'>††††††††† </span>mrcore.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Reserves space
for <i style='mso-bidi-font-style:normal'>n</i> big variables in one heap
access. Individual big/flash variables can subsequently be initialised from
this memory by calling <b style='mso-bidi-font-weight:normal'>mirvar_mem</b>.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>The number <i
style='mso-bidi-font-style:normal'>n</i> of big/flash variables to reserve
space for.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Return value:<span style='mso-tab-count:1'>†† </span>A pointer to
the allocated memory.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Restrictions:<span style='mso-tab-count:1'>††† </span>None.<br
clear=all style='page-break-before:always'><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc2219"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.1.33<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>memkill</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>void
<b style='mso-bidi-font-weight:normal'>memkill</b>(mem,n)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style='mso-tab-count:2'>††††††††† </span></span><span
lang=EN-IE style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman";
mso-ansi-language:EN-IE'>char *mem;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-IE style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman";mso-ansi-language:EN-IE'><span
style='mso-tab-count:2'>††††††††† </span>int n;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-IE style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman";mso-ansi-language:EN-IE'><o:p>&nbsp;</o:p></span></p><p class=MsoIndexHeading><span lang=EN-IE style='mso-ansi-language:EN-IE'>Module:<span
style='mso-tab-count:1'>††††††††† </span>mrcore.c<o:p></o:p></span></p><p class=MsoIndex1><span lang=EN-IE style='mso-ansi-language:EN-IE'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Deletes and sets to zero the memory previously allocated by <b
style='mso-bidi-font-weight:normal'>memalloc<o:p></o:p></b></span></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span lang=EN-GB><o:p>&nbsp;</o:p></span></b></p><p class=MsoBodyTextIndent><span lang=EN-GB>Parameters:<span style='mso-tab-count:
1'>†††† </span>A pointer to the memory to be erased and deleted, and the size
of that memory in bigs.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Return value:<span style='mso-tab-count:1'>†† </span>None</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Restrictions:<span style='mso-tab-count:1'>††† </span>Must be
preceded by a call to <b style='mso-bidi-font-weight:normal'>memalloc<o:p></o:p></b></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB><o:p>&nbsp;</o:p></span></b></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB><o:p>&nbsp;</o:p></span></b></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB><o:p>&nbsp;</o:p></span></b></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB><o:p>&nbsp;</o:p></span></b></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc2238"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.1.34<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>mirexit</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>void <b style='mso-bidi-font-weight:
normal'>mirexit</b>()<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrcore.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Description<span style='mso-tab-count:1'>†††† </span>Cleans up after
the current instance of MIRACL, and frees all internal variables. A subsequent
call to <b style='mso-bidi-font-weight:normal'>mirsys</b> will re-initialise
the MIRACL system.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>Must be called after <b style='mso-bidi-font-weight:normal'>mirsys</b>.<br
clear=all style='page-break-before:always'><a name="_toc2251"></a><b style='mso-bidi-font-weight:normal'>mirkill *</b></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>void <b style='mso-bidi-font-weight:
normal'>mirkill</b>(x)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big x;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrcore.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Securely kills
off a big/flash number by zeroising it, and freeing its memory.</span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A big/flash
number <i style='mso-bidi-font-style:normal'>x</i>.</span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Return Value:<span style='mso-tab-count:1'>† </span>None<br
clear=all style='page-break-before:always'><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc2264"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.1.36<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>mirsys</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>miracl *<b
style='mso-bidi-font-weight:normal'>mirsys</b>(nd,nb)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>int nd,nb;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrcore.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Initialise the
MIRACL system for the current program thread, as described below. Must be
called before attempting to use any other MIRACL routines.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:99.25pt;text-indent:-1.0cm'><span
lang=EN-GB>(1)<span style='mso-tab-count:1'>†††† </span>The error tracing
mechanism is initialised. </span></p><p class=MsoNormal style='margin-left:99.25pt;text-indent:-1.0cm'><span
lang=EN-GB>(2)<span style='mso-tab-count:1'>†††† </span>the number of computer
words to use for each big/flash number is calculated from <i style='mso-bidi-font-style:
normal'>nd</i> and <i style='mso-bidi-font-style:normal'>nb</i>.</span></p><p class=MsoNormal style='margin-left:99.25pt;text-indent:-1.0cm'><span
lang=EN-GB>(3)<span style='mso-tab-count:1'>†††† </span>Sixteen big work
variables (four of them double length) are initialised.</span></p><p class=MsoNormal style='margin-left:99.25pt;text-indent:-1.0cm'><span
lang=EN-GB>(4)<span style='mso-tab-count:1'>†††† </span>Certain instance
variables are given default initial values.</span></p><p class=MsoNormal style='margin-left:99.25pt;text-indent:-1.0cm'><span
lang=EN-GB>(5)<span style='mso-tab-count:1'>†††† </span>The random number
generator is started by calling <b style='mso-bidi-font-weight:normal'>irand(0L)</b>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>The number of
digits <i style='mso-bidi-font-style:normal'>nd</i> to use for each big/flash
variable and the number base <i style='mso-bidi-font-style:normal'>nb</i>. If <i
style='mso-bidi-font-style:normal'>nd</i> is negative it is taken as indicating
the size of big/flash numbers in 8-bit bytes.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Return value:<span style='mso-tab-count:1'>†† </span>The Miracl
Instance Pointer, via which all instance variables can be accessed, or NULL if
there was not enough memory to create an instance. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Restrictions:<span style='mso-tab-count:1'>†† </span>The number base
<i style='mso-bidi-font-style:normal'>nb</i> should normally be greater than 1
and less than or equal to MAXBASE. A base of 0 implies that the ëfull-widthí number
base should be used. The number of digits <i style='mso-bidi-font-style:normal'>nd</i>
must be less than a certain maximum, depending on the underlying type <i
style='mso-bidi-font-style:normal'>mr_utype</i> and on whether or not <b
style='mso-bidi-font-weight:normal'>MR_FLASH</b> is defined. (See <i
style='mso-bidi-font-style:normal'>mirdef.h</i>)</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Example:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>miracl *mip=mirsys(500,10);<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><span style='mso-tab-count:1'>††††††††††††††††††††††† </span>This
initialises the MIRACL system to use 500 decimal digits for each big or flash
number.<br clear=all style='page-break-before:always'><a name="_toc2288"></a><b style='mso-bidi-font-weight:normal'>mirvar</b></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>flash <b
style='mso-bidi-font-weight:normal'>mirvar</b>(iv)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>int iv;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrcore.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Initialises a
big/flash variable by reserving a suitable number of memory locations for it.
This memory may be released by a subsequent call to the function <b
style='mso-bidi-font-weight:normal'>mirkill</b>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>An
integer initial value for the big/flash number.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>A pointer to the reserved memory.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Example:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>flash x;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>x=mirvar(8);<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><span style='mso-tab-count:2'>††††††††††††††††††††††† </span>Creates
a flash variable<i style='mso-bidi-font-style:normal'> x=8</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc2310"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.1.38<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>mirvar_mem</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>flash
<b style='mso-bidi-font-weight:normal'>mirvar_mem</b>(mem,index)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style='mso-tab-count:2'>††††††††† </span>char
*mem;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style='mso-tab-count:2'>††††††††† </span>int
index;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><o:p>&nbsp;</o:p></span></p><p class=MsoIndexHeading><span lang=EN-GB>Module:<span style='mso-tab-count:
1'>††††††††† </span>mrcore.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Initialises
memory for a big/flash variable from a pre-allocated byte array <i
style='mso-bidi-font-style:normal'>mem</i>. This array may be created from the
heap by a call to <b style='mso-bidi-font-weight:normal'>memalloc</b>, or in some
other way. This is quicker than multiple calls to <b style='mso-bidi-font-weight:
normal'>mirvar</b>.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A pointer to
the pre-allocated array <i style='mso-bidi-font-style:normal'>mem</i>, and an
index into that array. Each index should be unique.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Return value:<span style='mso-tab-count:1'>†† </span>An initialised
big/flash variable</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Restrictions:<span style='mso-tab-count:1'>††† </span>Sufficient
memory must have been allocated and pointed to by <i style='mso-bidi-font-style:
normal'>mem</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Example:<span style='mso-tab-count:1'>†††††††† </span>See <i
style='mso-bidi-font-style:normal'>brent.c</i> for an example of use.<br
clear=all style='page-break-before:always'><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc2328"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.1.39<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>multiply</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>void <b
style='mso-bidi-font-weight:normal'>multiply</b>(x,y,z)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big x,y,z;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrarth2.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Multiplies two big numbers </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Three
big numbers <i style='mso-bidi-font-style:normal'>x,y</i> and <i
style='mso-bidi-font-style:normal'>z</i>. On exit <i style='mso-bidi-font-style:
normal'>z=x.y<o:p></o:p></i></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><b style='mso-bidi-font-weight:normal'><span lang=EN-GB style='font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:"Times New Roman";mso-fareast-font-family:
"Times New Roman";mso-ansi-language:EN-GB;mso-fareast-language:AR-SA;
mso-bidi-language:AR-SA'><br clear=all style='page-break-before:always'></span></b><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc2343"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.1.40<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>negify *</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>void <b
style='mso-bidi-font-weight:normal'>negify</b>(x,y)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>flash x,y;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrcore.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Negates a big/flash number.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Two
big/flash numbers <i style='mso-bidi-font-style:normal'>x</i> and <i
style='mso-bidi-font-style:normal'>y</i>. On exit <i style='mso-bidi-font-style:
normal'>y=-x</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>None. Note that </span><span lang=EN-GB style='font-family:Courier'>negify(x,x)</span><span
lang=EN-GB> is valid and sets <i style='mso-bidi-font-style:normal'>x=-x<o:p></o:p></i></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc2359"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.1.41<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>normalise</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=FR style='mso-ansi-language:FR'>Function:</span><span
lang=FR style='font-family:Courier;mso-ansi-language:FR'><span
style='mso-tab-count:1'>††† </span>int <b style='mso-bidi-font-weight:normal'>normalise</b>(x,y)<o:p></o:p></span></p><p class=MsoNormal><span lang=FR style='font-family:Courier;mso-ansi-language:
FR'><span style='mso-tab-count:2'>††††††††† </span></span><span lang=EN-GB
style='font-family:Courier'>big x,y;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrarth2.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Description<span style='mso-tab-count:1'>†††† </span>Multiplies a
big number such that its Most Significant Word is greater than half the number
base. If such a number is used as a divisor by <b style='mso-bidi-font-weight:
normal'>divide</b>, the division will be carried out faster. If many divisions
by the same divisor are required, it makes sense to normalise the divisor just
once beforehand.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Two
big numbers <i style='mso-bidi-font-style:normal'>x</i> and <i
style='mso-bidi-font-style:normal'>y</i>. On exit <i style='mso-bidi-font-style:
normal'>y=n.x</i>. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>Returns <i style='mso-bidi-font-style:normal'>n</i>, the
normalising multiplier.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>Use with care. Used internally.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><b style='mso-bidi-font-weight:normal'><span lang=EN-GB style='font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:"Times New Roman";mso-fareast-font-family:
"Times New Roman";mso-ansi-language:EN-GB;mso-fareast-language:AR-SA;
mso-bidi-language:AR-SA'><br clear=all style='page-break-before:always'></span></b><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc2377"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.1.42<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>numdig</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>int <b
style='mso-bidi-font-weight:normal'>numdig</b>(x)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big x;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrcore.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Determines the number of digits in a big number.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A
big number <i style='mso-bidi-font-style:normal'>x</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>The number of digits in <i style='mso-bidi-font-style:normal'>x</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc2393"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.1.43<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>otnum</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>int <b
style='mso-bidi-font-weight:normal'>otnum</b>(x,f)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>flash x;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>FILE *f;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrio1.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Description<span style='mso-tab-count:1'>†††† </span>Output a big or
flash number to the screen or to a file, using as number base the value
specified in the initial call to <b style='mso-bidi-font-weight:normal'>mirsys</b>.
A flash number will be converted to radix-point representation if the instance
variable RPOINT=ON. Otherwise it will be output as a fraction.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Parameters<span style='mso-tab-count:1'>††††† </span>A big/flash
number <i style='mso-bidi-font-style:normal'>x</i> and a file descriptor <i
style='mso-bidi-font-style:normal'>f</i>. If <i style='mso-bidi-font-style:
normal'>f</i> is <i style='mso-bidi-font-style:normal'>stdout</i> then output
will be to the screen, otherwise to the file opened with descriptor <i
style='mso-bidi-font-style:normal'>f</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>Number of output characters.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Restrictions<span style='mso-tab-count:1'>††† </span>The number base
specified in <b style='mso-bidi-font-weight:normal'>mirsys</b> must be less
than or equal to 256. If not, use <b style='mso-bidi-font-weight:normal'>cotnum</b>
instead.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><b style='mso-bidi-font-weight:normal'><span lang=EN-GB style='font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:"Times New Roman";mso-fareast-font-family:
"Times New Roman";mso-ansi-language:EN-GB;mso-fareast-language:AR-SA;
mso-bidi-language:AR-SA'><br clear=all style='page-break-before:always'></span></b><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc2409"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.1.44<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>otstr</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>int <b
style='mso-bidi-font-weight:normal'>otstr</b>(x,s)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>flash x;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>char *s;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrio1.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Description<span style='mso-tab-count:1'>†††† </span>Output a big or
flash number to the specified string, using as number base the value specified
in the initial call to <b style='mso-bidi-font-weight:normal'>mirsys</b>. A
flash number will be converted to radix-point representation if the instance
variable RPOINT=ON. Otherwise it will be output as a fraction.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Parameters<span style='mso-tab-count:1'>††††† </span>A big/flash
number <i style='mso-bidi-font-style:normal'>x</i> and a character string <i
style='mso-bidi-font-style:normal'>s</i>. On exit <i style='mso-bidi-font-style:
normal'>s</i> will contain a representation of <i style='mso-bidi-font-style:
normal'>x</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>Number of output characters.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Restrictions<span style='mso-tab-count:1'>††† </span>The number base
specified in <b style='mso-bidi-font-weight:normal'>mirsys</b> must be less than
or equal to 256. If not, use <b style='mso-bidi-font-weight:normal'>cotstr</b>
instead.</span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><span style='mso-tab-count:1'>††††††††††††††††††††††† </span>Note
that there is nothing to prevent this routine from overflowing the limits of
the user supplied character array <i style='mso-bidi-font-style:normal'>s</i>,
causing obscure runtime problems. It is the programmers responsibility to
ensure that <i style='mso-bidi-font-style:normal'>s</i> is big enough to
contain the number output to it. Alternatively use the internally declared
instance string <b style='mso-bidi-font-weight:normal'>IOBUFF</b>, which is of
size <b style='mso-bidi-font-weight:normal'>IOBSIZ</b>. If this array overflows
a MIRACL error <b style='mso-bidi-font-weight:normal'>will</b> be flagged.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc2427"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.1.45<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>premult</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>void <b
style='mso-bidi-font-weight:normal'>premult</b>(x,n,z)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>int n<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big x,z;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrarth1.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Multiplies a big number by an integer</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Two
big numbers <i style='mso-bidi-font-style:normal'>x</i> and <i
style='mso-bidi-font-style:normal'>z</i>, and an integer <i style='mso-bidi-font-style:
normal'>n</i>.</span></p><p class=MsoNormal><span lang=EN-GB><span style='mso-tab-count:2'>††††††††††††††††††††††† </span>On
exit <i style='mso-bidi-font-style:normal'>z=n.x<o:p></o:p></i></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>None<br clear=all style='page-break-before:always'><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc2444"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.1.46<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>putdig</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>void <b
style='mso-bidi-font-weight:normal'>putdig</b>(n,x,i)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big x;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>int i,n;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrcore.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Set a digit of a big number to a given value </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A
big number <i style='mso-bidi-font-style:normal'>x</i>, a digit number <i
style='mso-bidi-font-style:normal'>i</i>, and its new value <i
style='mso-bidi-font-style:normal'>n</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>The digit indicated must exist.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc2460"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.1.47<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>remain</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>int <b style='mso-bidi-font-weight:normal'>remain</b>(x,n)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big x;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>int n;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrarth1.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Finds the integer remainder, when a big number is divided by an
integer.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A
big number <i style='mso-bidi-font-style:normal'>x</i>, and an integer <i
style='mso-bidi-font-style:normal'>n</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>The integer remainder<br clear=all style='page-break-before:always'><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc2474"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.1.48<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>set_io_buffer_size</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function: <span style='mso-tab-count:1'>††††††† </span></span><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>void
set_io_buffer_size(len)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style='mso-tab-count:2'>††††††††† </span>int
len;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrcore.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Sets the size
of the input/output buffer. By default this is set to 1024, but programs that
need to handle very large numbers may require a larger I/O buffer.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>The size of I/O
buffer required.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Return value:<span style='mso-tab-count:1'>†† </span>None</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Restrictions:<span style='mso-tab-count:1'>††† </span>Destroys the
current contents of the I/O buffer</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><span lang=EN-GB style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:
"Times New Roman";mso-fareast-font-family:"Times New Roman";mso-ansi-language:
EN-GB;mso-fareast-language:AR-SA;mso-bidi-language:AR-SA'><br clear=all
style='page-break-before:always'></span><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc2490"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.1.49<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>set_user_function</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>void
set_user_function(func)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style='mso-tab-count:2'>††††††††† </span>BOOL
(*user)(void);<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoIndexHeading><span lang=EN-GB>Module:<span style='mso-tab-count:
1'>††††††††† </span>mrcore.c</span></p><p class=MsoIndex1><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoBodyTextIndent><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Supplies a user-specified function, which is periodically called
during some of the more time-consuming MIRACL functions, particularly those
involved in modular exponentiation and in finding large prime numbers. The
supplied function must take no parameters and return a BOOL value. Normally
this should be TRUE. If FALSE then MIRACL will attempt to abort its current
operation. In this case the function should continue to return FALSE until
control is returned to the calling program. The user-supplied function should
normally include only a few instructions, and no loops, otherwise it may
adversely impact the speed of MIRACL functions.</span></p><p class=MsoBodyTextIndent><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoBodyTextIndent><span lang=EN-GB><span style='mso-tab-count:1'>††††††††††††††††††††††† </span>Once
MIRACL is initialised, this function may be called multiple times with a new
supplied function. If no longer required, call with a NULL parameter. </span></p><p class=MsoBodyTextIndent><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoBodyTextIndent><span lang=EN-GB>Parameters:<span style='mso-tab-count:
1'>†††† </span>A pointer to a user-supplied function, or NULL if not required.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Example:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>/*
Windows Message Pump */<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:8.0pt;mso-bidi-font-size:
10.0pt;font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:36.0pt;text-indent:36.0pt'><span
lang=EN-GB style='font-size:8.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>static BOOL idle()<o:p></o:p></span></p><p class=MsoNormal style='margin-left:36.0pt;text-indent:36.0pt'><span
lang=EN-GB style='font-size:8.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>{<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:8.0pt;mso-bidi-font-size:
10.0pt;font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'><span
style="mso-spacerun:yes">††† </span><span style='mso-tab-count:3'>††††††††††††††††† </span>MSG
msg;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:8.0pt;mso-bidi-font-size:
10.0pt;font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'><span
style="mso-spacerun:yes">††† </span><span style='mso-tab-count:3'>††††††††††††††††† </span>if
(PeekMessage(&amp;msg,NULL,0,0,PM_NOREMOVE))<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:8.0pt;mso-bidi-font-size:
10.0pt;font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'><span
style="mso-spacerun:yes">††† </span><span style='mso-tab-count:3'>††††††††††††††††† </span>{<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:8.0pt;mso-bidi-font-size:
10.0pt;font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'><span
style="mso-spacerun:yes">†††††††† </span><span style='mso-tab-count:3'>††††††††††††††††††† </span>if
(msg.message&#33;=WM_QUIT)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:8.0pt;mso-bidi-font-size:
10.0pt;font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'><span
style='mso-tab-count:2'>††††††††††††† </span><span
style="mso-spacerun:yes">†</span><span style='mso-tab-count:2'>†††††††††††† </span>{<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:8.0pt;mso-bidi-font-size:
10.0pt;font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'><span
style="mso-spacerun:yes">††††††††††† </span><span style='mso-tab-count:4'>††††††††††††††††††††††† </span>if
(PeekMessage(&amp;msg,NULL,0,0,PM_REMOVE)) <o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:8.0pt;mso-bidi-font-size:
10.0pt;font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'><span
style="mso-spacerun:yes">††††††††††† </span><span style='mso-tab-count:4'>††††††††††††††††††††††† </span>{
/* do a Message Pump */<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:8.0pt;mso-bidi-font-size:
10.0pt;font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'><span
style="mso-spacerun:yes">†††††††††††††††††† </span><span style='mso-tab-count:
4'>††††††††††††††††††††††† </span>TranslateMessage(&amp;msg);<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:8.0pt;mso-bidi-font-size:
10.0pt;font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'><span
style="mso-spacerun:yes">†††††††††††††††††† </span><span style='mso-tab-count:
4'>††††††††††††††††††††††† </span>DispatchMessage(&amp;msg);<span
style="mso-spacerun:yes">† </span><o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:8.0pt;mso-bidi-font-size:
10.0pt;font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'><span
style="mso-spacerun:yes">††††††††††† </span><span style='mso-tab-count:4'>††††††††††††††††††††††† </span>}<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:8.0pt;mso-bidi-font-size:
10.0pt;font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'><span
style='mso-tab-count:2'>††††††††††††† </span><span
style="mso-spacerun:yes">†</span><span style='mso-tab-count:2'>†††††††††††† </span>}<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:8.0pt;mso-bidi-font-size:
10.0pt;font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'><span
style="mso-spacerun:yes">†††††††† </span><span style='mso-tab-count:3'>††††††††††††††††††† </span>else<span
style="mso-spacerun:yes">††† </span>return FALSE;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:8.0pt;mso-bidi-font-size:
10.0pt;font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'><span
style="mso-spacerun:yes">†††† </span><span style='mso-tab-count:3'>†††††††††††††††† </span>}<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:8.0pt;mso-bidi-font-size:
10.0pt;font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'><span
style='mso-tab-count:1'>†††††† </span><span style="mso-spacerun:yes">†</span><span
style='mso-tab-count:2'>†††††††††††† </span>return TRUE;<o:p></o:p></span></p><p class=MsoNormal style='margin-left:36.0pt;text-indent:36.0pt'><span
lang=EN-GB style='font-size:8.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'>}<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:8.0pt;mso-bidi-font-size:
10.0pt;font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style='mso-tab-count:2'>††††††††† </span>ÖÖ.<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style='mso-tab-count:2'>††††††††† </span>set_user_function(idle);<br
clear=all style='page-break-before:always'></span><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc2528"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.1.50<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>size *</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>int <b
style='mso-bidi-font-weight:normal'>size</b>(x)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big x;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrcore.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Description<span style='mso-tab-count:1'>†††† </span>Tries to
convert big number to a simple integer. Also useful for testing the sign of
big/flash variable as in: </span><span lang=EN-GB style='font-family:Courier'>if
(size(x)&lt;0)</span><span lang=EN-GB> ...</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A
big number <i style='mso-bidi-font-style:normal'>x</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Return value:<span style='mso-tab-count:1'>† </span>The value of <i
style='mso-bidi-font-style:normal'>x</i> as an integer. If this is not possible
(because <i style='mso-bidi-font-style:normal'>x</i> is too big) it returns the
value plus or minus <b style='mso-bidi-font-weight:normal'>MR_TOOBIG.<o:p></o:p></b></span></p><p class=MsoIndexHeading><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc2544"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.1.51<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>subdiv</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>int <b
style='mso-bidi-font-weight:normal'>subdiv</b>(x,n,z)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>int n;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big x,z;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrarth1.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Divide a big number by an integer.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Two
big numbers<i style='mso-bidi-font-style:normal'> x</i> and <i
style='mso-bidi-font-style:normal'>z</i>, and an integer <i style='mso-bidi-font-style:
normal'>n</i>.</span></p><p class=MsoNormal><span lang=EN-GB><span style='mso-tab-count:2'>††††††††††††††††††††††† </span>On
exit <i style='mso-bidi-font-style:normal'>z=x/n</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>The integer remainder.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>The value of <i style='mso-bidi-font-style:normal'>n</i> must not
be zero.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><span lang=EN-GB style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:
"Times New Roman";mso-fareast-font-family:"Times New Roman";mso-ansi-language:
EN-GB;mso-fareast-language:AR-SA;mso-bidi-language:AR-SA'><br clear=all
style='page-break-before:always'></span><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc2562"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.1.52<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>subdivisible</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>BOOL <b style='mso-bidi-font-weight:
normal'>subdivisible</b>(x,n)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big x;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style="mso-spacerun:yes">†</span><span style='mso-tab-count:2'>†††††††† </span>int
n;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrarth1.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Tests a big number for divisibility by an integer.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A
big number <i style='mso-bidi-font-style:normal'>x</i> and an integer <i
style='mso-bidi-font-style:normal'>n</i>. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>TRUE is <i style='mso-bidi-font-style:normal'>n</i> divides <i
style='mso-bidi-font-style:normal'>x</i> exactly, otherwise FALSE.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>The value of <i style='mso-bidi-font-style:normal'>n</i> must not
be zero.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc2578"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.1.53<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>subtract</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>void <b
style='mso-bidi-font-weight:normal'>subtract</b>(x,y,z)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big x,y,z;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrarth0.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Subtracts two big numbers.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Three
big numbers <i style='mso-bidi-font-style:normal'>x</i>, <i style='mso-bidi-font-style:
normal'>y</i> and <i style='mso-bidi-font-style:normal'>z</i>. On exit <i
style='mso-bidi-font-style:normal'>z=x-y</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc2593"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.1.54<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>zero *</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>void <b
style='mso-bidi-font-weight:normal'>zero</b>(x) <o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>flash x;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrcore.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Sets a big or flash number to zero</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A
big or flash number <i style='mso-bidi-font-style:normal'>x</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><b style='mso-bidi-font-weight:normal'><i style='mso-bidi-font-style:normal'><span
lang=EN-GB style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:"Times New Roman";
mso-fareast-font-family:"Times New Roman";mso-ansi-language:EN-GB;mso-fareast-language:
AR-SA;mso-bidi-language:AR-SA'><br clear=all style='page-break-before:always'></span></i></b><h2 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level2 lfo1;tab-stops:
0cm'><a name="_toc2606"></a><&#33;[if &#33;supportLists]><span lang=EN-GB
style='mso-fareast-font-family:Arial;mso-bidi-font-family:Arial'><span
style='mso-list:Ignore'>9.2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>Advanced Arithmetic Routines</span></h2><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc2609"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>bigdig</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>void <b
style='mso-bidi-font-weight:normal'>bigdig</b>(n,b,x)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>int n,b;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big x;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrrand.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Generates a big
random number of given length. Uses the built-in simple random number generator
initialised by <b style='mso-bidi-font-weight:normal'>irand.<o:p></o:p></b></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Parameters<span style='mso-tab-count:1'>††††† </span>A big number <i
style='mso-bidi-font-style:normal'>x</i> and two integers <i style='mso-bidi-font-style:
normal'>n</i> and <i style='mso-bidi-font-style:normal'>b</i>. On exit <i
style='mso-bidi-font-style:normal'>x</i> contains a big random number <i
style='mso-bidi-font-style:normal'>n</i> digits long to base <i
style='mso-bidi-font-style:normal'>b</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>The base <i style='mso-bidi-font-style:normal'>b</i> must be
printable, that is 2 </span><span lang=EN-GB style='font-family:Symbol'>£</span><span
lang=EN-GB><i style='mso-bidi-font-style:normal'>b</i></span><span
lang=EN-GB style='font-family:Symbol'>£</span><span lang=EN-GB> 256.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Example:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>bigdig(100,10,x);<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><span style='mso-tab-count:2'>††††††††††††††††††††††† </span>This
generates a 100 decimal digit random number </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc2630"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>bigrand</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>void <b
style='mso-bidi-font-weight:normal'>bigrand</b>(w,x)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big w,x;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrrand.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Generates a big
random number. Uses the built-in simple random number generator initialised by <b
style='mso-bidi-font-weight:normal'>irand.<o:p></o:p></b></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Two big numbers
<i style='mso-bidi-font-style:normal'>w</i> and <i style='mso-bidi-font-style:
normal'>x</i>. On exit <i style='mso-bidi-font-style:normal'>x </i>is a big
random number in the range <i style='mso-bidi-font-style:normal'>0</i></span><i
style='mso-bidi-font-style:normal'><span lang=EN-GB style='font-family:Symbol'>£</span><span
lang=EN-GB>x&lt;w</span></i><span lang=EN-GB>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><b style='mso-bidi-font-weight:normal'><span lang=EN-GB style='font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:"Times New Roman";mso-fareast-font-family:
"Times New Roman";mso-ansi-language:EN-GB;mso-fareast-language:AR-SA;
mso-bidi-language:AR-SA'><br clear=all style='page-break-before:always'></span></b><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc2645"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.3<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>brick_init</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>BOOL
<b style='mso-bidi-font-weight:normal'>brick_init</b>(binst,g,n,w,nb)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style='mso-tab-count:2'>††††††††† </span>brick
*binst;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><span style='mso-tab-count:2'>††††††††††††††††††††††† </span></span><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>big
g,n;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style='mso-tab-count:2'>††††††††† </span>int
w,nb;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoIndexHeading><span lang=EN-GB>Module:<span style='mso-tab-count:
1'>††††††††† </span>mrbrick.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Initialises an
instance of the Comb method for modular exponentiation with precomputation. </span><span
lang=EN-GB style='mso-bidi-font-size:12.0pt'>I</span><span lang=EN-GB>nternally
memory is allocated for </span><span lang=EN-GB style='mso-bidi-font-size:12.0pt'>2<i
style='mso-bidi-font-style:normal'><sup>w</sup></i> big numbers which will be
precomputed and stored. For bigger <i style='mso-bidi-font-style:normal'>w</i>
more space is required, but the exponentiation is quicker. Try <i
style='mso-bidi-font-style:normal'>w</i>=8.<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A pointer to
the current instance <i style='mso-bidi-font-style:normal'>binst</i>, the fixed
generator <i style='mso-bidi-font-style:normal'>g</i>, the modulus <i
style='mso-bidi-font-style:normal'>n</i>, the window size <i style='mso-bidi-font-style:
normal'>w</i>, and the maximum number of bits to be used in the exponent <i
style='mso-bidi-font-style:normal'>nb</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>TRUE if all went well, FALSE if there was a problem.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Restrictions:<span style='mso-tab-count:1'>†† </span>Note: If
MR_STATIC is defined in <i style='mso-bidi-font-style:normal'>mirdef.h</i>,
then the <i style='mso-bidi-font-style:normal'>g</i> parameter in this function
is replaced by an </span><span lang=EN-GB style='font-family:"Courier New"'>mr_small
*</span><span lang=EN-GB> pointer to a precomputed table. In this case the
function returns a </span><span lang=EN-GB style='font-family:"Courier New"'>void</span><span
lang=EN-GB>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc2663"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.4<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>brick_end *</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>void
<b style='mso-bidi-font-weight:normal'>brick_end</b>(binst)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style='mso-tab-count:2'>††††††††† </span>brick
*binst<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoIndexHeading><span lang=EN-GB>Module:<span style='mso-tab-count:
1'>††††††††† </span>mrbrick.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Cleans up after an application of the Comb method.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A
pointer to the current instance</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>None<span style='mso-tab-count:1'>†† </span><br clear=all
style='page-break-before:always'><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc2678"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.5<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>crt</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>void <b
style='mso-bidi-font-weight:normal'>crt</b>(pbc,rem,x)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big_chinese *pbc;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big *rem;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big x;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrcrt.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description<span style='mso-tab-count:1'>†††† </span>Applies
Chinese Remainder Theorem.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A pointer <i
style='mso-bidi-font-style:normal'>pbc</i> to the current instance. On exit <i
style='mso-bidi-font-style:normal'>x</i> contains the big number which yields
the given big remainders <i style='mso-bidi-font-style:normal'>rem[.]</i> when
it is divided by the big moduli specified in a prior call to <b
style='mso-bidi-font-weight:normal'>crt_init</b>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>The routine <b style='mso-bidi-font-weight:normal'>crt_init</b>
must be called first.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc2697"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.6<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>crt_end *</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>void <b style='mso-bidi-font-weight:
normal'>crt_end</b>(pbc)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big_chinese *pbc;</span><span
lang=EN-GB></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrcrt.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Cleans up after
an application of the Chinese Remainder Theorem.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A
pointer to the current instance of the Chinese Remainder Theorem.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>None<br clear=all style='page-break-before:always'><a name="_toc2711"></a><b style='mso-bidi-font-weight:normal'>crt_init</b></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>BOOL <b
style='mso-bidi-font-weight:normal'>crt_init</b>(pbc,np,m)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style="mso-spacerun:yes">†</span><span style='mso-tab-count:2'>†††††††† </span>big_chinese
*pbc;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>int np;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big *m;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrcrt.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Initialises an
instance of the Chinese Remainder Theorem. Some internal workspace is
allocated.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A pointer to
the current instance <i style='mso-bidi-font-style:normal'>pbc</i>, the number
of co-prime moduli <i style='mso-bidi-font-style:normal'>np</i>, and an array
of at least two big moduli <i style='mso-bidi-font-style:normal'>m[.]<o:p></o:p></i></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>TRUE if all went well, FALSE if there was a problem.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc2729"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.8<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>egcd</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=FR style='mso-ansi-language:FR'>Function:</span><span
lang=FR style='font-family:Courier;mso-ansi-language:FR'><span
style='mso-tab-count:1'>††† </span>int <b style='mso-bidi-font-weight:normal'>egcd</b>(x,y,z)<o:p></o:p></span></p><p class=MsoNormal><span lang=FR style='font-family:Courier;mso-ansi-language:
FR'><span style='mso-tab-count:2'>††††††††† </span></span><span lang=EN-GB
style='font-family:Courier'>big x,y,z;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrgcd.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Calculates the
Greatest Common Divisor of two big numbers.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Three
big numbers <i style='mso-bidi-font-style:normal'>x, y</i> and <i
style='mso-bidi-font-style:normal'>z</i>.</span></p><p class=MsoNormal><span lang=EN-GB><span style='mso-tab-count:2'>††††††††††††††††††††††† </span></span><span
lang=EN-IE style='mso-ansi-language:EN-IE'>On exit <i style='mso-bidi-font-style:
normal'>z=gcd(x,y)<o:p></o:p></i></span></p><p class=MsoNormal><span lang=EN-IE style='mso-ansi-language:EN-IE'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>GCD as integer, if possible, otherwise <b style='mso-bidi-font-weight:
normal'>MR_TOOBIG<o:p></o:p></b></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><span lang=EN-GB style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:
"Times New Roman";mso-fareast-font-family:"Times New Roman";mso-ansi-language:
EN-GB;mso-fareast-language:AR-SA;mso-bidi-language:AR-SA'><br clear=all
style='page-break-before:always'></span><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc2748"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.9<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>expb2</span></h3><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>void <b
style='mso-bidi-font-weight:normal'>expb2</b>(n,x)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>int n;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big x;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrbits.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Calculates 2 to the power of an integer as a big</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>An
integer <i style='mso-bidi-font-style:normal'>n</i>, and a big result <i
style='mso-bidi-font-style:normal'>x</i>. </span></p><p class=MsoNormal><span lang=EN-GB><span style='mso-tab-count:2'>††††††††††††††††††††††† </span>On
exit <i style='mso-bidi-font-style:normal'>x=2<sup>n</sup>.<o:p></o:p></i></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Example:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>expb2(1398269,x);<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>decr(x,1,x);<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>mip-&gt;IOBASE=10;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>cotnum(x,stdout);<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt'><span lang=EN-GB>This calculates
and prints out the largest known prime number (on a true 32-bit computer with
lots of memory&#33;)</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc2772"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.10<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>expint</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>void <b
style='mso-bidi-font-weight:normal'>expint</b>(b,n,x)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>int b,n;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big x;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrarth3.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Calculates an integer to the power of an integer as a big</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>An
integer <i style='mso-bidi-font-style:normal'>b</i>, an integer <i
style='mso-bidi-font-style:normal'>n</i>, and a big result <i style='mso-bidi-font-style:
normal'>x</i>. </span></p><p class=MsoNormal><span lang=EN-GB><span style='mso-tab-count:2'>††††††††††††††††††††††† </span>On
exit <i style='mso-bidi-font-style:normal'>x=b<sup>n</sup>.<o:p></o:p></i></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>None<br clear=all style='page-break-before:always'><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc2789"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.11<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>fft_mult</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=FR style='mso-ansi-language:FR'>Function:</span><span
lang=FR style='font-family:Courier;mso-ansi-language:FR'><span
style='mso-tab-count:1'>††† </span>void <b style='mso-bidi-font-weight:normal'>fft_mult</b>(x,y,z)<o:p></o:p></span></p><p class=MsoNormal><span lang=FR style='font-family:Courier;mso-ansi-language:
FR'><span style='mso-tab-count:2'>††††††††† </span></span><span lang=EN-GB
style='font-family:Courier'>big x,y,z;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrfast.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Multiplies two
big numbers, using the Fast Fourier Method. See [Pollard71].</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Three
big numbers <i style='mso-bidi-font-style:normal'>x, y</i> and <i
style='mso-bidi-font-style:normal'>z</i>. On exit <i style='mso-bidi-font-style:
normal'>z=x.y<o:p></o:p></i></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Restrictions:<span style='mso-tab-count:1'>†† </span>Should only be
used on a 32-bit computer when <i style='mso-bidi-font-style:normal'>x</i> and <i
style='mso-bidi-font-style:normal'>y</i> are very large, at least 1000 decimal
digits.</span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Example:<span style='mso-tab-count:1'>†††††††† </span>See <i
style='mso-bidi-font-style:normal'>mersenne.c<br clear=all style='page-break-before:
always'></i><a name="_toc2805"></a><b style='mso-bidi-font-weight:normal'>gprime</b></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>void <b
style='mso-bidi-font-weight:normal'>gprime</b>(n)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>int n;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrprime.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Generates all
prime numbers up to a certain limit into the instance array PRIMES, terminated
by zero. This array is used internally by the routines <b style='mso-bidi-font-weight:
normal'>isprime</b> and <b style='mso-bidi-font-weight:normal'>nxprime</b>. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A positive
integer <i style='mso-bidi-font-style:normal'>n</i> indicating the maximum
prime number to be generated. If <i style='mso-bidi-font-style:normal'>n=0</i>
the PRIMES array is deleted.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc2818"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.13<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>hamming</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:"Courier New"'>int <b style='mso-bidi-font-weight:
normal'>hamming</b>(n)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New"'><span
style='mso-tab-count:2'>††††††††† </span>big n;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrarth1.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Calculates the
hamming weight of a big number (in fact the number of 1ís in its binary
representation.)</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A
big number <i style='mso-bidi-font-style:normal'>x</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>Hamming weight of<span style="mso-spacerun:yes">† </span><i
style='mso-bidi-font-style:normal'>x<o:p></o:p></i></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New"'><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc2831"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.14<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>invers *</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>unsigned
int <b style='mso-bidi-font-weight:normal'>invers</b>(x,y)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>unsigned int x,y;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrsmall.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Calculates the inverse of an integer modulus a co-prime integer</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>An
integer <i style='mso-bidi-font-style:normal'>x</i> and a co-prime integer <i
style='mso-bidi-font-style:normal'>y</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span><i style='mso-bidi-font-style:normal'>x<sup>-1</sup><span
style="mso-spacerun:yes">† </span>mod y<o:p></o:p></i></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>Result unpredictable if <i style='mso-bidi-font-style:normal'>x</i>
and<i style='mso-bidi-font-style:normal'> y</i> not co-prime<br clear=all
style='page-break-before:always'><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc2846"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.15<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>isprime</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>BOOL <b
style='mso-bidi-font-weight:normal'>isprime</b>(x)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big x;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrprime.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Tests whether
or not a big number is prime using a probabilistic primality test. The number is
assumed to be prime if it passes this test <b style='mso-bidi-font-weight:normal'>NTRY</b>
times, where <b style='mso-bidi-font-weight:normal'>NTRY</b> is an instance
variable with a default initialisation in routine <b style='mso-bidi-font-weight:
normal'>mirsys</b>.</span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><span style='mso-tab-count:1'>††††††††††††††††††††††† </span>NOTE:
This routine first test divides <i style='mso-bidi-font-style:normal'>x</i> by
the list of small primes stored in the instance array <b style='mso-bidi-font-weight:
normal'>PRIMES</b>. The testing of larger primes will be significantly faster
in many cases if this list is increased. See <b style='mso-bidi-font-weight:
normal'>gprime</b>. By default only the small primes less than 1000 are used.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A
big number <i style='mso-bidi-font-style:normal'>x</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Return value:<span style='mso-tab-count:1'>† </span>Returns the
boolean value TRUE if <i style='mso-bidi-font-style:normal'>x</i> is (almost
certainly) prime, otherwise FALSE.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc2865"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.16<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>jac</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>int <b
style='mso-bidi-font-weight:normal'>jac</b>(x,n)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>unsigned int x,n;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrsmall.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Calculates the value of the Jacobi symbol. See [Reisel].</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Two
unsigned numbers <i style='mso-bidi-font-style:normal'>x</i> and <i
style='mso-bidi-font-style:normal'>n<o:p></o:p></i></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>The value of<i style='mso-bidi-font-style:normal'> (x/n)</i> as +1
or -1, or 0 if symbol undefined</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><span lang=EN-GB style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:
"Times New Roman";mso-fareast-font-family:"Times New Roman";mso-ansi-language:
EN-GB;mso-fareast-language:AR-SA;mso-bidi-language:AR-SA'><br clear=all
style='page-break-before:always'></span><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc2881"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.17<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>jack</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>int <b
style='mso-bidi-font-weight:normal'>jack</b>(x,n)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big x,n;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrjack.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Calculates the value of the Jacobi symbol. See [Reisel].</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Two
big numbers <i style='mso-bidi-font-style:normal'>x</i> and <i
style='mso-bidi-font-style:normal'>n<o:p></o:p></i></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>The value of<i style='mso-bidi-font-style:normal'> (x/n)</i> as +1
or -1, or 0 if symbol undefined</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><span lang=EN-GB style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:
"Times New Roman";mso-fareast-font-family:"Times New Roman";mso-ansi-language:
EN-GB;mso-fareast-language:AR-SA;mso-bidi-language:AR-SA'><br clear=all
style='page-break-before:always'></span><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc2897"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.18<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>logb2</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>int <b
style='mso-bidi-font-weight:normal'>logb2</b>(x)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big x;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrbits.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Calculates the
approximate integer log to the base 2 of a big number (in fact the number of
bits in it.)</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A
big number <i style='mso-bidi-font-style:normal'>x</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>Number of bits in <i style='mso-bidi-font-style:normal'>x<o:p></o:p></i></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc2913"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.19<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>lucas</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=PT-BR style='mso-ansi-language:PT-BR'>Function:<span
style='mso-tab-count:1'>†††††††† </span></span><span lang=PT-BR
style='font-family:Courier;mso-ansi-language:PT-BR'>void <b style='mso-bidi-font-weight:
normal'>lucas</b>(x,e,n,vp,v)<o:p></o:p></span></p><p class=MsoNormal><span lang=PT-BR style='font-family:Courier;mso-ansi-language:
PT-BR'><span style='mso-tab-count:2'>††††††††† </span></span><span lang=EN-GB
style='font-family:Courier'>big x,e,n,vp,v<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrlucas.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Performs Lucas
modular exponentiation.<span style="mso-spacerun:yes">† </span>Uses Montgomery
arithmetic internally. This function can be speeded up further for particular
moduli, by invoking special assembly language routines to implement Montgomery
arithmetic. See <b style='mso-bidi-font-weight:normal'>powmod</b>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Five
big numbers <i style='mso-bidi-font-style:normal'>x, e, n, vp </i>and<i
style='mso-bidi-font-style:normal'> v</i>.</span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB><span style='mso-tab-count:1'>††††††††††††††††††††††† </span>On
exit <i style='mso-bidi-font-style:normal'>v</i>=V<i style='mso-bidi-font-style:
normal'><sub>e</sub></i>(<i style='mso-bidi-font-style:normal'>x</i>) mod <i
style='mso-bidi-font-style:normal'>n</i> and <i style='mso-bidi-font-style:
normal'>vp</i>=V<i style='mso-bidi-font-style:normal'><sub>e-1</sub></i>(<i
style='mso-bidi-font-style:normal'>x</i>) mod <i style='mso-bidi-font-style:
normal'>n</i> where <i style='mso-bidi-font-style:normal'>n</i> is the current
Montgomery modulus. Only <i style='mso-bidi-font-style:normal'>v</i> is
returned if <i style='mso-bidi-font-style:normal'>v</i> and <i
style='mso-bidi-font-style:normal'>vp</i> are not distinct.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Return value:<span
style='mso-tab-count:1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Restrictions:<span style='mso-tab-count:1'>†† </span>The value of <i
style='mso-bidi-font-style:normal'>n</i> must be odd. </span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Note:<span style='mso-tab-count:1'>†††††††††††††† </span>The
ìsisterî Lucas function U<i style='mso-bidi-font-style:normal'><sub>e</sub>(x)</i>
can, if required,<span style="mso-spacerun:yes">† </span>be calculated as</span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal align=center style='margin-left:70.9pt;text-align:center;
text-indent:-70.9pt'><span lang=PT-BR style='font-size:14.0pt;mso-bidi-font-size:
10.0pt;mso-ansi-language:PT-BR'>U<i style='mso-bidi-font-style:normal'><sub>e</sub>(x)
</i></span><i style='mso-bidi-font-style:normal'><span lang=EN-GB
style='font-size:14.0pt;mso-bidi-font-size:10.0pt;font-family:Symbol'>∫</span></i><i
style='mso-bidi-font-style:normal'><span lang=PT-BR style='font-size:14.0pt;
mso-bidi-font-size:10.0pt;mso-ansi-language:PT-BR'> [x.</span></i><span
lang=PT-BR style='font-size:14.0pt;mso-bidi-font-size:10.0pt;mso-ansi-language:
PT-BR'>V<i style='mso-bidi-font-style:normal'><sub>e</sub>(x)&#8211; 2.</i>V<i
style='mso-bidi-font-style:normal'><sub>e-1</sub>(x)]/(x<sup>2</sup> &#8211; 4)
</i>mod <i style='mso-bidi-font-style:normal'>n<o:p></o:p></i></span></p><p class=MsoNormal><span lang=PT-BR style='font-family:Courier;mso-ansi-language:
PT-BR'><o:p>&nbsp;</o:p></span></p><span lang=PT-BR style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:
"Times New Roman";mso-fareast-font-family:"Times New Roman";mso-ansi-language:
PT-BR;mso-fareast-language:AR-SA;mso-bidi-language:AR-SA'><br clear=all
style='page-break-before:always'></span><p class=MsoNormal><span lang=PT-BR style='mso-ansi-language:PT-BR'><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc2934"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.20<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>multi_inverse</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>BOOL <b style='mso-bidi-font-weight:
normal'>multi_inverse</b>(m,x,n,w)<o:p></o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB style='font-family:
Courier'><span style='mso-tab-count:2'>††††††††† </span>int m;<o:p></o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB style='font-family:
Courier'><span style='mso-tab-count:2'>††††††††† </span>big n;<o:p></o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB style='font-family:
Courier'><span style='mso-tab-count:2'>††††††††† </span>big *x,*w;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoIndexHeading><span lang=EN-GB>Module:<span style='mso-tab-count:
1'>††††††††† </span>mrxgcd.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Finds the
modular inverses of many numbers simultaneously, exploiting Montgomeryís
observation that <i style='mso-bidi-font-style:normal'>x</i><sup>-1</sup><i
style='mso-bidi-font-style:normal'> = y.(xy)</i><sup>-1</sup><i
style='mso-bidi-font-style:normal'>,<span style="mso-spacerun:yes">† </span>y</i><sup>-1</sup><i
style='mso-bidi-font-style:normal'> = x.(xy)</i><sup>-1</sup>. This will be
quicker, as modular inverses are slow to calculate, and this way only one is
required.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>The number of
inverses required <i style='mso-bidi-font-style:normal'>m</i>, an array <i
style='mso-bidi-font-style:normal'>x</i>[.] of <i style='mso-bidi-font-style:
normal'>m</i> numbers whose inverses are wanted, the modulus <i
style='mso-bidi-font-style:normal'>n</i>, and the resulting<span
style="mso-spacerun:yes">† </span>array of inverses <i style='mso-bidi-font-style:
normal'>w</i>[.].</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Return value:<span style='mso-tab-count:1'>†† </span>TRUE if
successful, otherwise FALSE.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Restrictions:<span style='mso-tab-count:1'>††† </span>The parameters
<i style='mso-bidi-font-style:normal'>x</i> and <i style='mso-bidi-font-style:
normal'>w</i> must be distinct.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc2953"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.21<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>nres</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=FR style='mso-ansi-language:FR'>Function:</span><span
lang=FR style='font-family:Courier;mso-ansi-language:FR'><span
style='mso-tab-count:1'>††† </span>void <b style='mso-bidi-font-weight:normal'>nres</b>(x,y)<o:p></o:p></span></p><p class=MsoNormal><span lang=FR style='font-family:Courier;mso-ansi-language:
FR'><span style='mso-tab-count:2'>††††††††† </span></span><span lang=EN-GB
style='font-family:Courier'>big x,y;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrmonty.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Converts a big number to <i style='mso-bidi-font-style:normal'>n-residue</i>
form.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Two
big numbers <i style='mso-bidi-font-style:normal'>x</i> and <i
style='mso-bidi-font-style:normal'>y</i>.</span></p><p class=MsoNormal><span lang=EN-GB><span style='mso-tab-count:2'>††††††††††††††††††††††† </span>On
exit <i style='mso-bidi-font-style:normal'>y</i> is the <i style='mso-bidi-font-style:
normal'>n-residue</i> form of <i style='mso-bidi-font-style:normal'>x</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>Must be preceded by call to <b style='mso-bidi-font-weight:normal'>prepare_monty</b>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><span lang=EN-GB style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:
"Times New Roman";mso-fareast-font-family:"Times New Roman";mso-ansi-language:
EN-GB;mso-fareast-language:AR-SA;mso-bidi-language:AR-SA'><br clear=all
style='page-break-before:always'></span><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc2970"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.22<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>nres_dotprod</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoIndexHeading><span lang=FR style='mso-ansi-language:FR'>Function<span
style='mso-tab-count:1'>††††††††† </span></span><span lang=FR style='font-family:
"Courier New";mso-bidi-font-family:"Times New Roman";mso-ansi-language:FR'>void
<b style='mso-bidi-font-weight:normal'>nres_dotprod</b>(m,x,y,w)<o:p></o:p></span></p><p class=MsoIndexHeading><span lang=FR style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman";mso-ansi-language:FR'><span
style='mso-tab-count:2'>††††††††† </span></span><span lang=EN-GB
style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>int m;<o:p></o:p></span></p><p class=MsoIndexHeading><span lang=EN-GB><span style='mso-tab-count:2'>††††††††††††††††††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>big x[]<b style='mso-bidi-font-weight:
normal'>,</b>y[],w;<o:p></o:p></span></p><p class=MsoIndexHeading><span lang=EN-GB style='font-family:Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoIndexHeading><span lang=EN-GB>Module:<span style='mso-tab-count:
1'>††††††††† </span>mrmonty.c</span></p><p class=MsoIndexHeading><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoIndexHeading style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Finds the dot
product of two arrays of <i style='mso-bidi-font-style:normal'>n-residues</i>.
So-called ìlazyî reduction is used, in that the sum of products is only reduced
once with respect to the Montgomery modulus. This is quicker &#8211;nearly
twice as fast.</span></p><p class=MsoIndexHeading><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoIndexHeading><span lang=EN-GB>Parameters:<span style='mso-tab-count:
1'>†††† </span>Two arrays <i style='mso-bidi-font-style:normal'>x</i> and <i
style='mso-bidi-font-style:normal'>y</i> each of <i style='mso-bidi-font-style:
normal'>m</i><i style='mso-bidi-font-style:normal'>n-residues.<o:p></o:p></i></span></p><p class=MsoIndex1><span lang=EN-GB><span style='mso-tab-count:3'>††††††††††††††††††††††† </span>On
exit <i style='mso-bidi-font-style:normal'>w=</i></span><i style='mso-bidi-font-style:
normal'><span lang=EN-GB style='font-family:Symbol'>S</span><span lang=EN-GB> x<sub>i
</sub>y<sub>i</sub></span></i><sub><span lang=EN-GB><span
style="mso-spacerun:yes">† </span></span></sub><span lang=EN-GB>mod <i
style='mso-bidi-font-style:normal'>n</i>, where <i style='mso-bidi-font-style:
normal'>n</i> is the current Montgomery modulus.</span></p><p class=MsoIndexHeading><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoIndexHeading><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>Must be preceded by call to <b style='mso-bidi-font-weight:normal'>prepare_monty</b>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc2988"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.23<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>nres_double_modadd</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=FR style='mso-ansi-language:FR'>Function:<span
style='mso-tab-count:1'>†††††††† </span></span><span lang=FR style='font-family:
Courier;mso-ansi-language:FR'>void <b style='mso-bidi-font-weight:normal'>nres_double_modadd</b>(x,y,w)<o:p></o:p></span></p><p class=MsoNormal><span lang=FR style='font-family:Courier;mso-ansi-language:
FR'><span style='mso-tab-count:2'>††††††††† </span></span><span lang=EN-GB
style='font-family:Courier'>big x,y,w;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Module:<span
style='mso-tab-count:1'>††††††††† </span>mrmonty.c</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:70.9pt;text-indent:-70.9pt;tab-stops:
36.0pt'><span lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Adds
two double length bigs modulo <i style='mso-bidi-font-style:normal'>p.R</i>,
where <i style='mso-bidi-font-style:normal'>R</i> is 2</span><i
style='mso-bidi-font-style:normal'><sup><span lang=EN-GB style='mso-bidi-font-size:
12.0pt'>n</span></sup></i><span lang=EN-GB> and <i style='mso-bidi-font-style:
normal'>n</i> is the smallest multiple of the word-length of the underlying
MIRACL type, such that <i style='mso-bidi-font-style:normal'>R&gt;p</i>. This
is required for lazy reduction.</span></p><p class=MsoFooter style='margin-left:70.9pt;text-indent:-70.9pt;tab-stops:
36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:70.9pt;text-indent:-70.9pt;tab-stops:
36.0pt'><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Three
big numbers <i style='mso-bidi-font-style:normal'>x</i>, <i style='mso-bidi-font-style:
normal'>y</i> and <i style='mso-bidi-font-style:normal'>z</i>. On exit <i
style='mso-bidi-font-style:normal'>z=a+b</i> mod <i style='mso-bidi-font-style:
normal'>pR<o:p></o:p></i></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None<br clear=all style='page-break-before:always'><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc3001"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.24<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>nres_double_modsub</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=FR style='mso-ansi-language:FR'>Function:<span
style='mso-tab-count:1'>†††††††† </span></span><span lang=FR style='font-family:
Courier;mso-ansi-language:FR'>void <b style='mso-bidi-font-weight:normal'>nres_double_modsub</b>(x,y,w)<o:p></o:p></span></p><p class=MsoNormal><span lang=FR style='font-family:Courier;mso-ansi-language:
FR'><span style='mso-tab-count:2'>††††††††† </span></span><span lang=EN-GB
style='font-family:Courier'>big x,y,w;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Module:<span
style='mso-tab-count:1'>††††††††† </span>mrmonty.c</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:70.9pt;text-indent:-70.9pt;tab-stops:
36.0pt'><span lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Subtracts
two double length bigs<span style="mso-spacerun:yes">† </span>modulo <i
style='mso-bidi-font-style:normal'>p.R</i>, where <i style='mso-bidi-font-style:
normal'>R</i> is 2</span><i style='mso-bidi-font-style:normal'><sup><span
lang=EN-GB style='mso-bidi-font-size:12.0pt'>n</span></sup></i><span
lang=EN-GB> and <i style='mso-bidi-font-style:normal'>n</i> is the smallest
multiple of the word-length of the underlying MIRACL type, such that <i
style='mso-bidi-font-style:normal'>R&gt;p</i>. This is required for lazy
reduction.</span></p><p class=MsoFooter style='margin-left:70.9pt;text-indent:-70.9pt;tab-stops:
36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:70.9pt;text-indent:-70.9pt;tab-stops:
36.0pt'><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Three
big numbers <i style='mso-bidi-font-style:normal'>x</i>, <i style='mso-bidi-font-style:
normal'>y</i> and <i style='mso-bidi-font-style:normal'>z</i>. On exit <i
style='mso-bidi-font-style:normal'>z=a-b</i> mod <i style='mso-bidi-font-style:
normal'>pR<o:p></o:p></i></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc3015"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.25<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>nres_lazy</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-IE style='mso-ansi-language:EN-IE'>Function:<span
style='mso-tab-count:1'>†††††††† </span></span><span lang=EN-IE
style='font-family:Courier;mso-ansi-language:EN-IE'>void <b style='mso-bidi-font-weight:
normal'>nres_lazy</b>(a,b,c,d,x,y)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-IE style='font-family:Courier;mso-ansi-language:
EN-IE'><span style='mso-tab-count:2'>††††††††† </span></span><span lang=EN-GB
style='font-family:Courier'>big a,b,c,d,x,y;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Module:<span
style='mso-tab-count:1'>††††††††† </span>mrmonty.c</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:70.9pt;text-indent:-70.9pt;tab-stops:
36.0pt'><span lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Uses
the method of lazy reduction combined with Karatsubaís method to multiply two
zzn2 variables. Requires just 3 multiplications and two modular reductions.</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:70.9pt;text-indent:-70.9pt;tab-stops:
36.0pt'><span lang=EN-GB>Parameters: <span style='mso-tab-count:1'>††† </span>Six
big numbers. On exit <i style='mso-bidi-font-style:normal'>(x+iy)=(a+ib)(c+id)</i>,
where <i style='mso-bidi-font-style:normal'>i</i> is imaginary square root of
the quadratic non-residue.</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Return value:<span
style='mso-tab-count:1'>†† </span>None<br clear=all style='page-break-before:
always'><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc3028"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.26<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>nres_lucas</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=FR style='mso-ansi-language:FR'>Function:<span
style='mso-tab-count:1'>†††††††† </span></span><span lang=FR style='font-family:
Courier;mso-ansi-language:FR'>void <b style='mso-bidi-font-weight:normal'>nres_lucas</b>(x,e,vp,v)<o:p></o:p></span></p><p class=MsoNormal><span lang=FR style='font-family:Courier;mso-ansi-language:
FR'><span style='mso-tab-count:2'>††††††††† </span></span><span lang=EN-GB
style='font-family:Courier'>big x,e,vp,v;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Module:<span
style='mso-tab-count:1'>††††††††† </span>mrlucas.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Modular Lucas exponentiation of an <i style='mso-bidi-font-style:
normal'>n-residue<o:p></o:p></i></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>An
<i style='mso-bidi-font-style:normal'>n-residue</i><i style='mso-bidi-font-style:
normal'>x</i>, a big exponent <i style='mso-bidi-font-style:normal'>e</i>, and
two <i style='mso-bidi-font-style:normal'>n-residue</i> outputs <i
style='mso-bidi-font-style:normal'>vp</i> and <i style='mso-bidi-font-style:
normal'>v</i>.</span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB><span style='mso-tab-count:1'>††††††††††††††††††††††† </span>On
exit <i style='mso-bidi-font-style:normal'>v</i>=V<i style='mso-bidi-font-style:
normal'><sub>e</sub></i>(<i style='mso-bidi-font-style:normal'>x</i>) mod <i
style='mso-bidi-font-style:normal'>n</i> and <i style='mso-bidi-font-style:
normal'>vp</i>=V<i style='mso-bidi-font-style:normal'><sub>e-1</sub></i>(<i
style='mso-bidi-font-style:normal'>x</i>) mod <i style='mso-bidi-font-style:
normal'>n</i> where <i style='mso-bidi-font-style:normal'>n</i> is the current
Montgomery modulus. Only <i style='mso-bidi-font-style:normal'>v</i> is
returned if <i style='mso-bidi-font-style:normal'>v</i> and <i
style='mso-bidi-font-style:normal'>vp</i> are the same big variable.</span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB>Return value:<span style='mso-tab-count:1'>†† </span>None</span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Restrictions:<span style='mso-tab-count:1'>†† </span>Must be
preceded by call to <b style='mso-bidi-font-weight:normal'>prepare_monty</b>
and conversion of the first parameter to <i style='mso-bidi-font-style:normal'>n-residue</i>
form. Note that the exponent is <b style='mso-bidi-font-weight:normal'>not</b>
converted to <i style='mso-bidi-font-style:normal'>n-residue</i> form.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc3046"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.27<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>nres_modadd</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=FR style='mso-ansi-language:FR'>Function:<span
style='mso-tab-count:1'>†††††††† </span></span><span lang=FR style='font-family:
Courier;mso-ansi-language:FR'>void <b style='mso-bidi-font-weight:normal'>nres_modadd(x,y,z)<o:p></o:p></b></span></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span lang=FR
style='font-family:Courier;mso-ansi-language:FR'><span style='mso-tab-count:
2'>††††††††† </span></span></b><span lang=EN-GB style='font-family:Courier'>big
x,y,z;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Module:<span
style='mso-tab-count:1'>††††††††† </span>mrmonty.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Modular addition of two <i style='mso-bidi-font-style:normal'>n-residues<o:p></o:p></i></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Three
<i style='mso-bidi-font-style:normal'>n-residue</i> numbers <i
style='mso-bidi-font-style:normal'>x</i>, <i style='mso-bidi-font-style:normal'>y</i>,
and <i style='mso-bidi-font-style:normal'>z</i>.</span></p><p class=MsoNormal><span lang=EN-GB><span style='mso-tab-count:2'>††††††††††††††††††††††† </span>On
exit <i style='mso-bidi-font-style:normal'>z=x+y mod n</i>, where <i
style='mso-bidi-font-style:normal'>n</i> is the current Montgomery modulus.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>Must be preceded by a call to <b style='mso-bidi-font-weight:
normal'>prepare_monty.<o:p></o:p></b></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><span lang=EN-GB style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:
"Times New Roman";mso-fareast-font-family:"Times New Roman";mso-ansi-language:
EN-GB;mso-fareast-language:AR-SA;mso-bidi-language:AR-SA'><br clear=all
style='page-break-before:always'></span><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc3064"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.28<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>nres_moddiv</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=FR style='mso-ansi-language:FR'>Function:</span><span
lang=FR style='font-family:Courier;mso-ansi-language:FR'><span
style='mso-tab-count:1'>††† </span>int <b style='mso-bidi-font-weight:normal'>nres_moddiv</b>(x,y,z)<o:p></o:p></span></p><p class=MsoNormal><span lang=FR style='font-family:Courier;mso-ansi-language:
FR'><span style='mso-tab-count:2'>††††††††† </span></span><span lang=EN-GB
style='font-family:Courier'>big x,y,z;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrmonty.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Modular division of two <i style='mso-bidi-font-style:normal'>n-residues</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Three
<i style='mso-bidi-font-style:normal'>n-residue</i> numbers <i
style='mso-bidi-font-style:normal'>x, y</i> and <i style='mso-bidi-font-style:
normal'>z</i>.</span></p><p class=MsoNormal><span lang=EN-GB><span style='mso-tab-count:2'>††††††††††††††††††††††† </span>On
exit <i style='mso-bidi-font-style:normal'>z =x/y mod n</i>, where <i
style='mso-bidi-font-style:normal'>n</i> is the current Montgomery modulus.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Return value:<span style='mso-tab-count:1'>† </span>GCD of <i
style='mso-bidi-font-style:normal'>y</i> and <i style='mso-bidi-font-style:
normal'>n</i> as an integer, if possible, or <b style='mso-bidi-font-weight:
normal'>MR_TOOBIG</b>. Should be 1 for a valid result.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Restrictions:<span style='mso-tab-count:1'>†† </span>Must be
preceded by call to <b style='mso-bidi-font-weight:normal'>prepare_monty</b>
and conversion of parameters to <i style='mso-bidi-font-style:normal'>n-residue</i>
form. Parameters <i style='mso-bidi-font-style:normal'>x</i> and <i
style='mso-bidi-font-style:normal'>y</i> must be distinct.</span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc3081"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.29<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>nres_modmult</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=FR style='mso-ansi-language:FR'>Function:</span><span
lang=FR style='font-family:Courier;mso-ansi-language:FR'><span
style='mso-tab-count:1'>††† </span>void <b style='mso-bidi-font-weight:normal'>nres_modmult</b>(x,y,z)<o:p></o:p></span></p><p class=MsoNormal><span lang=FR style='font-family:Courier;mso-ansi-language:
FR'><span style='mso-tab-count:2'>††††††††† </span></span><span lang=EN-GB
style='font-family:Courier'>big x,y,z;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrmonty.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Modular
multiplication of two <i style='mso-bidi-font-style:normal'>n-residues</i>.
Note that this routine will invoke a KCM Modular Multiplier if <b
style='mso-bidi-font-weight:normal'>MR_KCM</b> has been defined in <i
style='mso-bidi-font-style:normal'>mirdef.h</i> and set to an appropriate size
for the current modulus, or a Comba fixed size modular multiplier if <b
style='mso-bidi-font-weight:normal'>MR_COMBA</b> is defined as exactly the size
of the modulus.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Three
<i style='mso-bidi-font-style:normal'>n-residue</i> numbers <i
style='mso-bidi-font-style:normal'>x</i>, <i style='mso-bidi-font-style:normal'>y</i>
and <i style='mso-bidi-font-style:normal'>z<o:p></o:p></i></span></p><p class=MsoNormal><span lang=EN-GB><span style='mso-tab-count:2'>††††††††††††††††††††††† </span>On
exit <i style='mso-bidi-font-style:normal'>z =xy mod n</i>, where <i
style='mso-bidi-font-style:normal'>n</i> is the current Montgomery modulus.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Restrictions:<span style='mso-tab-count:1'>†† </span>Must be
preceded by call to <b style='mso-bidi-font-weight:normal'>prepare_monty</b>
and conversion of parameters to <i style='mso-bidi-font-style:normal'>n-residue</i>
form.<br clear=all style='page-break-before:always'><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc3097"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.30<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>nres_modsub</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=FR style='mso-ansi-language:FR'>Function:<span
style='mso-tab-count:1'>†††††††† </span></span><span lang=FR style='font-family:
Courier;mso-ansi-language:FR'>void <b style='mso-bidi-font-weight:normal'>nres_modsub(x,y,z)<o:p></o:p></b></span></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span lang=FR
style='font-family:Courier;mso-ansi-language:FR'><span style='mso-tab-count:
2'>††††††††† </span></span></b><span lang=EN-GB style='font-family:Courier'>big
x,y,z;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Module:<span
style='mso-tab-count:1'>††††††††† </span>mrmonty.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Modular subtraction of two <i style='mso-bidi-font-style:normal'>n-residues<o:p></o:p></i></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Three
<i style='mso-bidi-font-style:normal'>n-residue</i> numbers <i
style='mso-bidi-font-style:normal'>x</i>, <i style='mso-bidi-font-style:normal'>y</i>,
and <i style='mso-bidi-font-style:normal'>z</i>.</span></p><p class=MsoNormal><span lang=EN-GB><span style='mso-tab-count:2'>††††††††††††††††††††††† </span>On
exit <i style='mso-bidi-font-style:normal'>z=x-y mod n</i>, where <i
style='mso-bidi-font-style:normal'>n</i> is the current Montgomery modulus.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>Must be preceded by a call to <b style='mso-bidi-font-weight:
normal'>prepare_monty.<o:p></o:p></b></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoIndexHeading><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc3114"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.31<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>nres_multi_inverse</span></h3><p class=MsoIndexHeading><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>BOOL <b style='mso-bidi-font-weight:
normal'>nres_multi_inverse</b>(m,x,w)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>int m;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big *x,*w;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoIndexHeading><span lang=EN-GB>Module:<span style='mso-tab-count:
1'>††††††††† </span>mrmonty.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Finds the
modular inverses of many numbers simultaneously, exploiting Montgomeryís
observation that <i style='mso-bidi-font-style:normal'>x</i><sup>-1</sup><i
style='mso-bidi-font-style:normal'> = y.(xy)</i><sup>-1</sup><i
style='mso-bidi-font-style:normal'>,<span style="mso-spacerun:yes">† </span>y</i><sup>-1</sup><i
style='mso-bidi-font-style:normal'> = x.(xy)</i><sup>-1</sup>. This will be
quicker, as modular inverses are slow to calculate, and this way only one is
required.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>The number of
inverses required <i style='mso-bidi-font-style:normal'>m</i>, an array <i
style='mso-bidi-font-style:normal'>x</i>[.] of <i style='mso-bidi-font-style:
normal'>m</i><i style='mso-bidi-font-style:normal'>n-residues</i> whose
inverses are wanted, and an array of their inverses <i style='mso-bidi-font-style:
normal'>w</i>[.].</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Return value:<span style='mso-tab-count:1'>†† </span>TRUE if
successful, otherwise FALSE.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Restrictions:<span style='mso-tab-count:1'>††† </span>The parameters
<i style='mso-bidi-font-style:normal'>x</i> and <i style='mso-bidi-font-style:
normal'>w</i> must be distinct.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><span lang=EN-GB style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:
Courier;mso-fareast-font-family:"Times New Roman";mso-bidi-font-family:"Times New Roman";
mso-ansi-language:EN-GB;mso-fareast-language:AR-SA;mso-bidi-language:AR-SA'><br
clear=all style='page-break-before:always'></span><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB style='font-family:
Courier'><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc3132"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.32<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>nres_negate</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>void <b style='mso-bidi-font-weight:
normal'>nres_negate</b>(x,w)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big x,w;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Module:<span
style='mso-tab-count:1'>††††††††† </span>mrmonty.c</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Description:<span
style='mso-tab-count:1'>††† </span>Modular negation.</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Parameters:<span
style='mso-tab-count:1'>†††† </span>Two <i style='mso-bidi-font-style:normal'>n-residue</i>
numbers <i style='mso-bidi-font-style:normal'>x</i> and <i style='mso-bidi-font-style:
normal'>w</i>.</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><span
style='mso-tab-count:2'>††††††††††††††††††††††† </span>On exit <i
style='mso-bidi-font-style:normal'>w= -x mod n</i>, where <i style='mso-bidi-font-style:
normal'>n</i> is the current Montgomery modulus.</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Return value:<span
style='mso-tab-count:1'>†† </span>None</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Restrictions:<span
style='mso-tab-count:1'>††† </span>Must be preceded by a call to <b
style='mso-bidi-font-weight:normal'>prepare_monty.<o:p></o:p></b></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc3149"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.33<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>nres_powltr</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>void <b style='mso-bidi-font-weight:
normal'>powltr</b>(x,e,w)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>int x;<o:p></o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB style='font-family:
Courier'><span style='mso-tab-count:2'>††††††††† </span>big e,w;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Module:<span
style='mso-tab-count:1'>††††††††† </span>mrpower.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Modular exponentiation of an <i style='mso-bidi-font-style:normal'>n-residue<o:p></o:p></i></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>An
ordinary small integer <i style='mso-bidi-font-style:normal'>x</i>, a big
number <i style='mso-bidi-font-style:normal'>e</i> and an <i style='mso-bidi-font-style:
normal'>n-residue</i> result <i style='mso-bidi-font-style:normal'>w</i>.</span></p><p class=MsoNormal><span lang=EN-GB><span style='mso-tab-count:2'>††††††††††††††††††††††† </span>On
exit <i style='mso-bidi-font-style:normal'>w=x<sup>e</sup> mod n</i>, where <i
style='mso-bidi-font-style:normal'>n</i> is the current Montgomery modulus.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Restrictions:<span style='mso-tab-count:1'>††† </span>Must be
preceded by call to <b style='mso-bidi-font-weight:normal'>prepare_monty</b>.
Note that the small integer <i style='mso-bidi-font-style:normal'>x</i> and the
exponent are <b style='mso-bidi-font-weight:normal'>not</b> converted to <i
style='mso-bidi-font-style:normal'>n-residue</i> form.<span style='mso-tab-count:
1'>†††††††† </span></span><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span><o:p></o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB style='font-family:Courier'><o:p>&nbsp;</o:p></span></p><span lang=EN-GB style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:
Courier;mso-fareast-font-family:"Times New Roman";mso-bidi-font-family:"Times New Roman";
mso-ansi-language:EN-GB;mso-fareast-language:AR-SA;mso-bidi-language:AR-SA'><br
clear=all style='page-break-before:always'></span><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB style='font-family:Courier'><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc3167"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.34<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>nres_powmod</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=FR style='mso-ansi-language:FR'>Function:</span><span
lang=FR style='font-family:Courier;mso-ansi-language:FR'><span
style='mso-tab-count:1'>††† </span>void <b style='mso-bidi-font-weight:normal'>nres_powmod</b>(x,y,z)<o:p></o:p></span></p><p class=MsoNormal><span lang=FR style='font-family:Courier;mso-ansi-language:
FR'><span style='mso-tab-count:2'>††††††††† </span></span><span lang=EN-GB
style='font-family:Courier'>big x,y,z;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrpower.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Modular exponentiation of an <i style='mso-bidi-font-style:normal'>n-residue</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>An <i
style='mso-bidi-font-style:normal'>n-residue</i> number <i style='mso-bidi-font-style:
normal'>x</i>, a big number <i style='mso-bidi-font-style:normal'>y</i> and an <i
style='mso-bidi-font-style:normal'>n-residue</i> result <i style='mso-bidi-font-style:
normal'>z</i>. On exit <i style='mso-bidi-font-style:normal'>z =x<sup>y</sup>
mod n</i>, where <i style='mso-bidi-font-style:normal'>n</i> is the current
Montgomery modulus.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Restrictions:<span style='mso-tab-count:1'>†† </span>Must be preceded
by call to <b style='mso-bidi-font-weight:normal'>prepare_monty</b> and
conversion of the first parameter to <i style='mso-bidi-font-style:normal'>n-residue</i>
form. Note that the exponent is <b style='mso-bidi-font-weight:normal'>not</b>
converted to <i style='mso-bidi-font-style:normal'>n-residue</i> form.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Example:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>prepare_monty(n);<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>...<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>...<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>nres(x,y); /* convert to <i
style='mso-bidi-font-style:normal'>n-residue</i> form */<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span></span><span lang=ES style='font-family:
Courier;mso-ansi-language:ES'>nres_powmod(y,e,z);<o:p></o:p></span></p><p class=MsoNormal><span lang=ES style='font-family:Courier;mso-ansi-language:
ES'><span style='mso-tab-count:2'>††††††††† </span></span><span lang=EN-GB
style='font-family:Courier'>redc(z,w); /* convert back to normal form */<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc3190"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.35<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>nres_powmod2</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>void <b style='mso-bidi-font-weight:
normal'>nres_powmod2</b>(x,y,a,b,w)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big x,y,a,b,w;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Module:<span
style='mso-tab-count:1'>††††††††† </span>mrpower.c</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Calculate
the product of two modular exponentiations involving <i style='mso-bidi-font-style:
normal'>n-residues</i>. </span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Three
<i style='mso-bidi-font-style:normal'>n-residue</i> numbers <i
style='mso-bidi-font-style:normal'>x</i>, <i style='mso-bidi-font-style:normal'>a</i>
and <i style='mso-bidi-font-style:normal'>w</i>, and two big integers <i
style='mso-bidi-font-style:normal'>y</i> and <i style='mso-bidi-font-style:
normal'>b</i>. </span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB><span style='mso-tab-count:1'>††††††††††††††††††††††† </span>On
exit <i style='mso-bidi-font-style:normal'>w = x<sup>y</sup> .a<sup>b</sup> mod
n</i>, where <i style='mso-bidi-font-style:normal'>n</i> is the current
Montgomery modulus.</span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB>Return value:<span style='mso-tab-count:1'>†† </span>None</span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB>Restrictions:<span style='mso-tab-count:1'>††† </span>Must
be preceded by call to <b style='mso-bidi-font-weight:normal'>prepare_monty</b>
and conversion of the appropriate parameters to <i style='mso-bidi-font-style:
normal'>n-residue</i> form. Note that the exponents are <b style='mso-bidi-font-weight:
normal'>not</b> converted to <i style='mso-bidi-font-style:normal'>n-residue</i>
form.</span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc3207"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.36<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>nres_powmodn</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=FR style='mso-ansi-language:FR'>Function:<span
style='mso-tab-count:1'>†††††††† </span></span><span lang=FR style='font-family:
Courier;mso-ansi-language:FR'>void <b style='mso-bidi-font-weight:normal'>nres_powmodn</b>(m,x,y,w)<o:p></o:p></span></p><p class=MsoNormal><span lang=FR style='font-family:Courier;mso-ansi-language:
FR'><span style='mso-tab-count:2'>††††††††† </span></span><span lang=EN-GB
style='font-family:Courier'>int m;<o:p></o:p></span></p><p class=MsoNormal style='margin-left:36.0pt;text-indent:36.0pt'><span
lang=EN-GB style='font-family:Courier'>big *<b style='mso-bidi-font-weight:
normal'>x,</b>*y,w;<o:p></o:p></span></p><p class=MsoIndexHeading><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Module:<span
style='mso-tab-count:1'>††††††††† </span>mrpower.c</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Calculate
the product of <i style='mso-bidi-font-style:normal'>m</i> modular
exponentiations involving <i style='mso-bidi-font-style:normal'>n-residues</i>.
Extra memory is allocated internally by this function.</span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>The
integer <i style='mso-bidi-font-style:normal'>m,</i> an array of <i
style='mso-bidi-font-style:normal'>m n-residue</i> numbers <i style='mso-bidi-font-style:
normal'>x</i>, an array of <i style='mso-bidi-font-style:normal'>m</i> big
integers <i style='mso-bidi-font-style:normal'>y</i>, and an <i
style='mso-bidi-font-style:normal'>n-residue</i><i style='mso-bidi-font-style:
normal'>w</i>. </span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB><span style='mso-tab-count:1'>††††††††††††††††††††††† </span>On
exit <i style='mso-bidi-font-style:normal'>w = x[0]<sup>y[0]</sup> . x[1]<sup>y[1]</sup>
Ö . x[m-1]<sup>y[m-1] </sup>mod n</i>, where <i style='mso-bidi-font-style:
normal'>n</i> is the current Montgomery modulus.</span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB>Return value:<span style='mso-tab-count:1'>†† </span>None</span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB>Restrictions:<span style='mso-tab-count:1'>††† </span>Must
be preceded by call to <b style='mso-bidi-font-weight:normal'>prepare_monty</b>
and conversion of the appropriate parameters to <i style='mso-bidi-font-style:
normal'>n-residue</i> form. Note that the exponents are <b style='mso-bidi-font-weight:
normal'>not</b> converted to <i style='mso-bidi-font-style:normal'>n-residue</i>
form.</span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc3225"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.37<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>nres_premult</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>void <b style='mso-bidi-font-weight:
normal'>nres_premult</b>(x,k,w)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>int k;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style="mso-spacerun:yes">† </span><span style='mso-tab-count:2'>††††††† </span>big
x,w;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Module:<span
style='mso-tab-count:1'>††††††††† </span>mrmonty.c</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Description:<span
style='mso-tab-count:1'>††† </span>Multiplies an <i style='mso-bidi-font-style:
normal'>n-residue</i> by a small integer.</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Parameters:<span
style='mso-tab-count:1'>†††† </span>Two <i style='mso-bidi-font-style:normal'>n-residues</i><i style='mso-bidi-font-style:normal'>x</i> and <i style='mso-bidi-font-style:
normal'>w</i>, and a small integer <i style='mso-bidi-font-style:normal'>k</i>.
</span></p><p class=MsoFooter style='margin-left:36.0pt;text-indent:36.0pt;tab-stops:36.0pt'><span
lang=EN-GB>On exit <i style='mso-bidi-font-style:normal'>w = kx mod n,</i>
where <i style='mso-bidi-font-style:normal'>n</i> is the current Montgomery
modulus.</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Return value:<span
style='mso-tab-count:1'>†† </span>None</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB>Restrictions:<span style='mso-tab-count:1'>††† </span>Must
be preceded by call to <b style='mso-bidi-font-weight:normal'>prepare_monty</b>
and conversion of the first parameter to <i style='mso-bidi-font-style:normal'>n-residue</i>
form. Note that the small integer is <b style='mso-bidi-font-weight:normal'>not</b>
converted to <i style='mso-bidi-font-style:normal'>n-residue</i> form.</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><span lang=EN-GB style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:
"Times New Roman";mso-fareast-font-family:"Times New Roman";mso-ansi-language:
EN-GB;mso-fareast-language:AR-SA;mso-bidi-language:AR-SA'><br clear=all
style='page-break-before:always'></span><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc3243"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.38<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>nres_sqroot</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>BOOL <b style='mso-bidi-font-weight:
normal'>nres_sqroot</b>(x,w)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big x,w;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Module:<span
style='mso-tab-count:1'>††††††††† </span>mrsroot.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Calculates the square root of an <i style='mso-bidi-font-style:
normal'>n-residue</i> mod a prime modulus</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Two
<i style='mso-bidi-font-style:normal'>n-residues</i><i style='mso-bidi-font-style:
normal'>x</i> and <i style='mso-bidi-font-style:normal'>w</i>. </span></p><p class=MsoNormal><span lang=EN-GB><span style='mso-tab-count:2'>††††††††††††††††††††††† </span>On
exit <i style='mso-bidi-font-style:normal'>w=</i></span><i style='mso-bidi-font-style:
normal'><span lang=EN-GB style='font-family:Symbol'>÷</span><span lang=EN-GB>x
mod n</span></i><span lang=EN-GB> where <i style='mso-bidi-font-style:normal'>n</i>
is the current Montgomery modulus.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>TRUE if the square root exists, otherwise FALSE</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Restrictions:<span style='mso-tab-count:1'>††† </span>Must be preceded
by call to <b style='mso-bidi-font-weight:normal'>prepare_monty</b> and
conversion of the first parameter to <i style='mso-bidi-font-style:normal'>n-residue</i>
form.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc3260"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.39<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>nroot</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>BOOL <b
style='mso-bidi-font-weight:normal'>nroot</b>(x,n,z)<o:p></o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB style='font-family:
Courier'><span style='mso-tab-count:2'>††††††††† </span>big x,z;<o:p></o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB style='font-family:
Courier'><span style='mso-tab-count:2'>††††††††† </span>int n;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrarth3.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Extracts lower approximation to a root of a big number.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Two
big numbers <i style='mso-bidi-font-style:normal'>x</i> and <i
style='mso-bidi-font-style:normal'>z</i>, and an integer <i style='mso-bidi-font-style:
normal'>n</i>.</span></p><p class=MsoNormal><span lang=EN-GB><span style='mso-tab-count:2'>††††††††††††††††††††††† </span>On
exit </span><i style='mso-bidi-font-style:normal'><span lang=EN-GB
style='font-family:Courier'>z= </span></i><span lang=EN-GB style='font-family:
Symbol'>Î</span><i style='mso-bidi-font-style:normal'><span lang=EN-GB
style='font-family:Courier'>x<sup>1/n</sup></span></i><span lang=EN-GB
style='font-family:Symbol'>˚</span><span lang=EN-GB style='font-family:Courier'>.<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Return value:<span style='mso-tab-count:1'>† </span>Returns the
boolean value TRUE if the root found is exact, otherwise returns FALSE.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>The value of <i style='mso-bidi-font-style:normal'>n</i> must be
positive. If <i style='mso-bidi-font-style:normal'>x</i> is negative, then <i
style='mso-bidi-font-style:normal'>n</i> must be odd.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><span lang=EN-GB style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:
"Times New Roman";mso-fareast-font-family:"Times New Roman";mso-ansi-language:
EN-GB;mso-fareast-language:AR-SA;mso-bidi-language:AR-SA'><br clear=all
style='page-break-before:always'></span><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc3280"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.40<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>nxprime</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>BOOL <b
style='mso-bidi-font-weight:normal'>nxprime</b>(w,x)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big w,x;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrprime.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Find next prime number.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Two
big numbers <i style='mso-bidi-font-style:normal'>w</i> and <i
style='mso-bidi-font-style:normal'>x</i>.</span></p><p class=MsoNormal><span lang=EN-GB><span style='mso-tab-count:2'>††††††††††††††††††††††† </span>On
exit <i style='mso-bidi-font-style:normal'>x</i> contains the next prime number
greater than <i style='mso-bidi-font-style:normal'>w</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>TRUE if successful, FALSE otherwise.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc3297"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.41<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>nxsafeprime</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>BOOL n<b style='mso-bidi-font-weight:
normal'>xsafeprime</b>(type,subset,w,p)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>int type,subset;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big w,p;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Module:<span
style='mso-tab-count:1'>††††††††† </span>mrprime.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Find next <i
style='mso-bidi-font-style:normal'>safe</i> prime number greater than <i
style='mso-bidi-font-style:normal'>w</i>. A <i style='mso-bidi-font-style:normal'>safe</i>
prime number <i style='mso-bidi-font-style:normal'>p</i> is defined here to be
one for which <i style='mso-bidi-font-style:normal'>q=</i>(<i style='mso-bidi-font-style:
normal'>p</i>-1)/2 (<i style='mso-bidi-font-style:normal'>type</i>=0) or <i
style='mso-bidi-font-style:normal'>q=</i>(<i style='mso-bidi-font-style:normal'>p</i>+1)/2
(<i style='mso-bidi-font-style:normal'>type=</i>1<i style='mso-bidi-font-style:
normal'>) </i>is also prime.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>The integer
parameter <i style='mso-bidi-font-style:normal'>type</i> determines the type of
safe prime as above. If the parameter <i style='mso-bidi-font-style:normal'>subset</i>=1,
then the search is restricted so that the value of the prime <i
style='mso-bidi-font-style:normal'>q</i> is congruent to 1 mod 4. If <i
style='mso-bidi-font-style:normal'>subset=</i>3, then the search is restricted
so that the value of <i style='mso-bidi-font-style:normal'>q</i> is congruent
to 3 mod 4. If <i style='mso-bidi-font-style:normal'>subset</i>=0 then there is
no condition on <i style='mso-bidi-font-style:normal'>q</i>: it can be either 1
or 3 mod 4.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Return value:<span style='mso-tab-count:1'>†† </span>TRUE if
successful, FALSE otherwise</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><span lang=EN-GB style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:
"Times New Roman";mso-fareast-font-family:"Times New Roman";mso-ansi-language:
EN-GB;mso-fareast-language:AR-SA;mso-bidi-language:AR-SA'><br clear=all
style='page-break-before:always'></span><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc3312"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.42<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>pow_brick</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>void
<b style='mso-bidi-font-weight:normal'>pow_brick</b>(binst,e,w)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style='mso-tab-count:2'>††††††††† </span></span><span
lang=DE style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman";
mso-ansi-language:DE'>brick *binst;<o:p></o:p></span></p><p class=MsoNormal><span lang=DE style='font-family:"Courier New";mso-bidi-font-family:
"Times New Roman";mso-ansi-language:DE'><span style='mso-tab-count:2'>††††††††† </span>big
e,w;<o:p></o:p></span></p><p class=MsoNormal><span lang=DE style='font-family:"Courier New";mso-bidi-font-family:
"Times New Roman";mso-ansi-language:DE'><o:p>&nbsp;</o:p></span></p><p class=MsoIndexHeading><span lang=EN-GB>Module:<span style='mso-tab-count:
1'>††††††††† </span>mrbrick.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Carries out a
modular exponentiation, using the precomputed values stored in the <i
style='mso-bidi-font-style:normal'>brick</i> structure.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A pointer to
the current instance, a big exponent <i style='mso-bidi-font-style:normal'>e</i>
and a big number <i style='mso-bidi-font-style:normal'>w</i>. On exit <i
style='mso-bidi-font-style:normal'>w=g<sup>e</sup> mod n</i>, where <i
style='mso-bidi-font-style:normal'>g</i> and <i style='mso-bidi-font-style:
normal'>n</i> are specified in the initial call to <b style='mso-bidi-font-weight:
normal'>brick_init.<o:p></o:p></b></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB><o:p>&nbsp;</o:p></span></b></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Return value:<span style='mso-tab-count:1'>†† </span>None</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Restrictions:<span style='mso-tab-count:1'>††† </span>Must be
preceded by a call to <b style='mso-bidi-font-weight:normal'>brick_init</b>. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc3329"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.43<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>power</span></h3><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>void <b
style='mso-bidi-font-weight:normal'>power</b>(x,n,z,w)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>long n;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big x,z,w;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrarth3.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Raise a big number to an integer power.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Two big numbers
<i style='mso-bidi-font-style:normal'>x</i> and <i style='mso-bidi-font-style:
normal'>z</i>, and an integer <i style='mso-bidi-font-style:normal'>n</i>. On
exit <i style='mso-bidi-font-style:normal'>w=x<sup>n</sup></i>. If <i
style='mso-bidi-font-style:normal'>w</i> and <i style='mso-bidi-font-style:
normal'>z</i> are distinct, then <i style='mso-bidi-font-style:normal'>w=x<sup>n</sup><span
style="mso-spacerun:yes">† </span>mod z<o:p></o:p></i></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>The value of <i style='mso-bidi-font-style:normal'>n</i> must be
positive</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><span lang=EN-GB style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:
"Times New Roman";mso-fareast-font-family:"Times New Roman";mso-ansi-language:
EN-GB;mso-fareast-language:AR-SA;mso-bidi-language:AR-SA'><br clear=all
style='page-break-before:always'></span><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc3348"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.44<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>powltr</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=FR style='mso-ansi-language:FR'>Function:</span><span
lang=FR style='font-family:Courier;mso-ansi-language:FR'><span
style='mso-tab-count:1'>††† </span>int <b style='mso-bidi-font-weight:normal'>powltr</b>(x,y,z,w)<o:p></o:p></span></p><p class=MsoNormal><span lang=FR style='font-family:Courier;mso-ansi-language:
FR'><span style='mso-tab-count:2'>††††††††† </span></span><span lang=EN-GB
style='font-family:Courier'>int x;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big y,z,w;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrpower.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Raise an <i
style='mso-bidi-font-style:normal'>int</i> to the power of a big number modulus
another big number. Uses Left-to-Right binary method, and will be somewhat
faster than <b style='mso-bidi-font-weight:normal'>powmod</b> for small <i
style='mso-bidi-font-style:normal'>x</i>. Uses Montgomery arithmetic internally
if the modulus <i style='mso-bidi-font-style:normal'>z</i> is odd.</span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>An integer <i
style='mso-bidi-font-style:normal'>x</i> and three bigs <i style='mso-bidi-font-style:
normal'>y</i>, <i style='mso-bidi-font-style:normal'>z</i> and <i
style='mso-bidi-font-style:normal'>w</i>.</span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><span style='mso-tab-count:1'>††††††††††††††††††††††† </span>On exit
<i style='mso-bidi-font-style:normal'>w=x<sup>y</sup> mod z<o:p></o:p></i></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Return value:<span style='mso-tab-count:1'>† </span>The result
expressed as an integer, if possible. Otherwise the value <b style='mso-bidi-font-weight:
normal'>MR_TOOBIG</b>.</span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Restrictions:<span style='mso-tab-count:1'>†† </span>The value of <i
style='mso-bidi-font-style:normal'>y</i> must be positive. The parameters <i
style='mso-bidi-font-style:normal'>w</i> and <i style='mso-bidi-font-style:
normal'>z</i> must be distinct.</span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><span lang=EN-GB style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:
"Times New Roman";mso-fareast-font-family:"Times New Roman";mso-ansi-language:
EN-GB;mso-fareast-language:AR-SA;mso-bidi-language:AR-SA'><br clear=all
style='page-break-before:always'></span><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc3366"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.45<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>powmod</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>void <b
style='mso-bidi-font-weight:normal'>powmod</b>(x,y,z,w)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big x,y,z,w;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrpower.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Raise a big
number to a big power modulus another big. Uses a sophisticated 5-bit sliding
window technique, which is close to optimal for popular modulus sizes (such as
512 or 1024 bits). Uses Montgomery arithmetic internally if the modulus <i
style='mso-bidi-font-style:normal'>z</i> is odd.</span></p><p class=MsoNormal style='margin-left:70.9pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt'><span lang=EN-GB>This function
can be speeded up further for particular moduli, by invoking special assembly
language routines (if your compiler allows it). A KCM Modular Multiplier will
be automatically invoked if <b style='mso-bidi-font-weight:normal'>MR_KCM</b>
has been defined in <i style='mso-bidi-font-style:normal'>mirdef.h</i> and has
been set to an appropriate size. Alternatively a Comba modular multiplier will
be used if <b style='mso-bidi-font-weight:normal'>MR_COMBA</b> is so defined,
and the modulus is of the specified size. Experimental coprocessor code will be
called if <b style='mso-bidi-font-weight:normal'>MR_PENTIUM</b> is defined. Only
one of these conditionals should be defined.</span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Four
big numbers <i style='mso-bidi-font-style:normal'>x, y, z</i> and <i
style='mso-bidi-font-style:normal'>w</i>.</span></p><p class=MsoNormal><span lang=EN-GB><span style='mso-tab-count:2'>††††††††††††††††††††††† </span>On
exit <i style='mso-bidi-font-style:normal'>w=x<sup>y</sup> mod z</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Restrictions:<span style='mso-tab-count:1'>†† </span>The value of <i
style='mso-bidi-font-style:normal'>y</i> must be positive. The parameters <i
style='mso-bidi-font-style:normal'>w</i> and <i style='mso-bidi-font-style:
normal'>z</i> must be distinct.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><span lang=EN-GB style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:
"Times New Roman";mso-fareast-font-family:"Times New Roman";mso-ansi-language:
EN-GB;mso-fareast-language:AR-SA;mso-bidi-language:AR-SA'><br clear=all
style='page-break-before:always'></span><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc3386"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.46<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>powmod2</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>void <b
style='mso-bidi-font-weight:normal'>powmod2</b>(a,b,c,d,z,w)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big a,b,c,d,z,w;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrpower.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Calculate the
product of two modular exponentiations. This is quicker than doing two separate
exponentiations, and is useful for certain Cryptographic protocols. Uses 2-bit
sliding window.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Six
big numbers <i style='mso-bidi-font-style:normal'>a ,b, c, d, z</i> and <i
style='mso-bidi-font-style:normal'>w</i>.</span></p><p class=MsoNormal><span lang=EN-GB><span style='mso-tab-count:2'>††††††††††††††††††††††† </span>On
exit <i style='mso-bidi-font-style:normal'>w=a<sup>b</sup>.c<sup>d</sup> mod z</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Restrictions:<span style='mso-tab-count:1'>†† </span>The values of <i
style='mso-bidi-font-style:normal'>b</i> and <i style='mso-bidi-font-style:
normal'>d</i> must be positive. The parameters <i style='mso-bidi-font-style:
normal'>w</i> and <i style='mso-bidi-font-style:normal'>z</i> must be distinct.
The modulus <i style='mso-bidi-font-style:normal'>z</i> must be odd.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Example:<span style='mso-tab-count:1'>†††††††† </span>See
<i style='mso-bidi-font-style:normal'>dssver.c<o:p></o:p></i></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc3404"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.47<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>powmodn</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>void <b
style='mso-bidi-font-weight:normal'>powmodn</b>(m,a,b,z,w)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>int m;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big *<b style='mso-bidi-font-weight:
normal'>a,</b>*b,z,w;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrpower.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Calculate the
product of <i style='mso-bidi-font-style:normal'>m</i> modular exponentiations.
This is quicker than doing <i style='mso-bidi-font-style:normal'>m</i> separate
exponentiations, and is useful for certain Cryptographic protocols. Extra memory
is allocated internally for this function</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>An integer <i
style='mso-bidi-font-style:normal'>m</i>, two big number arrays <i
style='mso-bidi-font-style:normal'>a[]</i> and <i style='mso-bidi-font-style:
normal'>b[]</i>, and two big numbers <i style='mso-bidi-font-style:normal'><span
style="mso-spacerun:yes">†</span>z</i> and <i style='mso-bidi-font-style:normal'>w</i>.
On exit <i style='mso-bidi-font-style:normal'>w=a[0]<sup>b[0]</sup>.a[1]<sup>b[1]</sup>
Ö<span style="mso-spacerun:yes">† </span>. a[m-1]<sup>b[m-1]</sup> mod z</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Restrictions:<span style='mso-tab-count:1'>†† </span>The values of <i
style='mso-bidi-font-style:normal'>b[] </i><span
style="mso-spacerun:yes">†</span>must be positive. The parameters <i
style='mso-bidi-font-style:normal'>w</i> and <i style='mso-bidi-font-style:
normal'>z</i> must be distinct. The modulus <i style='mso-bidi-font-style:normal'>z</i>
must be odd. The underlying number base must be a power of 2.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><span lang=EN-GB style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:
"Times New Roman";mso-fareast-font-family:"Times New Roman";mso-ansi-language:
EN-GB;mso-fareast-language:AR-SA;mso-bidi-language:AR-SA'><br clear=all
style='page-break-before:always'></span><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc3421"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.48<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>prepare_monty</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>void <b
style='mso-bidi-font-weight:normal'><i style='mso-bidi-font-style:normal'>prepare_monty</i></b>(n)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big n;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrmonty.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoBodyTextIndent><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Prepares a Montgomery Modulus for use. Each call to this function
replaces the previous modulus (if any).</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A
big number <i style='mso-bidi-font-style:normal'>n</i>, which is to be the
Montgomery modulus. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Restrictions:<span style='mso-tab-count:1'>†† </span>The parameter <i
style='mso-bidi-font-style:normal'>n</i> must be positive and odd. Allocated
memory is freed when the current instance of MIRACL is terminated by a call to <b
style='mso-bidi-font-weight:normal'>mirexit</b>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc3437"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.49<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>redc</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=FR style='mso-ansi-language:FR'>Function:</span><span
lang=FR style='font-family:Courier;mso-ansi-language:FR'><span
style='mso-tab-count:1'>††† </span>void <b style='mso-bidi-font-weight:normal'>redc</b>(x,y)<o:p></o:p></span></p><p class=MsoNormal><span lang=FR style='font-family:Courier;mso-ansi-language:
FR'><span style='mso-tab-count:2'>††††††††† </span></span><span lang=EN-GB
style='font-family:Courier'>big x,y;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrmonty.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Converts an <i style='mso-bidi-font-style:normal'>n-residue</i>
back to normal form.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Two
big numbers <i style='mso-bidi-font-style:normal'>x</i> and <i
style='mso-bidi-font-style:normal'>y</i>.</span></p><p class=MsoNormal><span lang=EN-GB><span style='mso-tab-count:2'>††††††††††††††††††††††† </span>On
exit <i style='mso-bidi-font-style:normal'>y</i> is the normal form of the <i
style='mso-bidi-font-style:normal'>n-residue</i><i style='mso-bidi-font-style:
normal'>x</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>Use must be preceded by call to <b style='mso-bidi-font-weight:
normal'>prepare_monty</b>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><b style='mso-bidi-font-weight:normal'><span lang=EN-GB style='font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:"Times New Roman";mso-fareast-font-family:
"Times New Roman";mso-ansi-language:EN-GB;mso-fareast-language:AR-SA;
mso-bidi-language:AR-SA'><br clear=all style='page-break-before:always'></span></b><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc3454"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.50<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>scrt</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>void <b
style='mso-bidi-font-weight:normal'>scrt</b>(psc,rem,x)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style="mso-spacerun:yes">†</span><span style='mso-tab-count:2'>†††††††† </span>small_chinese
*psc;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>int *rem;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big x;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrscrt.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Applies Chinese Remainder Theorem (for small prime moduli).</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A pointer <i
style='mso-bidi-font-style:normal'>psc </i>to the current instance of the
Chinese Remainder Theorem. On exit <i style='mso-bidi-font-style:normal'>x</i>
contains the big number which yields the given integer remainders <i
style='mso-bidi-font-style:normal'>rem[.]</i> when it is divided by the integer
moduli specified in a prior call to <b style='mso-bidi-font-weight:normal'>scrt_init</b>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>The routine <b style='mso-bidi-font-weight:normal'>scrt_init</b>
must be called first.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc3472"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.51<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>scrt_end *</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>void <b
style='mso-bidi-font-weight:normal'>scrt_end</b>(psc)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>small_chinese *psc;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrscrt.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Cleans up after
an application of the Chinese Remainder Theorem.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A
pointer to the current instance of the Chinese Remainder Theorem..</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>None<br clear=all style='page-break-before:always'><a name="_toc3486"></a><b style='mso-bidi-font-weight:normal'>scrt_init</b></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>BOOL <b
style='mso-bidi-font-weight:normal'>scrt_init</b>(psc,np,m)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>small_chinese *psc;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>int np;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>int *m;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrscrt.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Initialises an
instance of the Chinese Remainder Theorem. Some internal workspace is
allocated.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A pointer to
the current instance <i style='mso-bidi-font-style:normal'>psc</i>. The number
of co-prime moduli <i style='mso-bidi-font-style:normal'>np</i>, and an array
of at least two integer moduli <i style='mso-bidi-font-style:normal'>m[.].<o:p></o:p></i></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>TRUE if all went well, FALSE if there was a problem.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc3504"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.53<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>sftbit</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>void <b
style='mso-bidi-font-weight:normal'>sftbit</b>(x,n,z)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big x,z;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>int n;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrbits.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Shifts a big integer left or right by a number of bits.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>The big
parameter <i style='mso-bidi-font-style:normal'>x</i> is shifted by<i
style='mso-bidi-font-style:normal'> n</i> bits, to give <i style='mso-bidi-font-style:
normal'>z</i>. Positive <i style='mso-bidi-font-style:normal'>n</i> shifts to
the left, negative to the right. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>None<br clear=all style='page-break-before:always'><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc3520"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.54<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>smul *</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>unsigned
int <b style='mso-bidi-font-weight:normal'>smul</b>(x,y,z)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>Unsigned int x,y,z;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrsmall.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Multiplies two integers mod a third </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Integers
<i style='mso-bidi-font-style:normal'>x, y</i> and <i style='mso-bidi-font-style:
normal'>z<o:p></o:p></i></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span><i style='mso-bidi-font-style:normal'>x.y mod z<o:p></o:p></i></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc3534"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.55<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>spmd *</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>unsigned
int <b style='mso-bidi-font-weight:normal'>spmd</b>(x,y,z)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>Unsigned int x,y,z;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrsmall.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Raises an integer to an integer power modulus a third </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Integers
<i style='mso-bidi-font-style:normal'>x, y</i>, and <i style='mso-bidi-font-style:
normal'>z</i></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span><i style='mso-bidi-font-style:normal'>x<sup>y</sup> mod z<o:p></o:p></i></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc3550"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.56<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>sqrmp *</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>unsigned
int <b style='mso-bidi-font-weight:normal'>sqrmp</b>(x,p)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>Unsigned int x,p;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrsmall.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Calculates the square root of an integer mod an integer prime
number </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>An
integer <i style='mso-bidi-font-style:normal'>x</i> and a prime number <i
style='mso-bidi-font-style:normal'>p<o:p></o:p></i></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span></span><i style='mso-bidi-font-style:normal'><span lang=EN-GB
style='font-family:Symbol'>÷</span><span lang=EN-GB>x mod p</span></i><span
lang=EN-GB>, or 0 if root does not exist </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>Return value unpredictable if <i style='mso-bidi-font-style:normal'>p</i>
is not prime<br clear=all style='page-break-before:always'><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc3565"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.57<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>sqroot</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>BOOL <b style='mso-bidi-font-weight:
normal'>sqroot</b>(x,p,w)<o:p></o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB style='font-family:
Courier'><span style='mso-tab-count:2'>††††††††† </span>big x,p;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrsroot.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoBodyTextIndent><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Calculates the square root of a big integer mod a big integer
prime. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Two
big integers <i style='mso-bidi-font-style:normal'>x</i> and <i
style='mso-bidi-font-style:normal'>w</i>, and a big prime number <i
style='mso-bidi-font-style:normal'>p</i>. </span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><span style='mso-tab-count:1'>††††††††††††††††††††††† </span>On exit
<i style='mso-bidi-font-style:normal'>w=</i></span><i style='mso-bidi-font-style:
normal'><span lang=EN-GB style='font-family:Symbol'>÷</span><span lang=EN-GB>x
mod p</span></i><span lang=EN-GB> if the square root exists, otherwise <i
style='mso-bidi-font-style:normal'>w=0</i>. Note that the ìotherî square root
may be found by subtracting <i style='mso-bidi-font-style:normal'>w</i> from <i
style='mso-bidi-font-style:normal'>p</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>TRUE if the square root exists, FALSE otherwise.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Restrictions:<span style='mso-tab-count:1'>††† </span>The number <i
style='mso-bidi-font-style:normal'>p</i> must be prime. </span></p><p class=MsoNormal style='margin-left:72.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc3583"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.58<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>trial_division</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>int <b style='mso-bidi-font-weight:normal'>trial_division</b>(x,y)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big x,y;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrprime.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoBodyTextIndent><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Dual purpose trial division routine. If <i style='mso-bidi-font-style:
normal'>x</i> and <i style='mso-bidi-font-style:normal'>y</i> are the same big
variable then trial division by the small prime numbers in the instance array <b
style='mso-bidi-font-weight:normal'>PRIMES</b> is attempted to determine the
primality status of the big number. If <i style='mso-bidi-font-style:normal'>x</i>
and <i style='mso-bidi-font-style:normal'>y</i> are distinct then, after trial
division, the unfactored part of <i style='mso-bidi-font-style:normal'>x</i> is
returned in <i style='mso-bidi-font-style:normal'>y</i>.</span></p><p class=MsoBodyTextIndent><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoBodyTextIndent><span lang=EN-GB>Parameters:<span style='mso-tab-count:
1'>†††† </span>Two big integers <i style='mso-bidi-font-style:normal'>x</i> and
<i style='mso-bidi-font-style:normal'>y</i>.</span></p><p class=MsoBodyTextIndent><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoBodyTextIndent><span lang=EN-GB>Return value:<span
style='mso-tab-count:1'>†† </span>If <i style='mso-bidi-font-style:normal'>x</i>
and <i style='mso-bidi-font-style:normal'>y</i> are the same, then a return
value of 0 means that the big number is definitely not prime, a return value of
1 means that it definitely is prime, while a return value of 2 means that it is
possibly prime (and that perhaps further testing should be carried out).</span></p><p class=MsoBodyTextIndent><span lang=EN-GB><span style='mso-tab-count:1'>††††††††††††††††††††††† </span>If
<i style='mso-bidi-font-style:normal'>x</i> and <i style='mso-bidi-font-style:
normal'>y</i> are distinct, then a return value of 1 means that <i
style='mso-bidi-font-style:normal'>x</i> is <i style='mso-bidi-font-style:normal'>smooth</i>,
that is it is completely factored by trial division (and <i style='mso-bidi-font-style:
normal'>y</i> is the largest prime factor). A return value of 2 means that the
unfactored part <i style='mso-bidi-font-style:normal'>y</i> is possibly prime. <br
clear=all style='page-break-before:always'><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc3597"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.59<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>xgcd</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=FR style='mso-ansi-language:FR'>Function:</span><span
lang=FR style='font-family:Courier;mso-ansi-language:FR'><span
style='mso-tab-count:1'>††† </span>int <b style='mso-bidi-font-weight:normal'>xgcd</b>(x,y,xd,yd,z)<o:p></o:p></span></p><p class=MsoNormal><span lang=FR style='font-family:Courier;mso-ansi-language:
FR'><span style='mso-tab-count:2'>††††††††† </span></span><span lang=EN-GB
style='font-family:Courier'>big x,y,xd,yd,z;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrxgcd.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Calculates
extended Greatest Common Divisor of two big numbers. Can be used to calculate
modular inverses. Note that this routine is much slower than a <b
style='mso-bidi-font-weight:normal'>mad</b> operation on numbers of similar
size.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Five
big numbers <i style='mso-bidi-font-style:normal'>x,y,xd,yd</i> and <i
style='mso-bidi-font-style:normal'>z</i>.</span></p><p class=MsoNormal><span lang=EN-GB><span style='mso-tab-count:2'>††††††††††††††††††††††† </span></span><span
lang=EN-IE style='mso-ansi-language:EN-IE'>On exit <i style='mso-bidi-font-style:
normal'>z=gcd(x,y)=x.xd+y.yd<o:p></o:p></i></span></p><p class=MsoNormal><span lang=EN-IE style='mso-ansi-language:EN-IE'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>GCD as integer, if possible, otherwise <b style='mso-bidi-font-weight:
normal'>MR_TOOBIG</b></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Restrictions:<span style='mso-tab-count:1'>†† </span>If <i
style='mso-bidi-font-style:normal'>xd</i> and <i style='mso-bidi-font-style:
normal'>yd</i> are not distinct, only <i style='mso-bidi-font-style:normal'>xd</i>
is returned. The GCD is only returned if <i style='mso-bidi-font-style:normal'>z</i>
distinct from both <i style='mso-bidi-font-style:normal'>xd</i> and <i
style='mso-bidi-font-style:normal'>yd</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Example:</span><span lang=EN-GB
style='font-size:10.0pt;font-family:Courier'><span style='mso-tab-count:1'>†††† </span></span><span
lang=EN-GB style='font-family:Courier'>xgcd(x,p,x,x,x</span><span lang=EN-GB
style='font-size:10.0pt;font-family:Courier'>);<span style="mso-spacerun:yes">†
</span>/* <i style='mso-bidi-font-style:normal'>x = 1/x mod</i><i
style='mso-bidi-font-style:normal'>p</i><span style="mso-spacerun:yes">†
</span>(<i style='mso-bidi-font-style:normal'>p</i> is prime) */<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><b style='mso-bidi-font-weight:normal'><span lang=EN-GB style='font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:"Times New Roman";mso-fareast-font-family:
"Times New Roman";mso-ansi-language:EN-GB;mso-fareast-language:AR-SA;
mso-bidi-language:AR-SA'><br clear=all style='page-break-before:always'></span></b><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc3616"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.60<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>zzn2_add</span></h3><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span lang=EN-GB><o:p>&nbsp;</o:p></span></b></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:"Courier New"'>void <b style='mso-bidi-font-weight:
normal'>zzn2_add</b>(x,y,z)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New"'><span
style='mso-tab-count:2'>††††††††† </span>zzn2 *x<b style='mso-bidi-font-weight:
normal'>,</b>*y,*z;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New"'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrzzn2.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description: <span style='mso-tab-count:
1'>†† </span>Adds two zzn2 variables.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Three
zzn2 variables <i style='mso-bidi-font-style:normal'>x</i>, <i
style='mso-bidi-font-style:normal'>y</i> and <i style='mso-bidi-font-style:
normal'>z</i>. On exit <i style='mso-bidi-font-style:normal'>z=x+y<o:p></o:p></i></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value: <span style='mso-tab-count:
1'>† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc3630"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.61<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>zzn2_compare *</span></h3><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span lang=EN-GB><o:p>&nbsp;</o:p></span></b></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:"Courier New"'>BOOL <b style='mso-bidi-font-weight:
normal'>zzn2_compare</b>(x,y)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New"'><span
style='mso-tab-count:2'>††††††††† </span>zzn2 *x<b style='mso-bidi-font-weight:
normal'>,</b>*y;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New"'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrzzn2.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description: <span style='mso-tab-count:
1'>†† </span>Compares two zzn2 variables for equality</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Two
zzn2 values <i style='mso-bidi-font-style:normal'>x</i> and <i
style='mso-bidi-font-style:normal'>y<o:p></o:p></i></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value: <span style='mso-tab-count:
1'>† </span>TRUE if <i style='mso-bidi-font-style:normal'>x=y</i>, otherwise
FALSE</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='mso-list:none;tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></h3><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc3644"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.62<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>zzn2_conj</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=FR style='mso-ansi-language:FR'>Function:<span
style='mso-tab-count:1'>†††††††† </span></span><span lang=FR style='font-family:
"Courier New";mso-ansi-language:FR'>void <b style='mso-bidi-font-weight:normal'>zzn2_conj</b>(x,y)<o:p></o:p></span></p><p class=MsoNormal><span lang=FR style='font-family:"Courier New";mso-ansi-language:
FR'><span style='mso-tab-count:2'>††††††††† </span></span><span lang=EN-GB
style='font-family:"Courier New"'>zzn2 *x<b style='mso-bidi-font-weight:normal'>,</b>*y;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New"'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrzzn2.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description: <span style='mso-tab-count:
1'>†† </span>Finds the conjugate of a zzn2</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Two
zzn2 variables <i style='mso-bidi-font-style:normal'>x</i> and <i
style='mso-bidi-font-style:normal'>y</i>. If <i style='mso-bidi-font-style:
normal'>x=a+ib</i>, then on exit <i style='mso-bidi-font-style:normal'>y=a-ib<o:p></o:p></i></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value: <span style='mso-tab-count:
1'>† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><span lang=EN-GB style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:
"Times New Roman";mso-fareast-font-family:"Times New Roman";mso-ansi-language:
EN-GB;mso-fareast-language:AR-SA;mso-bidi-language:AR-SA'><br clear=all
style='page-break-before:always'></span><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc3658"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.63<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>zzn2_copy *</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=FR style='mso-ansi-language:FR'>Function:</span><span
lang=FR style='font-family:"Courier New";mso-ansi-language:FR'><span
style='mso-tab-count:1'>†† </span>void <b style='mso-bidi-font-weight:normal'>zzn2_copy</b>(x,y)<o:p></o:p></span></p><p class=MsoNormal><span lang=FR style='font-family:"Courier New";mso-ansi-language:
FR'><span style='mso-tab-count:2'>††††††††† </span></span><span lang=EN-GB
style='font-family:"Courier New"'>zzn2 *x<b style='mso-bidi-font-weight:normal'>,</b>*y;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New"'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrzzn2.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Copies one zzn2 to another</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Two
zzn2 variables <i style='mso-bidi-font-style:normal'>x</i> and <i
style='mso-bidi-font-style:normal'>y</i>. On exit <i style='mso-bidi-font-style:
normal'>y=x<o:p></o:p></i></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value: <span style='mso-tab-count:
1'>† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><span style='mso-tab-count:1'>††††††††††† </span></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc3672"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.64<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>zzn2_from_big</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:"Courier New"'>void <b style='mso-bidi-font-weight:
normal'>zzn2_from_big</b>(a,x)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New"'><span
style='mso-tab-count:2'>††††††††† </span>big a;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New"'><span
style='mso-tab-count:2'>††††††††† </span>zzn2 *x;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrzzn2.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Creates a zzn2
from a big integer. This is converted internally into <i style='mso-bidi-font-style:
normal'>n-residue</i> format.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters: <span style='mso-tab-count:
1'>††† </span>A big integer <i style='mso-bidi-font-style:normal'>a</i> and a
zzn2 <i style='mso-bidi-font-style:normal'>x</i>. On exit <i style='mso-bidi-font-style:
normal'>x=a<o:p></o:p></i></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc3686"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.65<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>zzn2_from_bigs</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:"Courier New"'>void <b style='mso-bidi-font-weight:
normal'>zzn2_from_bigs</b>(a,b,x)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New"'><span
style='mso-tab-count:2'>††††††††† </span>big a,b;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New"'><span
style='mso-tab-count:2'>††††††††† </span>zzn2 *x;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrzzn2.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Creates a zzn2
from two big integers. These are converted internally into <i style='mso-bidi-font-style:
normal'>n-residue</i> format.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters: <span style='mso-tab-count:
1'>††† </span>Two big integers <i style='mso-bidi-font-style:normal'>a</i> and <i
style='mso-bidi-font-style:normal'>b</i> and a zzn2 <i style='mso-bidi-font-style:
normal'>x</i>. On exit <i style='mso-bidi-font-style:normal'>x=a+ib<o:p></o:p></i></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None<br clear=all style='page-break-before:always'><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc3700"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.66<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>zzn2_from_int</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:"Courier New"'>void <b style='mso-bidi-font-weight:
normal'>zzn2_from_int</b>(a,x)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New"'><span
style='mso-tab-count:2'>††††††††† </span>int a;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New"'><span
style='mso-tab-count:2'>††††††††† </span>zzn2 *x;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New"'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrzzn2.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Converts an integer to zzn2 format</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>An
integer <i style='mso-bidi-font-style:normal'>a</i> and a zzn2 <i
style='mso-bidi-font-style:normal'>x</i>. On exit <i style='mso-bidi-font-style:
normal'>x=a<o:p></o:p></i></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value: <span style='mso-tab-count:
1'>† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc3714"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.67<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>zzn2_from_ints</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:"Courier New"'>void <b style='mso-bidi-font-weight:
normal'>zzn2_from_ints</b>(a,b,x)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New"'><span
style='mso-tab-count:2'>††††††††† </span>int a,b;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New"'><span
style='mso-tab-count:2'>††††††††† </span>zzn2 *x;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrzzn2.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Creates a zzn2 from two integers</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters: <span style='mso-tab-count:
1'>††† </span>Two integers <i style='mso-bidi-font-style:normal'>a</i> and <i
style='mso-bidi-font-style:normal'>b</i> and a zzn2 <i style='mso-bidi-font-style:
normal'>x</i>. On exit <i style='mso-bidi-font-style:normal'>x=a+ib<o:p></o:p></i></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc3730"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.68<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>zzn2_from_zzn</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:"Courier New"'>void <b style='mso-bidi-font-weight:
normal'>zzn2_from_zzn</b>(a,x)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New"'><span
style='mso-tab-count:2'>††††††††† </span>big a;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New"'><span
style='mso-tab-count:2'>††††††††† </span>zzn2 *x;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrzzn2.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Creates a zzn2 from a big already in <i style='mso-bidi-font-style:
normal'>n-residue</i> format.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters: <span style='mso-tab-count:
1'>††† </span>A big <i style='mso-bidi-font-style:normal'>a</i> and a zzn2 <i
style='mso-bidi-font-style:normal'>x</i>. On exit <i style='mso-bidi-font-style:
normal'>x=a<o:p></o:p></i></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None<br clear=all style='page-break-before:always'><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc3744"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.69<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>zzn2_from_zzns</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:"Courier New"'>void <b style='mso-bidi-font-weight:
normal'>zzn2_from_zzns</b>(a,b,x)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New"'><span
style='mso-tab-count:2'>††††††††† </span>big a,b;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New"'><span
style='mso-tab-count:2'>††††††††† </span>zzn2 *x;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrzzn2.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Creates a zzn2 from two bigs already in <i style='mso-bidi-font-style:
normal'>n-residue</i> format.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters: <span style='mso-tab-count:
1'>††† </span>Two bigs <i style='mso-bidi-font-style:normal'>a</i> and <i
style='mso-bidi-font-style:normal'>b</i> and a zzn2 <i style='mso-bidi-font-style:
normal'>x</i>. On exit <i style='mso-bidi-font-style:normal'>x=a+ib<o:p></o:p></i></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc3760"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.70<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>zzn2_imul</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=FR style='mso-ansi-language:FR'>Function:<span
style='mso-tab-count:1'>†††††††† </span></span><span lang=FR style='font-family:
"Courier New";mso-ansi-language:FR'>void <b style='mso-bidi-font-weight:normal'>zzn2_simul</b>(x,y,z)<o:p></o:p></span></p><p class=MsoNormal><span lang=FR style='font-family:"Courier New";mso-ansi-language:
FR'><span style='mso-tab-count:2'>††††††††† </span></span><span lang=EN-GB
style='font-family:"Courier New"'>zzn2 *x,*z;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New"'><span
style='mso-tab-count:2'>††††††††† </span>int y;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New"'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrzzn2.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description: <span style='mso-tab-count:
1'>†† </span>Multiplies a zzn2 variable by an integer.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Two
zzn2 variables <i style='mso-bidi-font-style:normal'>x</i> and <i
style='mso-bidi-font-style:normal'>z</i>, and an integer <i style='mso-bidi-font-style:
normal'>y</i>. On exit <i style='mso-bidi-font-style:normal'>z=x.y<o:p></o:p></i></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value: <span style='mso-tab-count:
1'>† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc3775"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.71<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>zzn2_inv</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:"Courier New"'>BOOL <b style='mso-bidi-font-weight:
normal'>zzn2_inv</b>(x)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><span style='mso-tab-count:2'>††††††††††††††††††††††† </span></span><span
lang=EN-GB style='font-family:"Courier New"'>zzn2 *x;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New"'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrzzn2.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>In-place inversion of a zzn2 variable </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A
single zzn2 variable <i style='mso-bidi-font-style:normal'>x</i>. On exit <i
style='mso-bidi-font-style:normal'>x=1/x</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None<br clear=all style='page-break-before:always'><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc3788"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.72<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>zzn2_isunity</span></h3><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span lang=EN-GB><o:p>&nbsp;</o:p></span></b></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:"Courier New"'>BOOL <b style='mso-bidi-font-weight:
normal'>zzn2_isunity</b>(x)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><span style='mso-tab-count:2'>††††††††††††††††††††††† </span></span><span
lang=EN-GB style='font-family:"Courier New"'>zzn2 *x;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New"'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrzzn2.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Tests a zzn2 value for equality to one</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A
single zzn2 variable <i style='mso-bidi-font-style:normal'>x<o:p></o:p></i></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>TRUE if <i style='mso-bidi-font-style:normal'>x</i> is one,
otherwise FALSE.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc3803"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.73<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>zzn2_iszero *</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:"Courier New"'>BOOL <b style='mso-bidi-font-weight:
normal'>zzn2_iszero</b>(x)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><span style='mso-tab-count:2'>††††††††††††††††††††††† </span></span><span
lang=EN-GB style='font-family:"Courier New"'>zzn2 *x;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New"'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrzzn2.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Tests a zzn2 variable for equality to zero</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A
single zzn2 value <i style='mso-bidi-font-style:normal'>x<o:p></o:p></i></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>TRUE if <i style='mso-bidi-font-style:normal'>x</i> is zero,
otherwise FALSE.</span></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><i style='mso-bidi-font-style:
normal'><span lang=EN-GB style='font-family:Arial;mso-bidi-font-family:"Times New Roman"'><o:p>&nbsp;</o:p></span></i></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><i style='mso-bidi-font-style:
normal'><span lang=EN-GB style='font-family:Arial;mso-bidi-font-family:"Times New Roman"'><o:p>&nbsp;</o:p></span></i></b></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc3817"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.74<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>zzn2_mul</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=FR style='mso-ansi-language:FR'>Function:<span
style='mso-tab-count:1'>†††††††† </span></span><span lang=FR style='font-family:
"Courier New";mso-ansi-language:FR'>void <b style='mso-bidi-font-weight:normal'>zzn2_mul</b>(x,y,z)<o:p></o:p></span></p><p class=MsoNormal><span lang=FR style='font-family:"Courier New";mso-ansi-language:
FR'><span style='mso-tab-count:2'>††††††††† </span></span><span lang=EN-GB
style='font-family:"Courier New"'>zzn2 *<b style='mso-bidi-font-weight:normal'>x,</b>*y,*z;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New"'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrzzn2.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Description: <span style='mso-tab-count:1'>†† </span>Multiplies two
zzn2 variables. If <i style='mso-bidi-font-style:normal'>x </i>and <i
style='mso-bidi-font-style:normal'>y</i> are the same variable, a faster
squaring method is used.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Three
zzn2 variables <i style='mso-bidi-font-style:normal'>x, y</i> and <i
style='mso-bidi-font-style:normal'>z</i>. On exit <i style='mso-bidi-font-style:
normal'>z=x.y<o:p></o:p></i></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value: <span style='mso-tab-count:
1'>† </span>None<br clear=all style='page-break-before:always'><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc3830"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.75<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>zzn2_negate</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-IE style='mso-ansi-language:EN-IE'>Function:<span
style='mso-tab-count:1'>†††††††† </span></span><span lang=EN-IE
style='font-family:"Courier New";mso-ansi-language:EN-IE'>void <b
style='mso-bidi-font-weight:normal'>zzn2</b></span><b style='mso-bidi-font-weight:
normal'><span lang=ES style='font-family:"Courier New";mso-ansi-language:ES'>_negate</span></b><span
lang=ES style='font-family:"Courier New";mso-ansi-language:ES'>(x,y)<o:p></o:p></span></p><p class=MsoNormal><span lang=ES style='mso-ansi-language:ES'><span
style='mso-tab-count:2'>††††††††††††††††††††††† </span></span><span lang=ES
style='font-family:"Courier New";mso-ansi-language:ES'>zzn2 *<b
style='mso-bidi-font-weight:normal'>x,</b>*y;<o:p></o:p></span></p><p class=MsoNormal><span lang=ES style='font-family:"Courier New";mso-ansi-language:
ES'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrzzn2.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Negate a zzn2.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Two
zzn2 variables <i style='mso-bidi-font-style:normal'>x</i> and <i
style='mso-bidi-font-style:normal'>y</i>. On exit <i style='mso-bidi-font-style:
normal'>y=-x<o:p></o:p></i></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc3844"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.76<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>zzn2_sadd</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=FR style='mso-ansi-language:FR'>Function:<span
style='mso-tab-count:1'>†††††††† </span></span><span lang=FR style='font-family:
"Courier New";mso-ansi-language:FR'>void <b style='mso-bidi-font-weight:normal'>zzn2_sadd</b>(x,y,z)<o:p></o:p></span></p><p class=MsoNormal><span lang=FR style='font-family:"Courier New";mso-ansi-language:
FR'><span style='mso-tab-count:2'>††††††††† </span></span><span lang=EN-GB
style='font-family:"Courier New"'>zzn2 *x,*z;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New"'><span
style='mso-tab-count:2'>††††††††† </span>big y;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New"'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrzzn2.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description: <span style='mso-tab-count:
1'>†† </span>Adds a big in <i style='mso-bidi-font-style:normal'>n-residue</i>
format to a zzn2 .</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Two
zzn2 variables <i style='mso-bidi-font-style:normal'>x</i> and <i
style='mso-bidi-font-style:normal'>z</i>, and a big variable <i
style='mso-bidi-font-style:normal'>y</i>. On exit <i style='mso-bidi-font-style:
normal'>z=x+y<o:p></o:p></i></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value: <span style='mso-tab-count:
1'>† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc3859"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.77<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>zzn2_smul</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:"Courier New"'>void <b style='mso-bidi-font-weight:
normal'>zzn2_smul</b>(x,y,z)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New"'><span
style='mso-tab-count:2'>††††††††† </span>zzn2 *x,*z;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New"'><span
style='mso-tab-count:2'>††††††††† </span>big y;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New"'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrzzn2.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description: <span style='mso-tab-count:
1'>†† </span>Multiplies a zzn2 variable by a big in <i style='mso-bidi-font-style:
normal'>n-residue</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Two
zzn2 variables <i style='mso-bidi-font-style:normal'>x</i> and <i
style='mso-bidi-font-style:normal'>z</i>, and a big variable <i
style='mso-bidi-font-style:normal'>y</i>. On exit <i style='mso-bidi-font-style:
normal'>z=x.y<o:p></o:p></i></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value: <span style='mso-tab-count:
1'>† </span>None<br clear=all style='page-break-before:always'><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc3873"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.78<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>zzn2_ssub</span></h3><p class=MsoNormal><span lang=FR style='mso-ansi-language:FR'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=FR style='mso-ansi-language:FR'>Function:<span
style='mso-tab-count:1'>†††††††† </span></span><span lang=FR style='font-family:
"Courier New";mso-ansi-language:FR'>void <b style='mso-bidi-font-weight:normal'>zzn2_ssub</b>(x,y,z)<o:p></o:p></span></p><p class=MsoNormal><span lang=FR style='font-family:"Courier New";mso-ansi-language:
FR'><span style='mso-tab-count:2'>††††††††† </span>zzn2 *x,*z;<o:p></o:p></span></p><p class=MsoNormal><span lang=FR style='font-family:"Courier New";mso-ansi-language:
FR'><span style='mso-tab-count:2'>††††††††† </span></span><span lang=EN-GB
style='font-family:"Courier New"'>big y;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New"'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrzzn2.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description: <span style='mso-tab-count:
1'>†† </span>Subtracts a big in <i style='mso-bidi-font-style:normal'>n-residue</i>
format from a zzn2 .</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Two
zzn2 variables <i style='mso-bidi-font-style:normal'>x</i> and <i
style='mso-bidi-font-style:normal'>z</i>, and a big variable <i
style='mso-bidi-font-style:normal'>y</i>. On exit <i style='mso-bidi-font-style:
normal'>z=x-y<o:p></o:p></i></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value: <span style='mso-tab-count:
1'>† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc3888"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.79<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>zzn2_sub</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=FR style='mso-ansi-language:FR'>Function:<span
style='mso-tab-count:1'>†††††††† </span></span><span lang=FR style='font-family:
"Courier New";mso-ansi-language:FR'>void <b style='mso-bidi-font-weight:normal'>zzn2_sub</b>(x,y,z)<o:p></o:p></span></p><p class=MsoNormal><span lang=FR style='font-family:"Courier New";mso-ansi-language:
FR'><span style='mso-tab-count:2'>††††††††† </span></span><span lang=EN-GB
style='font-family:"Courier New"'>zzn2 *<b style='mso-bidi-font-weight:normal'>x,</b>*y,*z;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New"'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrzzn2.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description: <span style='mso-tab-count:
1'>†† </span>Subtracts two zzn2 variables .</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Three
zzn2 variables <i style='mso-bidi-font-style:normal'>x, y</i> and <i
style='mso-bidi-font-style:normal'>z</i>. On exit <i style='mso-bidi-font-style:
normal'>z=x-y<o:p></o:p></i></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value: <span style='mso-tab-count:
1'>† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc3902"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.80<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>zzn2_timesi</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:"Courier New"'>BOOL <b style='mso-bidi-font-weight:
normal'>zzn2_timesi</b>(x)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><span style='mso-tab-count:2'>††††††††††††††††††††††† </span></span><span
lang=EN-GB style='font-family:"Courier New"'>zzn2 *x;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New"'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrzzn2.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>In-place
multiplication of a zzn2 by<i style='mso-bidi-font-style:normal'> i,</i> the
imaginary square root of the quadratic non-residue.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A
single zzn2 variable <i style='mso-bidi-font-style:normal'>x</i>. If <i
style='mso-bidi-font-style:normal'>x=a+ib</i> then on exit <i style='mso-bidi-font-style:
normal'>x=i</i></span><i style='mso-bidi-font-style:normal'><sup><span
lang=EN-GB style='mso-bidi-font-size:12.0pt'>2</span></sup><span lang=EN-GB>b+ia</span></i><span
lang=EN-GB>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value: <span style='mso-tab-count:
1'>† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><span lang=EN-GB style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:
"Times New Roman";mso-fareast-font-family:"Times New Roman";mso-ansi-language:
EN-GB;mso-fareast-language:AR-SA;mso-bidi-language:AR-SA'><br clear=all
style='page-break-before:always'></span><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc3916"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.2.81<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>zzn2_zero *</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:"Courier New"'>void <b style='mso-bidi-font-weight:
normal'>zzn2_iszero</b>(x)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><span style='mso-tab-count:2'>††††††††††††††††††††††† </span></span><span
lang=EN-GB style='font-family:"Courier New"'>zzn2 *x;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New"'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrzzn2.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Sets a zzn2 variable to zero</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A
single zzn2 variable <i style='mso-bidi-font-style:normal'>x</i>. On exit <i
style='mso-bidi-font-style:normal'>x=0<o:p></o:p></i></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><b style='mso-bidi-font-weight:normal'><i style='mso-bidi-font-style:normal'><span
lang=EN-GB style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:"Times New Roman";
mso-fareast-font-family:"Times New Roman";mso-ansi-language:EN-GB;mso-fareast-language:
AR-SA;mso-bidi-language:AR-SA'><br clear=all style='page-break-before:always'></span></i></b><h2 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level2 lfo1;tab-stops:
0cm'><a name="_toc3929"></a><&#33;[if &#33;supportLists]><span lang=EN-GB
style='mso-fareast-font-family:Arial;mso-bidi-font-family:Arial'><span
style='mso-list:Ignore'>9.3<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB><span
style="mso-spacerun:yes">†</span>Elliptic curve routines</span></h2><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l5 level3 lfo6;tab-stops:
0cm'><&#33;[if &#33;supportLists]><span lang=X-NONE style='mso-ansi-language:X-NONE;
mso-fareast-language:X-NONE;mso-bidi-language:X-NONE'><span style='mso-list:
Ignore'>9.3.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>ebrick_init</span></h3><p class=MsoIndexHeading><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>BOOL
<b style='mso-bidi-font-weight:normal'>ebrick_init</b>(binst,x,y,a,b,n,w,nb)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style='mso-tab-count:2'>††††††††† </span>ebrick
*binst;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><span style='mso-tab-count:2'>††††††††††††††††††††††† </span></span><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>big
x,y;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style='mso-tab-count:2'>††††††††† </span>big
a,b,n;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style='mso-tab-count:2'>††††††††† </span>int
w,nb;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoIndexHeading><span lang=EN-GB>Module:<span style='mso-tab-count:
1'>††††††††† </span>mrebrick.c</span></p><p class=MsoIndexHeading><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Initialises an
instance of the Comb method for GF(<i style='mso-bidi-font-style:normal'>p</i>)
elliptic curve multiplication with precomputation. </span><span lang=EN-GB
style='mso-bidi-font-size:12.0pt'>I</span><span lang=EN-GB>nternally memory is
allocated for </span><span lang=EN-GB style='mso-bidi-font-size:12.0pt'>2<i
style='mso-bidi-font-style:normal'><sup>w</sup></i> elliptic curve points which
will be precomputed and stored. For bigger <i style='mso-bidi-font-style:normal'>w</i>
more space is required, but the exponentiation is quicker. Try <i
style='mso-bidi-font-style:normal'>w</i>=8.<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A pointer to
the current instance <i style='mso-bidi-font-style:normal'>binst</i>, the fixed
point <i style='mso-bidi-font-style:normal'>G=</i>(<i style='mso-bidi-font-style:
normal'>x,y</i>) on the curve<span style="mso-spacerun:yes">†† </span><i
style='mso-bidi-font-style:normal'>y<sup>2</sup> =x<sup>3</sup> + ax + b</i>,
the modulus <i style='mso-bidi-font-style:normal'>n</i>, and the maximum number
of bits to be used in the exponent <i style='mso-bidi-font-style:normal'>nb</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>TRUE if all went well, FALSE if there was a problem.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Restrictions:<span style='mso-tab-count:1'>†† </span>Note: If
MR_STATIC is defined in <i style='mso-bidi-font-style:normal'>mirdef.h</i>,
then the <i style='mso-bidi-font-style:normal'>x </i>and <i style='mso-bidi-font-style:
normal'>y</i> parameters in this function are replaced by a single </span><span
lang=EN-GB style='font-family:"Courier New"'>mr_small *</span><span lang=EN-GB>
pointer to a precomputed table. In this case the function returns a </span><span
lang=EN-GB style='font-family:"Courier New"'>void</span><span lang=EN-GB>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><span lang=EN-GB style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:
"Times New Roman";mso-fareast-font-family:"Times New Roman";mso-ansi-language:
EN-GB;mso-fareast-language:AR-SA;mso-bidi-language:AR-SA'><br clear=all
style='page-break-before:always'></span><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l4 level3 lfo5;tab-stops:
0cm'><&#33;[if &#33;supportLists]><span lang=X-NONE style='mso-ansi-language:X-NONE;
mso-fareast-language:X-NONE;mso-bidi-language:X-NONE'><span style='mso-list:
Ignore'>9.3.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>ebrick2_init</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>BOOL
<b style='mso-bidi-font-weight:normal'>ebrick2_init</b>(binst,x,y,A,B,m,a,b,c,nb)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style='mso-tab-count:2'>††††††††† </span>ebrick2
*binst;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><span style='mso-tab-count:2'>††††††††††††††††††††††† </span></span><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>big
x,y;<o:p></o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB style='font-family:
"Courier New";mso-bidi-font-family:"Times New Roman"'><span style='mso-tab-count:
2'>††††††††† </span>big A,B;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style='mso-tab-count:2'>††††††††† </span>int
m,a,b,c,nb;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoIndexHeading><span lang=EN-GB>Module:<span style='mso-tab-count:
1'>††††††††† </span>mrec2m.c</span></p><p class=MsoIndexHeading><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Initialises an
instance of the Comb method for GF(2<i style='mso-bidi-font-style:normal'><sup>m</sup></i>)
elliptic curve multiplication with precomputation. The field is defined with
respect to the trinomial basis <i style='mso-bidi-font-style:normal'>t<sup>m</sup>+t<sup>a</sup>+1</i>
or the pentanomial basis <i style='mso-bidi-font-style:normal'>t<sup>m</sup>+t<sup>a</sup>+t<sup>b</sup>+t<sup>c</sup>+1</i>.
</span><span lang=EN-GB style='mso-bidi-font-size:12.0pt'>I</span><span
lang=EN-GB>nternally memory is allocated for </span><span lang=EN-GB
style='mso-bidi-font-size:12.0pt'>2<i style='mso-bidi-font-style:normal'><sup>w</sup></i>
elliptic curve points which will be precomputed and stored. For bigger <i
style='mso-bidi-font-style:normal'>w</i> more space is required, but the
exponentiation is quicker. Try <i style='mso-bidi-font-style:normal'>w</i>=8.<o:p></o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A pointer to
the current instance <i style='mso-bidi-font-style:normal'>binst</i>, the fixed
point <i style='mso-bidi-font-style:normal'>G=</i>(<i style='mso-bidi-font-style:
normal'>x,y</i>) on the curve<span style="mso-spacerun:yes">†† </span><i
style='mso-bidi-font-style:normal'>y<sup>2</sup> + xy = x<sup>3</sup> + Ax<sup>2</sup>
+ B</i>, the field parameters <i style='mso-bidi-font-style:normal'>m, a, b, c</i>,
and the maximum number of bits to be used in the exponent <i style='mso-bidi-font-style:
normal'>nb</i>. Set <i style='mso-bidi-font-style:normal'>b</i> = 0 for a
trinomial basis.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>TRUE if all went well, FALSE if there was a problem.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Restrictions:<span style='mso-tab-count:1'>†† </span>Note: If
MR_STATIC is defined in <i style='mso-bidi-font-style:normal'>mirdef.h</i>,
then the <i style='mso-bidi-font-style:normal'>x </i>and <i style='mso-bidi-font-style:
normal'>y</i> parameters in this function are replaced by a single </span><span
lang=EN-GB style='font-family:"Courier New"'>mr_small *</span><span lang=EN-GB>
pointer to a precomputed table. In this case the function returns a </span><span
lang=EN-GB style='font-family:"Courier New"'>void</span><span lang=EN-GB>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l4 level3 lfo5;tab-stops:
0cm'><&#33;[if &#33;supportLists]><span lang=X-NONE style='mso-ansi-language:X-NONE;
mso-fareast-language:X-NONE;mso-bidi-language:X-NONE'><span style='mso-list:
Ignore'>9.3.2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>ebrick_end *</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>void
<b style='mso-bidi-font-weight:normal'>ebrick_end</b>(binst)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style='mso-tab-count:2'>††††††††† </span>ebrick
*binst<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoIndexHeading><span lang=EN-GB>Module:<span style='mso-tab-count:
1'>††††††††† </span>mrebrick.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Cleans up after
an application of the Comb for GF(<i style='mso-bidi-font-style:normal'>p</i>)
elliptic curves</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A
pointer to the current instance</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>None<span style='mso-tab-count:1'>†† </span><br clear=all
style='page-break-before:always'><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l4 level3 lfo5;tab-stops:
0cm'><&#33;[if &#33;supportLists]><span lang=X-NONE style='mso-ansi-language:X-NONE;
mso-fareast-language:X-NONE;mso-bidi-language:X-NONE'><span style='mso-list:
Ignore'>9.3.3<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>ebrick2_end *</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>void
<b style='mso-bidi-font-weight:normal'>ebrick2_end</b>(binst)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style='mso-tab-count:2'>††††††††† </span>ebrick2
*binst<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoIndexHeading><span lang=EN-GB>Module:<span style='mso-tab-count:
1'>††††††††† </span>mrec2m.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoBodyTextIndent><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Cleans up after an application of the Comb method for GF(2<i
style='mso-bidi-font-style:normal'><sup>m</sup></i>) elliptic curves.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoIndexHeading><span lang=EN-GB>Parameters:<span style='mso-tab-count:
1'>†††† </span>A pointer to the current instance</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>None<span style='mso-tab-count:1'>†† </span></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l4 level3 lfo5;tab-stops:
0cm'><&#33;[if &#33;supportLists]><span lang=X-NONE style='mso-ansi-language:X-NONE;
mso-fareast-language:X-NONE;mso-bidi-language:X-NONE'><span style='mso-list:
Ignore'>9.3.4<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>ecurve_add</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>void <b style='mso-bidi-font-weight:
normal'>ecurve_add</b>(p,pa)<o:p></o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB style='font-family:
Courier'><span style='mso-tab-count:2'>††††††††† </span>epoint *p,*pa;<o:p></o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB style='font-family:
Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Module:<span
style='mso-tab-count:1'>††††††††† </span>mrcurve.c</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Adds
two points on a GF(<i style='mso-bidi-font-style:normal'>p) </i>elliptic curve
using the special rule for addition. Note that if <i style='mso-bidi-font-style:
normal'>pa=p</i>, then a different duplication rule is used. Addition is
quicker if <i style='mso-bidi-font-style:normal'>p</i> is normalised.</span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Two
points on the current active curve<i style='mso-bidi-font-style:normal'>, pa</i>
and <i style='mso-bidi-font-style:normal'>p</i>. On exit <i style='mso-bidi-font-style:
normal'>pa=pa+p.<o:p></o:p></i></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB>Return value:<span style='mso-tab-count:1'>†† </span>None</span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB>Restrictions:<span style='mso-tab-count:1'>††† </span>The
input points must actually be on the current active curve.<br clear=all
style='page-break-before:always'><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l4 level3 lfo5;tab-stops:
0cm'><&#33;[if &#33;supportLists]><span lang=X-NONE style='mso-ansi-language:X-NONE;
mso-fareast-language:X-NONE;mso-bidi-language:X-NONE'><span style='mso-list:
Ignore'>9.3.5<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>ecurve2_add</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>void <b style='mso-bidi-font-weight:
normal'>ecurve2_add</b>(p,pa)<o:p></o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB style='font-family:
Courier'><span style='mso-tab-count:2'>††††††††† </span>epoint *p,*pa;<o:p></o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB style='font-family:
Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Module:<span
style='mso-tab-count:1'>††††††††† </span>mrec2m.c</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Adds
two points on a GF(2<i style='mso-bidi-font-style:normal'><sup>m</sup></i>)
elliptic curve using the special rule for addition. Note that if <i
style='mso-bidi-font-style:normal'>pa=p</i>, then a different duplication rule
is used. Addition is quicker if <i style='mso-bidi-font-style:normal'>p</i> is
normalised.</span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Two
points on the current active curve<i style='mso-bidi-font-style:normal'>, pa</i>
and <i style='mso-bidi-font-style:normal'>p</i>. On exit <i style='mso-bidi-font-style:
normal'>pa=pa+p.<o:p></o:p></i></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB>Return value:<span style='mso-tab-count:1'>†† </span>None</span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB>Restrictions:<span style='mso-tab-count:1'>††† </span>The
input points must actually be on the current active curve.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l4 level3 lfo5;tab-stops:
0cm'><&#33;[if &#33;supportLists]><span lang=X-NONE style='mso-ansi-language:X-NONE;
mso-fareast-language:X-NONE;mso-bidi-language:X-NONE'><span style='mso-list:
Ignore'>9.3.6<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>ecurve_init</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>void <b style='mso-bidi-font-weight:
normal'>ecurve_init</b>(A,B,p,type)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big A,B,p;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>int type;<o:p></o:p></span></p><p class=MsoIndexHeading><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Module:<span
style='mso-tab-count:1'>††††††††† </span>mrcurve.c</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Initialises
the internal parameters of the current active GF(<i style='mso-bidi-font-style:
normal'>p</i>)<i style='mso-bidi-font-style:normal'></i>elliptic curve. The
curve is assumed to be of the form<span style="mso-spacerun:yes">† </span><i
style='mso-bidi-font-style:normal'>y<sup>2</sup> =x<sup>3</sup> + Ax + B mod p</i>,
the so-called Weierstrass model. This routine can be called subsequently with
the parameters of a different curve.</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Three
big numbers <i style='mso-bidi-font-style:normal'>A</i>, <i style='mso-bidi-font-style:
normal'>B</i> and <i style='mso-bidi-font-style:normal'>p</i>. The <i
style='mso-bidi-font-style:normal'>type</i> parameter must be either <b
style='mso-bidi-font-weight:normal'>MR_PROJECTIVE </b>or <b style='mso-bidi-font-weight:
normal'><span style="mso-spacerun:yes">†</span>MR_AFFINE</b>, and specifies
whether projective or affine co-ordinates should be used internally. Normally
the former is faster. </span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Return value:<span
style='mso-tab-count:1'>†† </span>None</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB>Restrictions:<span style='mso-tab-count:1'>††† </span>Allocated
memory will be freed when the current instance of MIRACL is terminated by a
call to <b style='mso-bidi-font-weight:normal'>mirexit</b>. However only one
elliptic curve, GF(<i style='mso-bidi-font-style:normal'>p</i>) or GF(2<i
style='mso-bidi-font-style:normal'><sup>m</sup></i>) may be active within a
single MIRACL instance. In addition, a call to a function like <b
style='mso-bidi-font-weight:normal'>powmod</b> will overwrite the stored
modulus. This can be restored by a repeat call to <b style='mso-bidi-font-weight:
normal'>ecurve_init</b></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB style='font-family:
Courier'><o:p>&nbsp;</o:p></span></p><span lang=EN-GB style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:
Courier;mso-fareast-font-family:"Times New Roman";mso-bidi-font-family:"Times New Roman";
mso-ansi-language:EN-GB;mso-fareast-language:AR-SA;mso-bidi-language:AR-SA'><br
clear=all style='page-break-before:always'></span><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB style='font-family:
Courier'><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l4 level3 lfo5;tab-stops:
0cm'><&#33;[if &#33;supportLists]><span lang=X-NONE style='mso-ansi-language:X-NONE;
mso-fareast-language:X-NONE;mso-bidi-language:X-NONE'><span style='mso-list:
Ignore'>9.3.7<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>ecurve2_init</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>BOOL <b style='mso-bidi-font-weight:
normal'>ecurve2_init</b>(m,a,b,c,A,B,check,type)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big A,B;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>int m,a,b,c,type;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>BOOL check;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Module:<span
style='mso-tab-count:1'>††††††††† </span>mrec2m.c</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Initialises
the internal parameters of the current active elliptic curve. The curve is
assumed to be of the form<span style="mso-spacerun:yes">† </span><i
style='mso-bidi-font-style:normal'>y<sup>2</sup> + xy =x<sup>3</sup> + Ax<sup>2</sup>
+ B </i>. The field is defined with respect to the trinomial basis <i
style='mso-bidi-font-style:normal'>t<sup>m</sup>+t<sup>a</sup>+1</i> or the
pentanomial basis <i style='mso-bidi-font-style:normal'>t<sup>m</sup>+t<sup>a</sup>+t<sup>b</sup>+t<sup>c</sup>+1</i>.
This routine can be called subsequently with the parameters of a different
curve. </span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>The fixed point
<i style='mso-bidi-font-style:normal'>G=</i>(<i style='mso-bidi-font-style:
normal'>x,y</i>) on the curve<span style="mso-spacerun:yes">†† </span><i
style='mso-bidi-font-style:normal'>y<sup>2</sup> + xy = x<sup>3</sup> + Ax<sup>2</sup>
+ B</i>, the field parameters <i style='mso-bidi-font-style:normal'>m, a, b, c.</i>
Set <i style='mso-bidi-font-style:normal'>b</i> = 0 for a trinomial basis. The <i
style='mso-bidi-font-style:normal'>type</i> parameter must be either <b
style='mso-bidi-font-weight:normal'>MR_PROJECTIVE </b>or <b style='mso-bidi-font-weight:
normal'><span style="mso-spacerun:yes">†</span>MR_AFFINE</b>, and specifies
whether projective or affine co-ordinates should be used internally. Normally
the former is faster. If <i style='mso-bidi-font-style:normal'>check</i> is
TRUE a check is made that the specified basis is irreducible. If FALSE, this
basis validity check, which is time-consuming, is suppressed. </span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Return value:<span
style='mso-tab-count:1'>†† </span>TRUE if parameters make sense, otherwise
FALSE.</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB>Restrictions:<span style='mso-tab-count:1'>††† </span>Allocated
memory will be freed when the current instance of MIRACL is terminated by a
call to <b style='mso-bidi-font-weight:normal'>mirexit</b>. However only one
elliptic curve, GF(<i style='mso-bidi-font-style:normal'>p</i>) or GF(2<i
style='mso-bidi-font-style:normal'><sup>m</sup></i>) may be active within a
single MIRACL instance.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l4 level3 lfo5;tab-stops:
0cm'><&#33;[if &#33;supportLists]><span lang=X-NONE style='mso-ansi-language:X-NONE;
mso-fareast-language:X-NONE;mso-bidi-language:X-NONE'><span style='mso-list:
Ignore'>9.3.8<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>ecurve_mult</span></h3><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>void <b style='mso-bidi-font-weight:
normal'>ecurve_mult</b>(k,p,pa)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big k;<o:p></o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB style='font-family:
Courier'><span style='mso-tab-count:2'>††††††††† </span>epoint *p,*pa;<o:p></o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB style='font-family:
Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Module:<span
style='mso-tab-count:1'>††††††††† </span>mrcurve.c</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Multiplies
a point on a GP(<i style='mso-bidi-font-style:normal'>p</i>) elliptic curve by
an integer. Uses the addition/subtraction method.</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A
big number <i style='mso-bidi-font-style:normal'>k</i>, and two points<span
style="mso-spacerun:yes">† </span><i style='mso-bidi-font-style:normal'>p</i>
and <i style='mso-bidi-font-style:normal'>pa</i>. </span><span lang=FR
style='mso-ansi-language:FR'>On exit <i style='mso-bidi-font-style:normal'>pa=k*p.</i><o:p></o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=FR style='mso-ansi-language:FR'><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB>Return value:<span style='mso-tab-count:1'>†† </span>None</span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB>Restrictions:<span style='mso-tab-count:1'>††† </span>The
point <i style='mso-bidi-font-style:normal'>p</i> must be on the active curve.<br
clear=all style='page-break-before:always'><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l4 level3 lfo5;tab-stops:
0cm'><&#33;[if &#33;supportLists]><span lang=X-NONE style='mso-ansi-language:X-NONE;
mso-fareast-language:X-NONE;mso-bidi-language:X-NONE'><span style='mso-list:
Ignore'>9.3.9<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>ecurve2_mult</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>void <b style='mso-bidi-font-weight:
normal'>ecurve2_mult</b>(k,p,pa)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big k;<o:p></o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB style='font-family:
Courier'><span style='mso-tab-count:2'>††††††††† </span>epoint *p,*pa;<o:p></o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB style='font-family:
Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Module:<span
style='mso-tab-count:1'>††††††††† </span>mrec2m.c</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Multiplies
a point on a GF(2<i style='mso-bidi-font-style:normal'><sup>m</sup></i>)<span
style="mso-spacerun:yes">† </span>elliptic curve by an integer. Uses the
addition/subtraction method.</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A
big number <i style='mso-bidi-font-style:normal'>k</i>, and two points<span
style="mso-spacerun:yes">† </span><i style='mso-bidi-font-style:normal'>p</i>
and <i style='mso-bidi-font-style:normal'>pa</i>. </span><span lang=FR
style='mso-ansi-language:FR'>On exit <i style='mso-bidi-font-style:normal'>pa=k*p.</i><o:p></o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=FR style='mso-ansi-language:FR'><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB>Return value:<span style='mso-tab-count:1'>†† </span>None</span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB>Restrictions:<span style='mso-tab-count:1'>††† </span>The
point <i style='mso-bidi-font-style:normal'>p</i> must be on the active curve.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l4 level3 lfo5;tab-stops:
0cm'><&#33;[if &#33;supportLists]><span lang=X-NONE style='mso-ansi-language:X-NONE;
mso-fareast-language:X-NONE;mso-bidi-language:X-NONE'><span style='mso-list:
Ignore'>9.3.10<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><&#33;[endif]><span
lang=EN-GB>ecurve_mult2</span></h3><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>void <b style='mso-bidi-font-weight:
normal'>ecurve_mult2</b>(k1,p1,k2,p2,pa)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big k1,k2;<o:p></o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB style='font-family:
Courier'><span style='mso-tab-count:2'>††††††††† </span>epoint *p1,*p2,*pa;<o:p></o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB style='font-family:
Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Module:<span
style='mso-tab-count:1'>††††††††† </span>mrcurve.c</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Calculates
the point <i style='mso-bidi-font-style:normal'>k1.p1+k2.p2</i> on a GF(<i
style='mso-bidi-font-style:normal'>p</i>) elliptic curve. This is quicker than
doing two separate multiplications and an addition. Useful for certain
cryptosystems. (See <i style='mso-bidi-font-style:normal'>ecsver.c </i>for
example)</span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Two
big integers <i style='mso-bidi-font-style:normal'>k1</i> and <i
style='mso-bidi-font-style:normal'>k2</i>, and three points <i
style='mso-bidi-font-style:normal'>p1, p2</i> and <i style='mso-bidi-font-style:
normal'>pa</i>. </span></p><p class=MsoFooter style='margin-left:72.0pt;tab-stops:36.0pt'><span
lang=EN-GB>On exit <i style='mso-bidi-font-style:normal'>pa = k1.p1+k2.p2<o:p></o:p></i></span></p><p class=MsoFooter style='margin-left:72.0pt;tab-stops:36.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Return value:<span
style='mso-tab-count:1'>†† </span>None</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Restrictions:<span
style='mso-tab-count:1'>††† </span>The points <i style='mso-bidi-font-style:
normal'>p1</i> and <i style='mso-bidi-font-style:normal'>p2</i> must be on the
active curve.</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><span lang=EN-GB style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:
"Times New Roman";mso-fareast-font-family:"Times New Roman";mso-ansi-language:
EN-GB;mso-fareast-language:AR-SA;mso-bidi-language:AR-SA'><br clear=all
style='page-break-before:always'></span><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l4 level3 lfo5;tab-stops:
0cm'><&#33;[if &#33;supportLists]><span lang=X-NONE style='mso-ansi-language:X-NONE;
mso-fareast-language:X-NONE;mso-bidi-language:X-NONE'><span style='mso-list:
Ignore'>9.3.11<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><&#33;[endif]><span
lang=EN-GB>ecurve2_mult2</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>void <b style='mso-bidi-font-weight:
normal'>ecurve2_mult2</b>(k1,p1,k2,p2,pa)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big k1,k2;<o:p></o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB style='font-family:
Courier'><span style='mso-tab-count:2'>††††††††† </span>epoint *p1,*p2,*pa;<o:p></o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB style='font-family:
Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Module:<span
style='mso-tab-count:1'>††††††††† </span>mrec2m.c</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Calculates
the point <i style='mso-bidi-font-style:normal'>k1.p1+k2.p2</i> on a GF(2<i
style='mso-bidi-font-style:normal'><sup>m</sup></i>) elliptic curve. This is
quicker than doing two separate multiplications and an addition. Useful for
certain cryptosystems. (See <i style='mso-bidi-font-style:normal'>ecsver2.c </i>for
example)</span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Two
big integers <i style='mso-bidi-font-style:normal'>k1</i> and <i
style='mso-bidi-font-style:normal'>k2</i>, and three points <i
style='mso-bidi-font-style:normal'>p1, p2</i> and <i style='mso-bidi-font-style:
normal'>pa</i>. </span></p><p class=MsoFooter style='margin-left:72.0pt;tab-stops:36.0pt'><span
lang=EN-GB>On exit <i style='mso-bidi-font-style:normal'>pa = k1.p1+k2.p2<o:p></o:p></i></span></p><p class=MsoFooter style='margin-left:72.0pt;tab-stops:36.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Return value:<span
style='mso-tab-count:1'>†† </span>None</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Restrictions:<span
style='mso-tab-count:1'>††† </span>The points <i style='mso-bidi-font-style:
normal'>p1</i> and <i style='mso-bidi-font-style:normal'>p2</i> must be on the
active curve.</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l4 level3 lfo5;tab-stops:
0cm'><&#33;[if &#33;supportLists]><span lang=X-NONE style='mso-ansi-language:X-NONE;
mso-fareast-language:X-NONE;mso-bidi-language:X-NONE'><span style='mso-list:
Ignore'>9.3.12<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><&#33;[endif]><span
lang=EN-GB>ecurve_multi_add</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>void <b style='mso-bidi-font-weight:
normal'>ecurve_multi_add</b>(m,x,w)<o:p></o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB style='font-family:
Courier'><span style='mso-tab-count:2'>††††††††† </span>int m;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>epoint **x<b style='mso-bidi-font-weight:
normal'>,</b>**w;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoIndexHeading><span lang=EN-GB>Module:<span style='mso-tab-count:
1'>††††††††† </span>mrcurve.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoBodyTextIndent><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Simultaneously adds pairs of points on the active GF(<i
style='mso-bidi-font-style:normal'>p</i>) curve. This is much quicker than
adding them individually, but <u>only</u> when using Affine co-ordinates.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>An integer <i
style='mso-bidi-font-style:normal'>m</i> and two arrays of points <i
style='mso-bidi-font-style:normal'>w</i> and <i style='mso-bidi-font-style:
normal'>x</i>. On exit <i style='mso-bidi-font-style:normal'>w[i]=w[i]+x[i]</i>
for <i style='mso-bidi-font-style:normal'>i</i> =0 to <i style='mso-bidi-font-style:
normal'>m</i>-1</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Return value:<span style='mso-tab-count:1'>†† </span>None</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Restrictions:<span style='mso-tab-count:1'>††† </span>Only useful
when using Affine co-ordinates.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>See also:<span style='mso-tab-count:1'>††††††††† </span><b
style='mso-bidi-font-weight:normal'>ecurve_init</b> and <b style='mso-bidi-font-weight:
normal'>nres_multi_inverse</b>, which is used internally.<br clear=all
style='page-break-before:always'><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l4 level3 lfo5;tab-stops:
0cm'><&#33;[if &#33;supportLists]><span lang=X-NONE style='mso-ansi-language:X-NONE;
mso-fareast-language:X-NONE;mso-bidi-language:X-NONE'><span style='mso-list:
Ignore'>9.3.13<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><&#33;[endif]><span
lang=EN-GB>ecurve2_multi_add</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>void <b style='mso-bidi-font-weight:
normal'>ecurve2_multi_add</b>(m,x,w)<o:p></o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB style='font-family:
Courier'><span style='mso-tab-count:2'>††††††††† </span>int m;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>epoint **x<b style='mso-bidi-font-weight:
normal'>,</b>**w;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoIndexHeading><span lang=EN-GB>Module:<span style='mso-tab-count:
1'>††††††††† </span>mrec2m.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoBodyTextIndent><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Simultaneously adds pairs of points on the active GF(2<i
style='mso-bidi-font-style:normal'><sup>m</sup></i>) curve. This is much
quicker than adding them individually, but <u>only</u> when using Affine
co-ordinates.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>An integer <i
style='mso-bidi-font-style:normal'>m</i> and two arrays of points <i
style='mso-bidi-font-style:normal'>w</i> and <i style='mso-bidi-font-style:
normal'>x</i>. On exit <i style='mso-bidi-font-style:normal'>w[i]=w[i]+x[i]</i>
for <i style='mso-bidi-font-style:normal'>i</i> =0 to <i style='mso-bidi-font-style:
normal'>m</i>-1</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Return value:<span style='mso-tab-count:1'>†† </span>None</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Restrictions:<span style='mso-tab-count:1'>††† </span>Only useful
when using Affine co-ordinates.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>See also:<span style='mso-tab-count:1'>††††††††† </span><b
style='mso-bidi-font-weight:normal'>ecurve2_init<o:p></o:p></b></span></p><h3 style='mso-list:none;tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></h3><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l4 level3 lfo5;tab-stops:
0cm'><&#33;[if &#33;supportLists]><span lang=X-NONE style='mso-ansi-language:X-NONE;
mso-fareast-language:X-NONE;mso-bidi-language:X-NONE'><span style='mso-list:
Ignore'>9.3.14<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><&#33;[endif]><span
lang=EN-GB>ecurve_multn</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>void <b style='mso-bidi-font-weight:
normal'>ecurve_multn</b>(n,k,p,pa)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>int n;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big *k;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>epoint **p;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoIndexHeading><span lang=EN-GB>Module:<span style='mso-tab-count:
1'>††††††††† </span>mrcurve.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Calculates the
point <i style='mso-bidi-font-style:normal'>k[0].p[0] + k[1].p[1] + Ö + k[n-1].p[n-1]</i>
on a GF(<i style='mso-bidi-font-style:normal'>p</i>) elliptic curve, for <i
style='mso-bidi-font-style:normal'>n&gt;2</i>.</span></p><p class=MsoIndexHeading><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:76.5pt;text-indent:-76.5pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††††† </span>An integer <i
style='mso-bidi-font-style:normal'>n</i>, an array of <i style='mso-bidi-font-style:
normal'>n</i> big numbers <i style='mso-bidi-font-style:normal'>k[]</i>, and an
array of <i style='mso-bidi-font-style:normal'>n</i> points. The result is
returned in <i style='mso-bidi-font-style:normal'>pa</i>.</span></p><p class=MsoNormal style='margin-left:76.5pt;text-indent:-76.5pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:76.5pt;text-indent:-76.5pt'><span
lang=EN-GB>Return value:<span style='mso-tab-count:1'>††† </span>None</span></p><p class=MsoNormal style='margin-left:76.5pt;text-indent:-76.5pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:76.5pt;text-indent:-76.5pt'><span
lang=EN-GB>Restrictions:<span style='mso-tab-count:1'>†††† </span>The points
must be on the active curve. The <i style='mso-bidi-font-style:normal'>k[]</i>
values must all be positive. The underlying number base must be a power of 2.</span></p><p class=MsoNormal style='margin-left:76.5pt;text-indent:-76.5pt'><span
lang=EN-GB><span style="mso-spacerun:yes">†</span><br clear=all
style='page-break-before:always'><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l4 level3 lfo5;tab-stops:
0cm'><&#33;[if &#33;supportLists]><span lang=X-NONE style='mso-ansi-language:X-NONE;
mso-fareast-language:X-NONE;mso-bidi-language:X-NONE'><span style='mso-list:
Ignore'>9.3.15<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><&#33;[endif]><span
lang=EN-GB>ecurve2_multn</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>void <b style='mso-bidi-font-weight:
normal'>ecurve2_multn</b>(n,k,p,pa)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>int n;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big *k;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>epoint **p;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoIndexHeading><span lang=EN-GB>Module:<span style='mso-tab-count:
1'>††††††††† </span>mrec2m.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Calculates the
point <i style='mso-bidi-font-style:normal'>k[0].p[0] + k[1].p[1] + Ö +
k[n-1].p[n-1]</i> on a GF(2<i style='mso-bidi-font-style:normal'><sup>m</sup></i>)
elliptic curve, for <i style='mso-bidi-font-style:normal'>n&gt;2</i>.</span></p><p class=MsoIndexHeading><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:76.5pt;text-indent:-76.5pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††††† </span>An integer <i
style='mso-bidi-font-style:normal'>n</i>, an array of <i style='mso-bidi-font-style:
normal'>n</i> big numbers <i style='mso-bidi-font-style:normal'>k[]</i>, and an
array of <i style='mso-bidi-font-style:normal'>n</i> points. The result is
returned in <i style='mso-bidi-font-style:normal'>pa</i>.</span></p><p class=MsoNormal style='margin-left:76.5pt;text-indent:-76.5pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:76.5pt;text-indent:-76.5pt'><span
lang=EN-GB>Return value:<span style='mso-tab-count:1'>††† </span>None</span></p><p class=MsoNormal style='margin-left:76.5pt;text-indent:-76.5pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:76.5pt;text-indent:-76.5pt'><span
lang=EN-GB>Restrictions:<span style='mso-tab-count:1'>†††† </span>The points
must be on the active curve. The <i style='mso-bidi-font-style:normal'>k[]</i>
values must all be positive. The underlying number base must be a power of 2.</span></p><p class=MsoNormal style='margin-left:76.5pt;text-indent:-76.5pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:76.5pt;text-indent:-76.5pt'><span
lang=EN-GB><span style="mso-spacerun:yes">†</span></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l4 level3 lfo5;tab-stops:
0cm'><&#33;[if &#33;supportLists]><span lang=X-NONE style='mso-ansi-language:X-NONE;
mso-fareast-language:X-NONE;mso-bidi-language:X-NONE'><span style='mso-list:
Ignore'>9.3.16<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><&#33;[endif]><span
lang=EN-GB>ecurve_sub</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>void <b style='mso-bidi-font-weight:
normal'>ecurve_sub</b>(p,pa)<o:p></o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB style='font-family:
Courier'><span style='mso-tab-count:2'>††††††††† </span>epoint *p,*pa;<o:p></o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB style='font-family:
Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Module:<span
style='mso-tab-count:1'>††††††††† </span>mrcurve.c</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Subtracts
two points on a GF(<i style='mso-bidi-font-style:normal'>p</i>) elliptic curve.
Actually negates <i style='mso-bidi-font-style:normal'>p</i> and adds it to <i
style='mso-bidi-font-style:normal'>pa</i>. Subtraction is quicker if <i
style='mso-bidi-font-style:normal'>p</i> is normalised.</span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Two
points on the current active curve<i style='mso-bidi-font-style:normal'>, pa</i>
and <i style='mso-bidi-font-style:normal'>p</i>. On exit <i style='mso-bidi-font-style:
normal'>pa = pa-p.<o:p></o:p></i></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB>Return value:<span style='mso-tab-count:1'>†† </span>None</span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB>Restrictions:<span style='mso-tab-count:1'>††† </span>The
input points must actually be on the current active curve.<br clear=all
style='page-break-before:always'><b style='mso-bidi-font-weight:normal'><o:p>&nbsp;</o:p></b></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l4 level3 lfo5;tab-stops:
0cm'><&#33;[if &#33;supportLists]><span lang=X-NONE style='mso-ansi-language:X-NONE;
mso-fareast-language:X-NONE;mso-bidi-language:X-NONE'><span style='mso-list:
Ignore'>9.3.17<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><&#33;[endif]><span
lang=EN-GB>ecurve2_sub</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>void <b style='mso-bidi-font-weight:
normal'>ecurve2_sub</b>(p,pa)<o:p></o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB style='font-family:
Courier'><span style='mso-tab-count:2'>††††††††† </span>epoint *p,*pa;<o:p></o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB style='font-family:
Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Module:<span
style='mso-tab-count:1'>††††††††† </span>mrec2m.c</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Subtracts
two points on a GF(2<i style='mso-bidi-font-style:normal'><sup>m</sup></i>)
elliptic curve. Actually negates <i style='mso-bidi-font-style:normal'>p</i>
and adds it to <i style='mso-bidi-font-style:normal'>pa</i>. Subtraction is
quicker if <i style='mso-bidi-font-style:normal'>p</i> is normalised.</span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Two
points on the current active curve<i style='mso-bidi-font-style:normal'>, pa</i>
and <i style='mso-bidi-font-style:normal'>p</i>. On exit <i style='mso-bidi-font-style:
normal'>pa = pa-p.<o:p></o:p></i></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB>Return value:<span style='mso-tab-count:1'>†† </span>None</span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB>Restrictions:<span style='mso-tab-count:1'>††† </span>The
input points must actually be on the current active curve.</span></p><h3 style='mso-list:none;tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l4 level3 lfo5;tab-stops:
0cm'><&#33;[if &#33;supportLists]><span lang=X-NONE style='mso-ansi-language:X-NONE;
mso-fareast-language:X-NONE;mso-bidi-language:X-NONE'><span style='mso-list:
Ignore'>9.3.18<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><&#33;[endif]><span
lang=EN-GB>epoint_comp</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>BOOL <b style='mso-bidi-font-weight:
normal'>epoint_comp</b>(p1,p2)<o:p></o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB style='font-family:
Courier'><span style='mso-tab-count:2'>††††††††† </span>epoint *p1,*p2;<o:p></o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB style='font-family:
Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Module:<span
style='mso-tab-count:1'>††††††††† </span>mrcurve.c</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Description:<span
style='mso-tab-count:1'>††† </span>Compares two points on the current active
GF(<i style='mso-bidi-font-style:normal'>p</i>) elliptic curve.</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Parameters:<span
style='mso-tab-count:1'>†††† </span>Two points <i style='mso-bidi-font-style:
normal'>p1</i> and <i style='mso-bidi-font-style:normal'>p2</i>.</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Return Value:<span
style='mso-tab-count:1'>† </span>TRUE if the points are the same, otherwise
FALSE.</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Restrictions:<span
style='mso-tab-count:1'>††† </span>None</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><span lang=EN-GB style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:
"Times New Roman";mso-fareast-font-family:"Times New Roman";mso-ansi-language:
EN-GB;mso-fareast-language:AR-SA;mso-bidi-language:AR-SA'><br clear=all
style='page-break-before:always'></span><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l4 level3 lfo5;tab-stops:
0cm'><&#33;[if &#33;supportLists]><span lang=X-NONE style='mso-ansi-language:X-NONE;
mso-fareast-language:X-NONE;mso-bidi-language:X-NONE'><span style='mso-list:
Ignore'>9.3.19<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><&#33;[endif]><span
lang=EN-GB>epoint2_comp</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>BOOL <b style='mso-bidi-font-weight:
normal'>epoint2_comp</b>(p1,p2)<o:p></o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB style='font-family:
Courier'><span style='mso-tab-count:2'>††††††††† </span>epoint *p1,*p2;<o:p></o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB style='font-family:
Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Module:<span
style='mso-tab-count:1'>††††††††† </span>mrec2m.c</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Description:<span
style='mso-tab-count:1'>††† </span>Compares two points on the current active
GF(2<i style='mso-bidi-font-style:normal'><sup>m</sup></i>) elliptic curve.</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Parameters:<span
style='mso-tab-count:1'>†††† </span>Two points <i style='mso-bidi-font-style:
normal'>p1</i> and <i style='mso-bidi-font-style:normal'>p2</i>.</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Return Value:<span
style='mso-tab-count:1'>† </span>TRUE if the points are the same, otherwise
FALSE.</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Restrictions:<span
style='mso-tab-count:1'>††† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l4 level3 lfo5;tab-stops:
0cm'><&#33;[if &#33;supportLists]><span lang=X-NONE style='mso-ansi-language:X-NONE;
mso-fareast-language:X-NONE;mso-bidi-language:X-NONE'><span style='mso-list:
Ignore'>9.3.20<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><&#33;[endif]><span
lang=EN-GB>epoint_copy *</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>void <b style='mso-bidi-font-weight:
normal'>epoint_copy</b>(p1,p2)<o:p></o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB style='font-family:
Courier'><span style='mso-tab-count:2'>††††††††† </span>epoint *p1,*p2;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Module:<span
style='mso-tab-count:1'>††††††††† </span>mrcurve.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Copies one point to another on a GF(<i style='mso-bidi-font-style:
normal'>p</i>) elliptic curve.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Two
points <i style='mso-bidi-font-style:normal'>p1</i> and <i style='mso-bidi-font-style:
normal'>p2</i>. On exit <i style='mso-bidi-font-style:normal'>p2=p1</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><span lang=EN-GB style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:
"Times New Roman";mso-fareast-font-family:"Times New Roman";mso-ansi-language:
EN-GB;mso-fareast-language:AR-SA;mso-bidi-language:AR-SA'><br clear=all
style='page-break-before:always'></span><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l4 level3 lfo5;tab-stops:
0cm'><&#33;[if &#33;supportLists]><span lang=X-NONE style='mso-ansi-language:X-NONE;
mso-fareast-language:X-NONE;mso-bidi-language:X-NONE'><span style='mso-list:
Ignore'>9.3.21<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><&#33;[endif]><span
lang=EN-GB>epoint2_copy *</span></h3><p class=MsoIndexHeading><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>void <b style='mso-bidi-font-weight:
normal'>epoint2_copy</b>(p1,p2)<o:p></o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB style='font-family:
Courier'><span style='mso-tab-count:2'>††††††††† </span>epoint *p1,*p2;<o:p></o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB style='font-family:
Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Module:<span
style='mso-tab-count:1'>††††††††† </span>mrec2m.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Copies one point to another on a GF(2<i style='mso-bidi-font-style:
normal'><sup>m</sup></i>) elliptic curve.</span></p><p class=MsoIndexHeading><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Two
points <i style='mso-bidi-font-style:normal'>p1</i> and <i style='mso-bidi-font-style:
normal'>p2</i>. On exit <i style='mso-bidi-font-style:normal'>p2=p1</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l4 level3 lfo5;tab-stops:
0cm'><&#33;[if &#33;supportLists]><span lang=X-NONE style='mso-ansi-language:X-NONE;
mso-fareast-language:X-NONE;mso-bidi-language:X-NONE'><span style='mso-list:
Ignore'>9.3.22<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><&#33;[endif]><span
lang=EN-GB>epoint_free *</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>void <b style='mso-bidi-font-weight:
normal'>epoint_free</b>(p)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>epoint *p;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Module:<span
style='mso-tab-count:1'>††††††††† </span>mrcore.c</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Description:<span
style='mso-tab-count:1'>††† </span>Frees memory associated with a point on a
GF(<i style='mso-bidi-font-style:normal'>p</i>) elliptic curve.</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Parameters:<span
style='mso-tab-count:1'>†††† </span>A point <i style='mso-bidi-font-style:normal'>p</i>.
</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Return value:<span
style='mso-tab-count:1'>†† </span>None</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Restrictions:<span
style='mso-tab-count:1'>††† </span>None</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><span lang=EN-GB style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:
"Times New Roman";mso-fareast-font-family:"Times New Roman";mso-ansi-language:
EN-GB;mso-fareast-language:AR-SA;mso-bidi-language:AR-SA'><br clear=all
style='page-break-before:always'></span><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l4 level3 lfo5;tab-stops:
0cm'><&#33;[if &#33;supportLists]><span lang=X-NONE style='mso-ansi-language:X-NONE;
mso-fareast-language:X-NONE;mso-bidi-language:X-NONE'><span style='mso-list:
Ignore'>9.3.23<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><&#33;[endif]><span
lang=EN-GB>epoint_get</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>int <b style='mso-bidi-font-weight:normal'>epoint_get</b>(p,x,y)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>epoint *p;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big x,y;<o:p></o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB style='font-family:
Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Module:<span
style='mso-tab-count:1'>††††††††† </span>mrcurve.c</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Normalises
a point and extracts its <i style='mso-bidi-font-style:normal'>(x,y)</i> co-ordinates
on the active GF(<i style='mso-bidi-font-style:normal'>p</i>) elliptic curve. </span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A
point <i style='mso-bidi-font-style:normal'>p</i>, and two big integers <i
style='mso-bidi-font-style:normal'>x</i> and <i style='mso-bidi-font-style:
normal'>y</i>. If <i style='mso-bidi-font-style:normal'>x </i>and<i
style='mso-bidi-font-style:normal'> y</i> are not distinct variables on entry
then only the value of <i style='mso-bidi-font-style:normal'>x</i> is returned.</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB>Return value:<span style='mso-tab-count:1'>†† </span>The
least significant bit of <i style='mso-bidi-font-style:normal'>y</i>. Note that
it is possible to reconstruct a point from its <i style='mso-bidi-font-style:
normal'>x</i> co-ordinate and just the least significant bit of <i
style='mso-bidi-font-style:normal'>y</i>. Often such a ìcompressedî description
of a point is useful. </span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Restrictions:<span
style='mso-tab-count:1'>††† </span>The point <i style='mso-bidi-font-style:
normal'>p</i> must be on the active curve.</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Example:<span
style='mso-tab-count:1'>†††††††† </span></span><span lang=EN-GB
style='font-family:Courier'>i=epoint_get(p,x,x); <o:p></o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB style='font-family:
Courier'><span style='mso-tab-count:3'>†††††††††††††† </span>/* extract x co-ordinate
and lsb of y */<o:p></o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><span lang=EN-GB style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:
"Times New Roman";mso-fareast-font-family:"Times New Roman";mso-ansi-language:
EN-GB;mso-fareast-language:AR-SA;mso-bidi-language:AR-SA'><br clear=all
style='page-break-before:always'></span><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l4 level3 lfo5;tab-stops:
0cm'><&#33;[if &#33;supportLists]><span lang=X-NONE style='mso-ansi-language:X-NONE;
mso-fareast-language:X-NONE;mso-bidi-language:X-NONE'><span style='mso-list:
Ignore'>9.3.24<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><&#33;[endif]><span
lang=EN-GB>epoint_getxyz</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>†† </span>void <b
style='mso-bidi-font-weight:normal'>epoint_getxyz</b>(p,x,y,z)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>epoint *p;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big x,y,z;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrcurve.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Extracts
the raw (<i style='mso-bidi-font-style:normal'>x,y,z</i>) co-ordinates of a
point on the active GF(<i style='mso-bidi-font-style:normal'>p</i>) elliptic
curve. </span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A
point <i style='mso-bidi-font-style:normal'>p</i>, and three big integers <i
style='mso-bidi-font-style:normal'>x, y</i> and <i style='mso-bidi-font-style:
normal'>z</i>. If any of these is NULL that coordinate is not returned.</span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB>Return value:<span style='mso-tab-count:1'>†† </span>None</span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Restrictions: <span
style='mso-tab-count:1'>†† </span>The point <i style='mso-bidi-font-style:normal'>p</i>
must be on the active curve.</span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l4 level3 lfo5;tab-stops:
0cm'><&#33;[if &#33;supportLists]><span lang=X-NONE style='mso-ansi-language:X-NONE;
mso-fareast-language:X-NONE;mso-bidi-language:X-NONE'><span style='mso-list:
Ignore'>9.3.25<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><&#33;[endif]><span
lang=EN-GB>epoint2_get</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>int <b style='mso-bidi-font-weight:normal'>epoint2_get</b>(p,x,y)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>epoint *p;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big x,y;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Module:<span
style='mso-tab-count:1'>††††††††† </span>mrec2m.c</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Normalises
a point and extracts its <i style='mso-bidi-font-style:normal'>(x,y)</i>
co-ordinates on the active GF(2<i style='mso-bidi-font-style:normal'><sup>m</sup></i>)
elliptic curve. </span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A
point <i style='mso-bidi-font-style:normal'>p</i>, and two big integers <i
style='mso-bidi-font-style:normal'>x</i> and <i style='mso-bidi-font-style:
normal'>y</i>. If <i style='mso-bidi-font-style:normal'>x </i>and<i
style='mso-bidi-font-style:normal'> y</i> are not distinct variables on entry
then only the value of <i style='mso-bidi-font-style:normal'>x</i> is returned.</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB>Return value:<span style='mso-tab-count:1'>†† </span>The
least significant bit of <i style='mso-bidi-font-style:normal'>y/x</i>. Note
that it is possible to reconstruct a point from its <i style='mso-bidi-font-style:
normal'>x</i> co-ordinate and just the least significant bit of <i
style='mso-bidi-font-style:normal'>y/x</i>. Often such a ìcompressedî
description of a point is useful. </span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Restrictions:<span
style='mso-tab-count:1'>††† </span>The point <i style='mso-bidi-font-style:
normal'>p</i> must be on the active curve.</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Example:<span
style='mso-tab-count:1'>†††††††† </span></span><span lang=EN-GB
style='font-family:Courier'>i=epoint_get(p,x,x); <o:p></o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB style='font-family:
Courier'><span style='mso-tab-count:3'>†††††††††††††† </span>/* extract x
co-ordinate and lsb of y/x */<br clear=all style='page-break-before:always'></span><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l4 level3 lfo5;tab-stops:
0cm'><&#33;[if &#33;supportLists]><span lang=X-NONE style='mso-ansi-language:X-NONE;
mso-fareast-language:X-NONE;mso-bidi-language:X-NONE'><span style='mso-list:
Ignore'>9.3.26<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><&#33;[endif]><span
lang=EN-GB>epoint2_getxyz</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>†† </span>void <b
style='mso-bidi-font-weight:normal'>epoint2_getxyz</b>(p,x,y,z)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>epoint *p;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big x,y,z;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrcurve.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Extracts
the raw (<i style='mso-bidi-font-style:normal'>x,y,z</i>) co-ordinates of a point
on the active GF(2<i style='mso-bidi-font-style:normal'><sup>m</sup></i>)
elliptic curve. </span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A
point <i style='mso-bidi-font-style:normal'>p</i>, and three big integers <i
style='mso-bidi-font-style:normal'>x, y</i> and <i style='mso-bidi-font-style:
normal'>z</i>. If any of these is NULL that coordinate is not returned.</span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB>Return value:<span style='mso-tab-count:1'>†† </span>None</span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Restrictions: <span
style='mso-tab-count:1'>†† </span>The point <i style='mso-bidi-font-style:normal'>p</i>
must be on the active curve.</span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l4 level3 lfo5;tab-stops:
0cm'><&#33;[if &#33;supportLists]><span lang=X-NONE style='mso-ansi-language:X-NONE;
mso-fareast-language:X-NONE;mso-bidi-language:X-NONE'><span style='mso-list:
Ignore'>9.3.27<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><&#33;[endif]><span
lang=EN-GB>epoint_init</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>epoint* <b style='mso-bidi-font-weight:
normal'>epoint_init</b>()<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span><o:p></o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Module:<span
style='mso-tab-count:1'>††††††††† </span>mrcore.c</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Assigns
memory to a point on a GF(<i style='mso-bidi-font-style:normal'>p</i>) elliptic
curve, and initialises it to the &quot;point at infinity&quot;.</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>None.
</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Return value:<span
style='mso-tab-count:1'>†† </span>A point <i style='mso-bidi-font-style:normal'>p</i>
(in fact a pointer to a structure allocated from the heap).</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:72.0pt;text-indent:-72.0pt;tab-stops:
36.0pt'><span lang=EN-GB>Restrictions:<span style='mso-tab-count:1'>††† </span>It
is the C programmers responsibility to ensure that all elliptic curve points
initialised by a call to this function, are ultimately freed by a call to <b
style='mso-bidi-font-weight:normal'>epoint_free</b>. If not a memory leak will
result.</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><span lang=EN-GB style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:
"Times New Roman";mso-fareast-font-family:"Times New Roman";mso-ansi-language:
EN-GB;mso-fareast-language:AR-SA;mso-bidi-language:AR-SA'><br clear=all
style='page-break-before:always'></span><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l4 level3 lfo5;tab-stops:
0cm'><&#33;[if &#33;supportLists]><span lang=X-NONE style='mso-ansi-language:X-NONE;
mso-fareast-language:X-NONE;mso-bidi-language:X-NONE'><span style='mso-list:
Ignore'>9.3.28<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><&#33;[endif]><span
lang=EN-GB>epoint_init_mem</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>epoint*
<b style='mso-bidi-font-weight:normal'>epoint_init_mem</b>(mem,index)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style='mso-tab-count:2'>††††††††† </span>char
*mem;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style='mso-tab-count:2'>††††††††† </span>int
index;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><o:p>&nbsp;</o:p></span></p><p class=MsoIndexHeading><span lang=EN-GB>Module:<span style='mso-tab-count:
1'>††††††††† </span>mrcore.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Initialises
memory for an elliptic curve point from a pre-allocated byte array <i
style='mso-bidi-font-style:normal'>mem</i>. This array may be created from the
heap by a call to <b style='mso-bidi-font-weight:normal'>ecp_memalloc</b>, or
in some other way. This is quicker than multiple calls to <b style='mso-bidi-font-weight:
normal'>epoint_init<o:p></o:p></b></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A pointer to
the pre-allocated array <i style='mso-bidi-font-style:normal'>mem</i>, and an
index into that array. Each index should be unique.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Return value:<span style='mso-tab-count:1'>†† </span>An initialised
elliptic curve point.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Restrictions:<span style='mso-tab-count:1'>††† </span>Sufficient memory
must have been allocated and pointed to by <i style='mso-bidi-font-style:normal'>mem</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l4 level3 lfo5;tab-stops:
0cm'><&#33;[if &#33;supportLists]><span lang=X-NONE style='mso-ansi-language:X-NONE;
mso-fareast-language:X-NONE;mso-bidi-language:X-NONE'><span style='mso-list:
Ignore'>9.3.29<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><&#33;[endif]><span
lang=EN-GB>epoint_norm</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>BOOL
<b style='mso-bidi-font-weight:normal'>epoint_norm</b>(p)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style='mso-tab-count:2'>††††††††† </span>epoint
*p;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrcurve.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Normalises a
point on the current active GF(<i style='mso-bidi-font-style:normal'>p</i>)
elliptic curve. This sets the <i style='mso-bidi-font-style:normal'>z</i>
coordinate to 1. Point addition is quicker when adding a normalised point. This
function does nothing if affine coordinates are being used (in which case there
is no <i style='mso-bidi-font-style:normal'>z</i> co-ordinate)</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A point on the
current active elliptic curve.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>TRUE if successful.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><span lang=EN-GB style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:
"Times New Roman";mso-fareast-font-family:"Times New Roman";mso-ansi-language:
EN-GB;mso-fareast-language:AR-SA;mso-bidi-language:AR-SA'><br clear=all
style='page-break-before:always'></span><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l4 level3 lfo5;tab-stops:
0cm'><&#33;[if &#33;supportLists]><span lang=X-NONE style='mso-ansi-language:X-NONE;
mso-fareast-language:X-NONE;mso-bidi-language:X-NONE'><span style='mso-list:
Ignore'>9.3.30<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><&#33;[endif]><span
lang=EN-GB>epoint2_norm</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>BOOL
<b style='mso-bidi-font-weight:normal'>epoint2_norm</b>(p)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style='mso-tab-count:2'>††††††††† </span>epoint
*p;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrec2m.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Normalises a
point on the current active GF(2<i style='mso-bidi-font-style:normal'><sup>m</sup></i>)
elliptic curve. This sets the <i style='mso-bidi-font-style:normal'>z</i>
coordinate to 1. Point addition is quicker when adding a normalised point. This
function does nothing if affine coordinates are being used (in which case there
is no <i style='mso-bidi-font-style:normal'>z</i> co-ordinate)</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A point on the
current active elliptic curve.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>TRUE if successful.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l4 level3 lfo5;tab-stops:
0cm'><&#33;[if &#33;supportLists]><span lang=X-NONE style='mso-ansi-language:X-NONE;
mso-fareast-language:X-NONE;mso-bidi-language:X-NONE'><span style='mso-list:
Ignore'>9.3.31<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><&#33;[endif]><span
lang=EN-GB>epoint_set</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>BOOL <b style='mso-bidi-font-weight:
normal'>epoint_set</b>(x,y,lsb,p)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big x,y;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style="mso-spacerun:yes">††† </span><span style='mso-tab-count:2'>††††† </span>int
lsb;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>epoint *p;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Module:<span
style='mso-tab-count:1'>††††††††† </span>mrcurve.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Sets a point on the current active GF(<i style='mso-bidi-font-style:
normal'>p</i>) elliptic curve (if possible).</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>The integer
co-ordinates <i style='mso-bidi-font-style:normal'>x</i> and <i
style='mso-bidi-font-style:normal'>y</i> of the point <i style='mso-bidi-font-style:
normal'>p</i>. If<span style="mso-spacerun:yes">† </span><i style='mso-bidi-font-style:
normal'>x</i> and <i style='mso-bidi-font-style:normal'>y</i> are not distinct
variables then <i style='mso-bidi-font-style:normal'>x</i> only is passed to
the function, and <i style='mso-bidi-font-style:normal'>lsb</i> is taken as the
least significant bit of <i style='mso-bidi-font-style:normal'>y.</i> In this
case the full value of <i style='mso-bidi-font-style:normal'>y</i> is
reconstructed internally. This is known as ìpoint decompressionî (and is a bit
time-consuming, requiring the extraction of a modular square root). On exit <i
style='mso-bidi-font-style:normal'>p=(x,y)</i>.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Return value:<span style='mso-tab-count:1'>†† </span>TRUE if the
point exists on the current active point, otherwise FALSE.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Example:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>p=epoint_init();<o:p></o:p></span></p><p class=MsoNormal style='margin-left:36.0pt;text-indent:36.0pt'><span
lang=EN-GB style='font-family:Courier'>epoint_set(x,x,1,p);<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:3'>†††††††††††††† </span>/* decompress p */<br clear=all
style='page-break-before:always'></span><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l4 level3 lfo5;tab-stops:
0cm'><&#33;[if &#33;supportLists]><span lang=X-NONE style='mso-ansi-language:X-NONE;
mso-fareast-language:X-NONE;mso-bidi-language:X-NONE'><span style='mso-list:
Ignore'>9.3.32<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><&#33;[endif]><span
lang=EN-GB>epoint2_set</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>BOOL <b style='mso-bidi-font-weight:
normal'>epoint2_set</b>(x,y,lsb,p)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big x,y;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style="mso-spacerun:yes">††† </span><span style='mso-tab-count:2'>††††† </span>int
lsb;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>epoint *p;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Module:<span
style='mso-tab-count:1'>††††††††† </span>mrec2m.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Sets a point on the current active GF(2<i style='mso-bidi-font-style:
normal'><sup>m</sup></i>) elliptic curve (if possible).</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>The integer
co-ordinates <i style='mso-bidi-font-style:normal'>x</i> and <i
style='mso-bidi-font-style:normal'>y</i> of the point <i style='mso-bidi-font-style:
normal'>p</i>. If<span style="mso-spacerun:yes">† </span><i style='mso-bidi-font-style:
normal'>x</i> and <i style='mso-bidi-font-style:normal'>y</i> are not distinct
variables then <i style='mso-bidi-font-style:normal'>x</i> only is passed to
the function, and <i style='mso-bidi-font-style:normal'>lsb</i> is taken as the
least significant bit of <i style='mso-bidi-font-style:normal'>y/x.</i> In this
case the full value of <i style='mso-bidi-font-style:normal'>y</i> is
reconstructed internally. This is known as ìpoint decompressionî (and is a bit
time-consuming, requiring the extraction of a field square root). On exit <i
style='mso-bidi-font-style:normal'>p=(x,y)</i>.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Return value:<span style='mso-tab-count:1'>†† </span>TRUE if the
point exists on the current active point, otherwise FALSE.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Example:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>p=epoint_init();<o:p></o:p></span></p><p class=MsoNormal style='margin-left:36.0pt;text-indent:36.0pt'><span
lang=EN-GB style='font-family:Courier'>epoint2_set(x,x,1,p);<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:3'>†††††††††††††† </span>/* decompress p */<o:p></o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB style='font-family:
Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB style='font-family:
Courier'><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l4 level3 lfo5;tab-stops:
0cm'><&#33;[if &#33;supportLists]><span lang=X-NONE style='mso-ansi-language:X-NONE;
mso-fareast-language:X-NONE;mso-bidi-language:X-NONE'><span style='mso-list:
Ignore'>9.3.33<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><&#33;[endif]><span
lang=EN-GB>epoint_x</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>BOOL <b style='mso-bidi-font-weight:
normal'>epoint_x</b>(x)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big x;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style="mso-spacerun:yes">††† </span><span style='mso-tab-count:1'></span><o:p></o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Module:<span
style='mso-tab-count:1'>††††††††† </span>mrcurve.c</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='margin-left:70.9pt;text-indent:-70.9pt;tab-stops:
36.0pt'><span lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Tests
to see if the parameter <i style='mso-bidi-font-style:normal'>x</i> is a valid
co-ordinate of a point on the curve. It is faster to test an <i
style='mso-bidi-font-style:normal'>x</i> co-ordinate first in this way, rather
than trying to directly set it on the curve by calling <b style='mso-bidi-font-weight:
normal'>epoint_set</b>, as it avoids an expensive modular square root.</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Parameters:<span
style='mso-tab-count:1'>†††† </span>The integer coordinate <i style='mso-bidi-font-style:
normal'>x</i>.</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Return value: <span
style='mso-tab-count:1'>† </span>TRUE if <i style='mso-bidi-font-style:normal'>x</i>
is the coordinate of a curve point, otherwise FALSE</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Restrictions: <span
style='mso-tab-count:1'>†† </span>None</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l4 level3 lfo5;tab-stops:
0cm'><&#33;[if &#33;supportLists]><span lang=X-NONE style='mso-ansi-language:X-NONE;
mso-fareast-language:X-NONE;mso-bidi-language:X-NONE'><span style='mso-list:
Ignore'>9.3.34<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><&#33;[endif]><span
lang=EN-GB>mul_brick</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>int
<b style='mso-bidi-font-weight:normal'>mul_brick</b>(binst,e,x,y)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style='mso-tab-count:2'>††††††††† </span></span><span
lang=DE style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman";
mso-ansi-language:DE'>ebrick *binst;<o:p></o:p></span></p><p class=MsoNormal><span lang=DE style='font-family:"Courier New";mso-bidi-font-family:
"Times New Roman";mso-ansi-language:DE'><span style='mso-tab-count:2'>††††††††† </span>big
e,x,y;<o:p></o:p></span></p><p class=MsoNormal><span lang=DE style='font-family:"Courier New";mso-bidi-font-family:
"Times New Roman";mso-ansi-language:DE'><o:p>&nbsp;</o:p></span></p><p class=MsoIndexHeading><span lang=EN-GB>Module:<span style='mso-tab-count:
1'>††††††††† </span>mrebrick.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Carries out a
GF(<i style='mso-bidi-font-style:normal'>p</i>) elliptic curve multiplication
using the precomputed values stored in the <i style='mso-bidi-font-style:normal'>ebrick</i>
structure.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A pointer to
the current instance, a big exponent <i style='mso-bidi-font-style:normal'>e</i>
and a big number <i style='mso-bidi-font-style:normal'>w</i>. On exit (<i
style='mso-bidi-font-style:normal'>x,y</i>) = <i style='mso-bidi-font-style:
normal'>e.G</i><i style='mso-bidi-font-style:normal'>mod n</i>, where <i
style='mso-bidi-font-style:normal'>G</i> and <i style='mso-bidi-font-style:
normal'>n</i> are specified in the initial call to <b style='mso-bidi-font-weight:
normal'>ebrick_init. </b>If <i style='mso-bidi-font-style:normal'>x</i> and <i
style='mso-bidi-font-style:normal'>y</i> are not distinct variables, only <i
style='mso-bidi-font-style:normal'>x</i> is returned.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB><o:p>&nbsp;</o:p></span></b></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Return value:<span style='mso-tab-count:1'>†† </span>The least
significant bit of <i style='mso-bidi-font-style:normal'>y</i>.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Restrictions:<span style='mso-tab-count:1'>††† </span>Must be
preceded by a call to <b style='mso-bidi-font-weight:normal'>ebrick_init</b>. <br
clear=all style='page-break-before:always'></span><span lang=EN-GB style='font-family:Courier'><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l4 level3 lfo5;tab-stops:
0cm'><&#33;[if &#33;supportLists]><span lang=X-NONE style='mso-ansi-language:X-NONE;
mso-fareast-language:X-NONE;mso-bidi-language:X-NONE'><span style='mso-list:
Ignore'>9.3.35<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><&#33;[endif]><span
lang=EN-GB>mul2_brick</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>int
<b style='mso-bidi-font-weight:normal'>mul2_brick</b>(binst,e,x,y)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style='mso-tab-count:2'>††††††††† </span></span><span
lang=DE style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman";
mso-ansi-language:DE'>ebrick2 *binst;<o:p></o:p></span></p><p class=MsoNormal><span lang=DE style='font-family:"Courier New";mso-bidi-font-family:
"Times New Roman";mso-ansi-language:DE'><span style='mso-tab-count:2'>††††††††† </span>big
e,x,y;<o:p></o:p></span></p><p class=MsoNormal><span lang=DE style='font-family:"Courier New";mso-bidi-font-family:
"Times New Roman";mso-ansi-language:DE'><o:p>&nbsp;</o:p></span></p><p class=MsoIndexHeading><span lang=EN-GB>Module:<span style='mso-tab-count:
1'>††††††††† </span>mrec2m.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Carries out a
GF(2<i style='mso-bidi-font-style:normal'><sup>m</sup></i>)<span
style="mso-spacerun:yes">† </span>elliptic curve multiplication using the
precomputed values stored in the <i style='mso-bidi-font-style:normal'>ebrick2</i>
structure.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A pointer to
the current instance, a big exponent <i style='mso-bidi-font-style:normal'>e</i>
and a big number <i style='mso-bidi-font-style:normal'>w</i>. On exit (<i
style='mso-bidi-font-style:normal'>x,y</i>) = <i style='mso-bidi-font-style:
normal'>e.G</i>, where <i style='mso-bidi-font-style:normal'>G</i> is specified
in the initial call to <b style='mso-bidi-font-weight:normal'>ebrick2_init. </b>If
<i style='mso-bidi-font-style:normal'>x</i> and <i style='mso-bidi-font-style:
normal'>y</i> are not distinct variables, only <i style='mso-bidi-font-style:
normal'>x</i> is returned.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB><o:p>&nbsp;</o:p></span></b></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Return value:<span style='mso-tab-count:1'>†† </span>The least
significant bit of <i style='mso-bidi-font-style:normal'>y/x</i>.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Restrictions:<span style='mso-tab-count:1'>††† </span>Must be
preceded by a call to <b style='mso-bidi-font-weight:normal'>ebrick2_init</b>. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l4 level3 lfo5;tab-stops:
0cm'><&#33;[if &#33;supportLists]><span lang=X-NONE style='mso-ansi-language:X-NONE;
mso-fareast-language:X-NONE;mso-bidi-language:X-NONE'><span style='mso-list:
Ignore'>9.3.36<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><&#33;[endif]><span
lang=EN-GB>point_at_infinity *</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>BOOL
<b style='mso-bidi-font-weight:normal'>point_at_infinity</b>(p)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style='mso-tab-count:2'>††††††††† </span>epoint
*p;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrcore.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description: <span style='mso-tab-count:
1'>†† </span>Tests if an elliptic curve point is the &quot;point at
infinity&quot;.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>An
elliptic curve point <i style='mso-bidi-font-style:normal'>p</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>TRUE if <i style='mso-bidi-font-style:normal'>p</i> is the
point-at-infinity, otherwise FALSE.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>The point must be initialised.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><span lang=EN-GB style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:
"Times New Roman";mso-fareast-font-family:"Times New Roman";mso-ansi-language:
EN-GB;mso-fareast-language:AR-SA;mso-bidi-language:AR-SA'><br clear=all
style='page-break-before:always'></span><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h2 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level2 lfo1;tab-stops:
0cm'><a name="_toc4567"></a><&#33;[if &#33;supportLists]><span lang=EN-GB
style='mso-fareast-font-family:Arial;mso-bidi-font-family:Arial'><span
style='mso-list:Ignore'>9.4<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>Encryption Routines</span></h2><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc4569"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.4.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>aes_decrypt *</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>mr_unsign32 aes_<b style='mso-bidi-font-weight:
normal'>decrypt</b>(a,buff)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>aes *a;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>char *buff;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoIndexHeading><span lang=EN-GB>Module:<span style='mso-tab-count:
1'>††††††††† </span>mraes.c</span></p><p class=MsoIndexHeading><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Decrypts a 16 or <i style='mso-bidi-font-style:normal'>n</i> byte
input buffer in situ.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Pointer to an
initialised instance of an <i style='mso-bidi-font-style:normal'>aes</i>
structure defined in <i style='mso-bidi-font-style:normal'>miracl.h</i>, and to
the buffer of bytes to be decrypted. If the mode of operation is as a block
cipher (<b style='mso-bidi-font-weight:normal'>MR_ECB</b> or <b
style='mso-bidi-font-weight:normal'>MR_CBC</b>) then 16 bytes will be
decrypted. If the mode of operation is as a stream cipher (<b style='mso-bidi-font-weight:
normal'>MR_CFB</b><i style='mso-bidi-font-style:normal'>n</i>, <b
style='mso-bidi-font-weight:normal'>MR_OFB</b><i style='mso-bidi-font-style:
normal'>n</i> or <b style='mso-bidi-font-weight:normal'>MR_PCFB</b><i
style='mso-bidi-font-style:normal'>n</i>) then <i style='mso-bidi-font-style:
normal'>n</i> bytes will be decrypted.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Return value:<span style='mso-tab-count:1'>†† </span>In <b
style='mso-bidi-font-weight:normal'>MR_CFB</b><i style='mso-bidi-font-style:
normal'>n</i> and <b style='mso-bidi-font-weight:normal'>MR_PCFB</b><i
style='mso-bidi-font-style:normal'>n</i> modes the <i style='mso-bidi-font-style:
normal'>n</i> byte(s) that were shifted off the end of the input register as
result of decrypting the <i style='mso-bidi-font-style:normal'>n</i> input
byte(s), otherwise 0.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc4583"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.4.2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>aes_encrypt *</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>mr_unsign32 <b style='mso-bidi-font-weight:
normal'>aes_encrypt</b>(a,buff)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>aes *a;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>char *buff;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoIndexHeading><span lang=EN-GB>Module:<span style='mso-tab-count:
1'>††††††††† </span>mraes.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Encrypts a 16 or <i style='mso-bidi-font-style:normal'>n</i> byte
input buffer in situ.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Pointer to an
initialised instance of an <i style='mso-bidi-font-style:normal'>aes</i>
structure defined in <i style='mso-bidi-font-style:normal'>miracl.h</i>, and to
the buffer of bytes to be encrypted. If the mode of operation is as a block
cipher (<b style='mso-bidi-font-weight:normal'>MR_ECB</b> or <b
style='mso-bidi-font-weight:normal'>MR_CBC</b>) then 16 bytes will be
encrypted. If the mode of operation is as a stream cipher (<b style='mso-bidi-font-weight:
normal'>MR_CFB</b><i style='mso-bidi-font-style:normal'>n</i>, <b
style='mso-bidi-font-weight:normal'>MR_OFB</b><i style='mso-bidi-font-style:
normal'>n</i> or <b style='mso-bidi-font-weight:normal'>MR_PCFB</b><i
style='mso-bidi-font-style:normal'>n</i>) then a <i style='mso-bidi-font-style:
normal'>n</i> bytes will be encrypted.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Return value:<span style='mso-tab-count:1'>†† </span>In <b
style='mso-bidi-font-weight:normal'>MR_CFB</b><i style='mso-bidi-font-style:
normal'>n</i> and <b style='mso-bidi-font-weight:normal'>MR_PCFB</b><i
style='mso-bidi-font-style:normal'>n</i> modes the <i style='mso-bidi-font-style:
normal'>n </i>byte(s) that were shifted off the end of the input register as
result of encrypting the <i style='mso-bidi-font-style:normal'>n </i>input
byte(s), otherwise 0.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><span lang=EN-GB style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:
"Times New Roman";mso-fareast-font-family:"Times New Roman";mso-ansi-language:
EN-GB;mso-fareast-language:AR-SA;mso-bidi-language:AR-SA'><br clear=all
style='page-break-before:always'></span><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc4598"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.4.3<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>aes_end *</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>void <b style='mso-bidi-font-weight:
normal'>aes_end</b>(a)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>aes *a;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoIndexHeading><span lang=EN-GB>Module:<span style='mso-tab-count:
1'>††††††††† </span>mraes.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoBodyTextIndent><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Ends an AES encryption session, and de-allocates the memory
associated with it. The internal session key data is destroyed.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Pointer to an
initialised instance of an <i style='mso-bidi-font-style:normal'>aes</i>
structure defined in <i style='mso-bidi-font-style:normal'>miracl.h<o:p></o:p></i></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Return value:<span style='mso-tab-count:1'>†† </span>None</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc4612"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.4.4<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>aes_getreg *</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>void
<b style='mso-bidi-font-weight:normal'>aes_getreg</b>(a,ir)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style='mso-tab-count:2'>††††††††† </span></span><span
lang=PT-BR style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman";
mso-ansi-language:PT-BR'>aes *a;<o:p></o:p></span></p><p class=MsoNormal><span lang=PT-BR style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman";mso-ansi-language:PT-BR'><span
style='mso-tab-count:2'>††††††††† </span>char *ir;<o:p></o:p></span></p><p class=MsoNormal><span lang=PT-BR style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman";mso-ansi-language:PT-BR'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=PT-BR style='mso-ansi-language:PT-BR'>Module:<span
style='mso-tab-count:1'>††††††††† </span>mraes.c<o:p></o:p></span></p><p class=MsoNormal><span lang=PT-BR style='mso-ansi-language:PT-BR'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Reads the
current contents of the input chaining register associated with this instance
of the AES. This is the register initialised by the IV in the calls to <b
style='mso-bidi-font-weight:normal'>aes_init</b><i style='mso-bidi-font-style:
normal'></i><span style="mso-spacerun:yes">†</span>and<span
style="mso-spacerun:yes">† </span><b style='mso-bidi-font-weight:normal'>aes_reset</b>.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Pointer to an
instance of the <i style='mso-bidi-font-style:normal'>aes</i> structure,
defined in <i style='mso-bidi-font-style:normal'>miracl.h</i>, and a character
array to hold the extracted 16-byte data.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Return value:<span style='mso-tab-count:1'>†† </span>None</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><span style='mso-tab-count:1'>††††††††††††††††††††††† </span><br
clear=all style='page-break-before:always'></span><b style='mso-bidi-font-weight:normal'><span lang=EN-GB
style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'><o:p>&nbsp;</o:p></span></b></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc4627"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.4.5<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>aes_init *</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>BOOL <b style='mso-bidi-font-weight:
normal'>aes_init</b>(a,mode,nk,key,iv)<o:p></o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB style='font-family:
Courier'><span style='mso-tab-count:2'>††††††††† </span></span><span lang=FR
style='font-family:Courier;mso-ansi-language:FR'>aes *a;<o:p></o:p></span></p><p class=MsoNormal><span lang=FR style='font-family:Courier;mso-ansi-language:
FR'><span style='mso-tab-count:2'>††††††††† </span>int mode,nk;<o:p></o:p></span></p><p class=MsoNormal><span lang=FR style='font-family:Courier;mso-ansi-language:
FR'><span style='mso-tab-count:2'>††††††††† </span></span><span lang=EN-GB
style='font-family:Courier'>char key<b style='mso-bidi-font-weight:normal'>,</b>iv;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoIndexHeading><span lang=EN-GB>Module:<span style='mso-tab-count:
1'>††††††††† </span>mraes.c</span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoBodyTextIndent><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Initialises an Encryption/Decryption session using the Advanced
Encryption Standard (AES). This is a block cipher system that encrypts data in
128-bit blocks using a key of 128, 192 or 256 bits. See [Stinson] for more
background on block ciphers.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Pointer to an
instance of the <i style='mso-bidi-font-style:normal'>aes</i> structure defined
in <i style='mso-bidi-font-style:normal'>miracl.h, </i>the <i style='mso-bidi-font-style:
normal'>mode</i> of operation to be used, an integer <i style='mso-bidi-font-style:
normal'>nk</i> which specifies the size of the Key in bytes, and pointers to
the key itself and the optional Initialisation Vector (IV). The mode can be one
of <b style='mso-bidi-font-weight:normal'>MR_ECB </b>(Electronic Code Book), <b
style='mso-bidi-font-weight:normal'>MR_CBC </b>(Cipher Block Chaining), <b
style='mso-bidi-font-weight:normal'>MR_CFB</b><i style='mso-bidi-font-style:
normal'>n</i><b style='mso-bidi-font-weight:normal'></b>(Cipher Feed-back
where <i style='mso-bidi-font-style:normal'>n</i> is 1, 2 or 4), <b
style='mso-bidi-font-weight:normal'>MR_PCFB</b><i style='mso-bidi-font-style:
normal'>n</i> (error Propagating Cipher Feed-back where <i style='mso-bidi-font-style:
normal'>n</i> is 1, 2 or 4) or <b style='mso-bidi-font-weight:normal'>MR_OFB</b><i
style='mso-bidi-font-style:normal'>n</i> (Output Feed-back where <i
style='mso-bidi-font-style:normal'>n</i> is 1, 2, 4, 8 or 16).<span
style="mso-spacerun:yes">† </span>The value of <i style='mso-bidi-font-style:
normal'>n</i> indicates the number of bytes to be processed in each
application. For more information on Modes of Operation, see [Stinson]. <b
style='mso-bidi-font-weight:normal'>MR_PCFB</b><i style='mso-bidi-font-style:
normal'>n</i> is an invention of our own [Scott93]. See below.</span></p><p class=MsoNormal style='margin-left:72.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt'><span lang=EN-GB>The value of <i
style='mso-bidi-font-style:normal'>nk</i> can be 16, 24 or 32. A 16 bytes
initialisation vector <i style='mso-bidi-font-style:normal'>iv</i> should be
specified for all modes other than MR_ECB, in which case it can be NULL. </span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Return value:<span style='mso-tab-count:1'>†† </span>TRUE if
initialisation succeeded, otherwise FALSE. </span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><&#33;--[if gte vml 1]><o:wrapblock><v:shape
id="_x0000_s2091" type="#_x0000_t202" style='position:absolute;left:0;
text-align:left;margin-left:154.7pt;margin-top:41.65pt;width:57.7pt;height:57.7pt;
z-index:251634688;mso-wrap-distance-left:9.05pt;mso-wrap-distance-right:9.05pt'
strokeweight=".5pt"><v:fill color2="black"/><v:textbox inset="7.45pt,3.85pt,7.45pt,3.85pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal align=center style='text-align:center'><span
lang=EN-GB style='font-size:14.0pt;mso-bidi-font-size:10.0pt'>AES<o:p></o:p></span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:shape id="_x0000_s2092" type="#_x0000_t202" style='position:absolute;
left:0;text-align:left;margin-left:154.7pt;margin-top:1pt;width:57.7pt;
height:21.7pt;z-index:251635712;mso-wrap-distance-left:9.05pt;
mso-wrap-distance-right:9.05pt' strokeweight=".5pt"><v:fill color2="black"/><v:textbox inset="7.45pt,3.85pt,7.45pt,3.85pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:shape id="_x0000_s2093" type="#_x0000_t202" style='position:absolute;
left:0;text-align:left;margin-left:154.7pt;margin-top:114.1pt;width:57.7pt;
height:21.7pt;z-index:251636736;mso-wrap-distance-left:9.05pt;
mso-wrap-distance-right:9.05pt' strokeweight=".5pt"><v:fill color2="black"/><v:textbox inset="7.45pt,3.85pt,7.45pt,3.85pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:line id="_x0000_s2094" style='position:absolute;left:0;
text-align:left;z-index:251637760' from="183.6pt,13.35pt" to="183.6pt,41.75pt"
strokeweight=".26mm"><v:stroke endarrow="block" joinstyle="miter"/></v:line><v:line id="_x0000_s2095" style='position:absolute;left:0;
text-align:left;z-index:251638784' from="183.6pt,99.35pt" to="183.6pt,114.2pt"
strokeweight=".26mm"><v:stroke endarrow="block" joinstyle="miter"/></v:line><v:line id="_x0000_s2096" style='position:absolute;left:0;
text-align:left;z-index:251639808' from="162pt,114.2pt" to="162pt,135.8pt"
strokeweight=".26mm"><v:stroke joinstyle="miter"/></v:line><v:line id="_x0000_s2097" style='position:absolute;left:0;
text-align:left;z-index:251640832' from="97.2pt,178.55pt" to="147.6pt,178.55pt"
strokeweight=".26mm"><v:stroke endarrow="block" joinstyle="miter"/></v:line><v:oval id="_x0000_s2098" style='position:absolute;left:0;
text-align:left;margin-left:147.6pt;margin-top:164.15pt;width:28.8pt;
height:28.8pt;z-index:251641856;v-text-anchor:middle' strokeweight=".26mm"><v:fill color2="black"/><v:stroke joinstyle="miter"/></v:oval><v:line id="_x0000_s2099" style='position:absolute;left:0;
text-align:left;z-index:251642880' from="147.6pt,178.55pt" to="176.4pt,178.55pt"
strokeweight=".26mm"><v:stroke joinstyle="miter"/></v:line><v:line id="_x0000_s2100" style='position:absolute;left:0;
text-align:left;z-index:251643904' from="162pt,164.15pt" to="162pt,192.95pt"
strokeweight=".26mm"><v:stroke joinstyle="miter"/></v:line><v:shape id="_x0000_s2101" type="#_x0000_t202" style='position:absolute;
left:0;text-align:left;margin-left:111.5pt;margin-top:149.65pt;width:28.9pt;
height:21.7pt;z-index:251644928;mso-wrap-distance-left:9.05pt;
mso-wrap-distance-right:9.05pt' strokecolor="white" strokeweight=".5pt"><v:fill color2="black"/><v:stroke color2="black"/><v:textbox inset="7.45pt,3.85pt,7.45pt,3.85pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal><span lang=EN-GB style='font-size:14.0pt;mso-bidi-font-size:
10.0pt'>P<o:p></o:p></span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:line id="_x0000_s2102" style='position:absolute;left:0;
text-align:left;z-index:251645952' from="159.75pt,135.8pt" to="159.75pt,164.15pt"
strokeweight=".26mm"><v:stroke endarrow="block" joinstyle="miter"/></v:line><v:shape id="_x0000_s2103" type="#_x0000_t202" style='position:absolute;
left:0;text-align:left;margin-left:118.7pt;margin-top:47.15pt;width:21.7pt;
height:52.2pt;z-index:251646976;mso-wrap-distance-left:9.05pt;
mso-wrap-distance-right:9.05pt' strokeweight=".5pt"><v:fill color2="black"/><v:textbox inset="7.45pt,3.85pt,7.45pt,3.85pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal><span lang=EN-GB>Key</span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:line id="_x0000_s2104" style='position:absolute;left:0;
text-align:left;z-index:251648000' from="140.4pt,68.85pt" to="154.8pt,68.85pt"
strokeweight=".26mm"><v:stroke endarrow="block" joinstyle="miter"/></v:line><v:line id="_x0000_s2105" style='position:absolute;left:0;
text-align:left;flip:y;z-index:251649024' from="248.4pt,146.4pt" to="248.4pt,179pt"
strokeweight=".26mm"><v:stroke endarrow="block" joinstyle="miter"/></v:line><v:oval id="_x0000_s2106" style='position:absolute;left:0;
text-align:left;margin-left:234pt;margin-top:117.55pt;width:28.8pt;height:28.8pt;
z-index:251650048;v-text-anchor:middle' strokeweight=".26mm"><v:fill color2="black"/><v:stroke joinstyle="miter"/></v:oval><v:line id="_x0000_s2107" style='position:absolute;left:0;
text-align:left;z-index:251651072' from="234pt,132pt" to="262.8pt,132pt"
strokeweight=".26mm"><v:stroke joinstyle="miter"/></v:line><v:line id="_x0000_s2108" style='position:absolute;left:0;
text-align:left;z-index:251652096' from="248.4pt,117.55pt" to="248.4pt,146.35pt"
strokeweight=".26mm"><v:stroke joinstyle="miter"/></v:line><v:line id="_x0000_s2109" style='position:absolute;left:0;
text-align:left;z-index:251653120' from="212.4pt,132pt" to="234pt,132pt"
strokeweight=".26mm"><v:stroke endarrow="block" joinstyle="miter"/></v:line><v:line id="_x0000_s2110" style='position:absolute;left:0;
text-align:left;flip:y;z-index:251654144' from="248.4pt,13.35pt" to="248.4pt,121.35pt"
strokeweight=".26mm"><v:stroke joinstyle="miter"/></v:line><v:line id="_x0000_s2111" style='position:absolute;left:0;
text-align:left;flip:x;z-index:251655168' from="212.4pt,13.35pt" to="248.4pt,13.35pt"
strokeweight=".26mm"><v:stroke endarrow="block" joinstyle="miter"/></v:line><v:line id="_x0000_s2112" style='position:absolute;left:0;
text-align:left;z-index:251656192' from="183.6pt,1.1pt" to="183.6pt,22.7pt"
strokeweight=".26mm"><v:stroke joinstyle="miter"/></v:line><v:line id="_x0000_s2113" style='position:absolute;left:0;
text-align:left;z-index:251657216' from="198pt,1.1pt" to="198pt,22.7pt"
strokeweight=".26mm"><v:stroke joinstyle="miter"/></v:line><v:line id="_x0000_s2114" style='position:absolute;left:0;
text-align:left;z-index:251658240' from="169.2pt,1.1pt" to="169.2pt,22.7pt"
strokeweight=".26mm"><v:stroke joinstyle="miter"/></v:line><v:line id="_x0000_s2115" style='position:absolute;left:0;
text-align:left;z-index:251659264' from="162pt,1.1pt" to="162pt,22.7pt"
strokeweight=".26mm"><v:stroke joinstyle="miter"/></v:line><v:line id="_x0000_s2116" style='position:absolute;left:0;
text-align:left;z-index:251660288' from="176.4pt,1.1pt" to="176.4pt,22.7pt"
strokeweight=".26mm"><v:stroke joinstyle="miter"/></v:line><v:line id="_x0000_s2117" style='position:absolute;left:0;
text-align:left;z-index:251661312' from="190.8pt,1.1pt" to="190.8pt,22.7pt"
strokeweight=".26mm"><v:stroke joinstyle="miter"/></v:line><v:line id="_x0000_s2118" style='position:absolute;left:0;
text-align:left;z-index:251662336' from="205.2pt,1.1pt" to="205.2pt,22.7pt"
strokeweight=".26mm"><v:stroke joinstyle="miter"/></v:line><v:line id="_x0000_s2119" style='position:absolute;left:0;
text-align:left;z-index:251663360' from="205.2pt,114.2pt" to="205.2pt,135.8pt"
strokeweight=".26mm"><v:stroke joinstyle="miter"/></v:line><v:line id="_x0000_s2120" style='position:absolute;left:0;
text-align:left;z-index:251664384' from="176.4pt,178.55pt" to="248.4pt,178.55pt"
strokeweight=".26mm"><v:stroke joinstyle="miter"/></v:line><v:line id="_x0000_s2121" style='position:absolute;left:0;
text-align:left;z-index:251665408' from="248.4pt,178.55pt" to="291.6pt,178.55pt"
strokeweight=".26mm"><v:stroke endarrow="block" joinstyle="miter"/></v:line><v:shape id="_x0000_s2122" type="#_x0000_t202" style='position:absolute;
left:0;text-align:left;margin-left:284.3pt;margin-top:142.45pt;width:28.9pt;
height:28.9pt;z-index:251666432;mso-wrap-distance-left:9.05pt;
mso-wrap-distance-right:9.05pt' strokecolor="white" strokeweight=".5pt"><v:fill color2="black"/><v:stroke color2="black"/><v:textbox inset="7.45pt,3.85pt,7.45pt,3.85pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal><span lang=EN-GB style='font-size:14.0pt;mso-bidi-font-size:
10.0pt'>C<o:p></o:p></span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><v:shape id="_x0000_s2123" type="#_x0000_t202" style='position:absolute;
left:0;text-align:left;margin-left:298.7pt;margin-top:41.65pt;width:115.3pt;
height:28.9pt;z-index:251667456;mso-wrap-distance-left:9.05pt;
mso-wrap-distance-right:9.05pt' strokecolor="white" strokeweight=".5pt"><v:fill color2="black"/><v:stroke color2="black"/><v:textbox inset="7.45pt,3.85pt,7.45pt,3.85pt"><&#33;[if &#33;mso]>
{|  cellpadding=0 cellspacing=0 width="100%" 
| <&#33;[endif]><div><p class=MsoNormal><span lang=EN-GB>MR_PCFB1 Mode</span></p></div><&#33;[if &#33;mso]>
|}<&#33;[endif]></v:textbox></v:shape><&#33;[endif]--><&#33;[if &#33;vml]><span style='mso-ignore:vglayout;position:
relative;z-index:251634688'><span style='left:0px;position:absolute;
left:90px;top:-3px;width:325px;height:203px'><img width=325 height=203
src="manual_files/image033.gif" v:shapes="_x0000_s2091 _x0000_s2092 _x0000_s2093 _x0000_s2094 _x0000_s2095 _x0000_s2096 _x0000_s2097 _x0000_s2098 _x0000_s2099 _x0000_s2100 _x0000_s2101 _x0000_s2102 _x0000_s2103 _x0000_s2104 _x0000_s2105 _x0000_s2106 _x0000_s2107 _x0000_s2108 _x0000_s2109 _x0000_s2110 _x0000_s2111 _x0000_s2112 _x0000_s2113 _x0000_s2114 _x0000_s2115 _x0000_s2116 _x0000_s2117 _x0000_s2118 _x0000_s2119 _x0000_s2120 _x0000_s2121 _x0000_s2122 _x0000_s2123"></span></span><&#33;[endif]><&#33;--[if gte vml 1]></o:wrapblock><&#33;[endif]--><span
style='font-family:Courier;mso-ansi-language:#0400'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><br clear=all
style='page-break-before:always'><o:p>&nbsp;</o:p></span></p><br style='mso-ignore:vglayout' clear=ALL><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc4647"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.4.6<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>aes_reset *</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>void <b style='mso-bidi-font-weight:
normal'>aes_reset</b>(a,mode,iv)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>aes *a;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>int mode;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>char *iv;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoIndexHeading><span lang=EN-GB>Module:<span style='mso-tab-count:
1'>††††††††† </span>mraes.c</span></p><p class=MsoIndex1><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Resets the AES structure </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Pointer to an
instance of the <i style='mso-bidi-font-style:normal'>aes</i> structure defined
in <i style='mso-bidi-font-style:normal'>miracl.h</i>, an indication of the new
<i style='mso-bidi-font-style:normal'>mode </i>of operation, and a pointer to a
(possibly new) initialisation vector <i style='mso-bidi-font-style:normal'>iv</i>.
See above for the modes allowed.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Return value: <span style='mso-tab-count:1'>† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc4662"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.4.7<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>shs_init *</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>void <b style='mso-bidi-font-weight:
normal'>shs_init</b>(psh)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>sha *psh;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrshs.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Initialises an
instance of the Secure Hash Algorithm SHA-1. Must be called before new use.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Pointer
to an instance of a structure defined in <i style='mso-bidi-font-style:normal'>miracl.h<o:p></o:p></i></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span><o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc4675"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.4.8<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>shs_hash *</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>void <b style='mso-bidi-font-weight:
normal'>shs_hash</b>(psh,hash)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>sha *psh;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>char hash[20];<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrshs.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Generates a twenty byte (160 bit) hash value into the provided
array.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Pointer
to the current instance, and pointer to array to be filled.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None<br clear=all style='page-break-before:always'><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc4689"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.4.9<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>shs_process *</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>void <b style='mso-bidi-font-weight:
normal'>shs_process</b>(psh,ch)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>sha *psh;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>int ch;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrshs.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Processes a
single byte. Typically called many times to provide input to the hashing
process. The hash value of all the processed bytes can be retrieved by a
subsequent call to <b style='mso-bidi-font-weight:normal'>shs_hash</b>.</span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Pointer to the
current instance, and character to be processed.</span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Return value:<span style='mso-tab-count:1'>† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc4703"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.4.10<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>shs256_init *</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>void <b style='mso-bidi-font-weight:
normal'>shs256_init</b>(psh)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>sha256 *psh;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrshs256.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Initialises an
instance of the Secure Hash Algorithm SHA-256. Must be called before new use.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Pointer
to an instance of a structure defined in <i style='mso-bidi-font-style:normal'>miracl.h<o:p></o:p></i></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span><o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc4716"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.4.11<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>shs256_hash *</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>void <b style='mso-bidi-font-weight:
normal'>shs256_hash</b>(psh,hash)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>sha256 *psh;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>char hash[32];<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrshs256.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Generates a 32 byte (256 bit) hash value into the provided array.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Pointer
to the current instance, and pointer to array to be filled.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc4730"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.4.12<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>shs256_process *</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>void <b style='mso-bidi-font-weight:
normal'>shs256_process</b>(psh,ch)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>sha256 *psh;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>int ch;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrshs256.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Processes a
single byte. Typically called many times to provide input to the hashing
process. The hash value of all the processed bytes can be retrieved by a
subsequent call to <b style='mso-bidi-font-weight:normal'>shs256_hash</b>.</span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Pointer to the
current instance, and character to be processed.</span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Return value:<span style='mso-tab-count:1'>† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc4744"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.4.13<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>shs384_init *</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>void <b style='mso-bidi-font-weight:
normal'>shs384_init</b>(psh)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>sha384 *psh;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrshs512.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Initialises an
instance of the Secure Hash Algorithm SHA-384. Must be called before new use.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Pointer
to an instance of a structure defined in <i style='mso-bidi-font-style:normal'>miracl.h<o:p></o:p></i></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span><o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Restrictions:<span style='mso-tab-count:1'>††† </span>The SHA-384
algorithm is only available if 64-bit data-type is defined.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc4759"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.4.14<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>shs384_hash *</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>void <b style='mso-bidi-font-weight:
normal'>shs384_hash</b>(psh,hash)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>sha384 *psh;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>char hash[48];<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrshs512.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Generates a 48 byte (384 bit) hash value into the provided array.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Pointer
to the current instance, and pointer to array to be filled.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc4773"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.4.15<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>shs384_process *</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>void <b style='mso-bidi-font-weight:
normal'>shs512_process</b>(psh,ch)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>sha384 *psh;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>int ch;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrshs512.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Processes a
single byte. Typically called many times to provide input to the hashing process.
The hash value of all the processed bytes can be retrieved by a subsequent call
to <b style='mso-bidi-font-weight:normal'>shs384_hash</b>.</span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Pointer to the
current instance, and character to be processed.</span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Return value:<span style='mso-tab-count:1'>† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc4787"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.4.16<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>shs512_init *</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>void <b style='mso-bidi-font-weight:
normal'>shs512_init</b>(psh)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>sha512 *psh;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrshs512.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Initialises an
instance of the Secure Hash Algorithm SHA-512. Must be called before new use.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Pointer
to an instance of a structure defined in <i style='mso-bidi-font-style:normal'>miracl.h<o:p></o:p></i></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span><o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Restrictions:<span style='mso-tab-count:1'>††† </span>The SHA-512
algorithm is only available if 64-bit data-type is defined.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc4802"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.4.17<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>shs512_hash *</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>void <b style='mso-bidi-font-weight:
normal'>shs512_hash</b>(psh,hash)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>sha512 *psh;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>char hash[64];<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrshs512.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Generates a 64 byte (512 bit) hash value into the provided array.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Pointer
to the current instance, and pointer to array to be filled.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None<br clear=all style='page-break-before:always'><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc4816"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.4.18<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>shs512_process *</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>void <b style='mso-bidi-font-weight:
normal'>shs512_process</b>(psh,ch)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>sha512 *psh;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>int ch;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrshs512.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Processes a
single byte. Typically called many times to provide input to the hashing
process. The hash value of all the processed bytes can be retrieved by a
subsequent call to <b style='mso-bidi-font-weight:normal'>shs512_hash</b>.</span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Pointer to the
current instance, and character to be processed.</span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Return value:<span style='mso-tab-count:1'>† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc4832"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.4.19<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>strong_bigdig</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>void <b
style='mso-bidi-font-weight:normal'>strong_bigdig</b>(rng,n,b,x)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>csprng *rng;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>int n,b;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big x;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrstrong.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Generates a big
random number of given length from the cryptographically strong generator <i
style='mso-bidi-font-style:normal'>rng</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Parameters<span style='mso-tab-count:1'>††††† </span>A pointer to
the random number generator <i style='mso-bidi-font-style:normal'>rng</i>. A
big number <i style='mso-bidi-font-style:normal'>x</i> and two integers <i
style='mso-bidi-font-style:normal'>n</i> and <i style='mso-bidi-font-style:
normal'>b</i>. On exit <i style='mso-bidi-font-style:normal'>x</i> contains a
big random number <i style='mso-bidi-font-style:normal'>n</i> digits long to
base <i style='mso-bidi-font-style:normal'>b</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>The base <i style='mso-bidi-font-style:normal'>b</i> must be
printable, that is 2 </span><span lang=EN-GB style='font-family:Symbol'>£</span><span
lang=EN-GB><i style='mso-bidi-font-style:normal'>b</i></span><span
lang=EN-GB style='font-family:Symbol'>£</span><span lang=EN-GB> 256.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><span lang=EN-GB style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:
"Times New Roman";mso-fareast-font-family:"Times New Roman";mso-ansi-language:
EN-GB;mso-fareast-language:AR-SA;mso-bidi-language:AR-SA'><br clear=all
style='page-break-before:always'></span><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc4850"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.4.20<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>strong_bigrand</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>void
<b style='mso-bidi-font-weight:normal'>strong_bigrand</b>(rng,w,x)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style='mso-tab-count:2'>††††††††† </span>csprng
*rng;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style='mso-tab-count:2'>††††††††† </span>big
w,x;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrstrong.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Generates a
cryptographically strong random big number <i style='mso-bidi-font-style:normal'>x</i>
using the random number generator <i style='mso-bidi-font-style:normal'>rng</i>
such that <i style='mso-bidi-font-style:normal'>0</i></span><i
style='mso-bidi-font-style:normal'><span lang=EN-GB style='font-family:Symbol'>£</span><span
lang=EN-GB>x&lt;w<o:p></o:p></span></i></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Two big numbers
<i style='mso-bidi-font-style:normal'>w</i> and <i style='mso-bidi-font-style:
normal'>x</i>, and a random number generator <i style='mso-bidi-font-style:
normal'>rng<o:p></o:p></i></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Return value: <span style='mso-tab-count:1'>† </span>None</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc4867"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.4.21<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>strong_init *</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>void <b style='mso-bidi-font-weight:
normal'>strong_init</b>(rng,rawlen,raw,tod)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>csprng *rng;<o:p></o:p></span></p><p class=MsoNormal style='margin-left:36.0pt;text-indent:36.0pt'><span
lang=EN-GB style='font-family:Courier'>int rawlen;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>char *raw;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>long tod;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrstrong.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Initialize the cryptographically strong random number generator <i
style='mso-bidi-font-style:normal'>rng</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A pointer to
the random number generator <i style='mso-bidi-font-style:normal'>rng</i>. An
array <i style='mso-bidi-font-style:normal'>raw</i> of length <i
style='mso-bidi-font-style:normal'>rawlen</i> and a 32-bit time-of-day value <i
style='mso-bidi-font-style:normal'>tod</i>. These two sources are used together
to seed the generator. The former might be provided from random keystrokes, the
latter from an internal clock. Subsequent calls to <b style='mso-bidi-font-weight:
normal'>strong_rng</b> will provide random bytes.</span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Return value:<span style='mso-tab-count:1'>† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Example:<span style='mso-tab-count:1'>†††††††† </span>See
<i style='mso-bidi-font-style:normal'>test1363.c </i>and <i style='mso-bidi-font-style:
normal'>p1363.c</i> for an example of use.<br clear=all style='page-break-before:
always'><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc4885"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.4.22<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>strong_kill *</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>void
<b style='mso-bidi-font-weight:normal'>strong_kill</b>(rng)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><span style='mso-tab-count:2'>††††††††† </span>csprng
*rng;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:"Courier New";
mso-bidi-font-family:"Times New Roman"'><o:p>&nbsp;</o:p></span></p><p class=MsoIndexHeading><span lang=EN-GB>Module:<span style='mso-tab-count:
1'>††††††††† </span>mrstrong.c</span></p><p class=MsoIndex1><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Kills the internal state of the random number generator <i
style='mso-bidi-font-style:normal'>rng<o:p></o:p></i></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A
pointer to a random number generator</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc4899"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.4.23<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>strong_rng *</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>int <b style='mso-bidi-font-weight:normal'>strong_rng</b>(rng)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>csprng *rng;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrstrong.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Generates a
sequence of cryptographically strong random bytes.</span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:2'>†††††††††††††††† </span>A
pointer to a random number </span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Return value:<span style='mso-tab-count:1'>† </span>A random byte</span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><span lang=EN-GB style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:
"Times New Roman";mso-fareast-font-family:"Times New Roman";mso-ansi-language:
EN-GB;mso-fareast-language:AR-SA;mso-bidi-language:AR-SA'><br clear=all
style='page-break-before:always'></span><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><h2 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level2 lfo1;tab-stops:
0cm'><a name="_toc4913"></a><&#33;[if &#33;supportLists]><span lang=EN-GB
style='mso-fareast-font-family:Arial;mso-bidi-font-family:Arial'><span
style='mso-list:Ignore'>9.5<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>Floating-Slash Routines</span></h2><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc4915"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.5.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>build</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>void <b
style='mso-bidi-font-weight:normal'>build</b>(x,gener)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>flash x; <o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>int (*gener)();<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrbuild.c
</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Uses supplied
generator of regular continued fraction expansion to build up a flash number <i
style='mso-bidi-font-style:normal'>x</i>, rounded if necessary.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>The
flash number created, and the generator function.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None<span style="mso-spacerun:yes">† </span></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Example:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>int
phi(w,n)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>flash w;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>int n;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>{ /* rcf generator for golden ratio */<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:3'>†††††††††††††† </span>return 1;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>}<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>...<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:1'>†††† </span><span style='mso-tab-count:1'>†††† </span>...<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>build(x,phi); <o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>...<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><span style='mso-tab-count:2'>††††††††††††††††††††††† </span>This
will calculate the golden ratio <i style='mso-bidi-font-style:normal'>(1+</i></span><i
style='mso-bidi-font-style:normal'><span lang=EN-GB style='font-family:Symbol'>÷</span><span
lang=EN-GB>5)/2</span></i><span lang=EN-GB> in <i style='mso-bidi-font-style:
normal'>x</i> - very quickly&#33;</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc4941"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.5.2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>dconv</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>void <b
style='mso-bidi-font-weight:normal'>dconv</b>(d,x)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>double d;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>flash x;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrflash.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Converts a double to flash format.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A double <i
style='mso-bidi-font-style:normal'>d</i> and a flash variable <i
style='mso-bidi-font-style:normal'>x</i>. On exit <i style='mso-bidi-font-style:
normal'>x</i> will contain the flash equivalent of <i style='mso-bidi-font-style:
normal'>d</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><span lang=EN-GB style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:
"Times New Roman";mso-fareast-font-family:"Times New Roman";mso-ansi-language:
EN-GB;mso-fareast-language:AR-SA;mso-bidi-language:AR-SA'><br clear=all
style='page-break-before:always'></span><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc4956"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.5.3<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>denom</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=FR style='mso-ansi-language:FR'>Function:</span><span
lang=FR style='font-family:Courier;mso-ansi-language:FR'><span
style='mso-tab-count:1'>††† </span>void <b style='mso-bidi-font-weight:normal'>denom</b>(x,y)<o:p></o:p></span></p><p class=MsoNormal><span lang=FR style='font-family:Courier;mso-ansi-language:
FR'><span style='mso-tab-count:2'>††††††††† </span></span><span lang=EN-GB
style='font-family:Courier'>flash x;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big y;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrcore.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Extract the denominator of a flash number</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A flash number <i
style='mso-bidi-font-style:normal'>x</i> and a big number <i style='mso-bidi-font-style:
normal'>y</i>. On exit <i style='mso-bidi-font-style:normal'>y </i>will contain
the denominator of <i style='mso-bidi-font-style:normal'>x</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc4973"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.5.4<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>facos</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=ES style='mso-ansi-language:ES'>Function:</span><span
lang=ES style='font-family:Courier;mso-ansi-language:ES'><span
style='mso-tab-count:1'>††† </span>void <b style='mso-bidi-font-weight:normal'>facos</b>(x,y)<o:p></o:p></span></p><p class=MsoNormal><span lang=ES style='font-family:Courier;mso-ansi-language:
ES'><span style='mso-tab-count:2'>††††††††† </span></span><span lang=EN-GB
style='font-family:Courier'>flash x,y;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrflsh3.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Calculates arc-cosine of a flash number, using <b
style='mso-bidi-font-weight:normal'>fasin</b>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Two
flash numbers <i style='mso-bidi-font-style:normal'>x</i> and <i
style='mso-bidi-font-style:normal'>y</i>. On exit <i style='mso-bidi-font-style:
normal'>y=arccos(x)</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span><i style='mso-bidi-font-style:normal'>&#124;x&#124;</i> must be less than
or equal to 1.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><b style='mso-bidi-font-weight:normal'><span lang=EN-GB style='font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:"Times New Roman";mso-fareast-font-family:
"Times New Roman";mso-ansi-language:EN-GB;mso-fareast-language:AR-SA;
mso-bidi-language:AR-SA'><br clear=all style='page-break-before:always'></span></b><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc4988"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.5.5<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>facosh</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>void <b
style='mso-bidi-font-weight:normal'>facosh</b>(x,y)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>flash x,y;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrflsh4.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Calculates hyperbolic arc-cosine of a flash number.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Two
flash numbers <i style='mso-bidi-font-style:normal'>x</i> and <i
style='mso-bidi-font-style:normal'>y</i>. On exit <i style='mso-bidi-font-style:
normal'>y=arccosh(x)</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span><i style='mso-bidi-font-style:normal'>&#124;x</i>&#124; must be greater
than or equal to 1.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc5003"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.5.6<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>fadd</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>void <b
style='mso-bidi-font-weight:normal'>fadd</b>(x,y,z)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>flash x,y,z;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrflash.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Add two flash numbers.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Three
flash numbers <i style='mso-bidi-font-style:normal'>x, y</i> and <i
style='mso-bidi-font-style:normal'>z</i>. On exit <i style='mso-bidi-font-style:
normal'>z=x+y</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc5018"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.5.7<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>fasin</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=FR style='mso-ansi-language:FR'>Function:</span><span
lang=FR style='font-family:Courier;mso-ansi-language:FR'><span
style='mso-tab-count:1'>††† </span>void <b style='mso-bidi-font-weight:normal'>fasin</b>(x,y)<o:p></o:p></span></p><p class=MsoNormal><span lang=FR style='font-family:Courier;mso-ansi-language:
FR'><span style='mso-tab-count:2'>††††††††† </span></span><span lang=EN-GB
style='font-family:Courier'>flash x,y;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrflsh3.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Calculates arc-sin of a flash number, using <b style='mso-bidi-font-weight:
normal'>fatan</b>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Two
flash numbers <i style='mso-bidi-font-style:normal'>x</i> and <i
style='mso-bidi-font-style:normal'>y</i>. On exit <i style='mso-bidi-font-style:
normal'>y=arcsin(x)</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span><i style='mso-bidi-font-style:normal'>&#124;x</i>&#124; must be less than
or equal to 1.<br clear=all style='page-break-before:always'><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc5033"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.5.8<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>fasinh</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>void <b
style='mso-bidi-font-weight:normal'>fasinh</b>(x,y)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>flash x,y;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrflsh4.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Calculates hyperbolic arc-sin of a flash number.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Two
flash numbers <i style='mso-bidi-font-style:normal'>x</i> and <i
style='mso-bidi-font-style:normal'>y</i>. On exit <i style='mso-bidi-font-style:
normal'>y=arcsinh(x)</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc5046"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.5.9<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>fatan</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>void <b
style='mso-bidi-font-weight:normal'>fatan</b>(x,y)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>flash x,y;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrflsh3.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-top:12.0pt;margin-right:0cm;margin-bottom:
0cm;margin-left:70.9pt;margin-bottom:.0001pt;text-indent:-70.9pt'><span
lang=EN-GB>Desciption:<span style='mso-tab-count:1'>†††† </span>Calculates the
arc-tangent of a flash number, using <i style='mso-bidi-font-style:normal'>O(n<sup>2.5</sup>)</i>method
based on Newton's iteration.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Two
flash numbers <i style='mso-bidi-font-style:normal'>x </i>and <i
style='mso-bidi-font-style:normal'>y</i>. On exit <i style='mso-bidi-font-style:
normal'>y=arctan(x)</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc5059"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.5.10<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>fatanh</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>void <b
style='mso-bidi-font-weight:normal'>fatanh</b>(x,y) <o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>flash x,y;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrflsh4.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Desciption:<span style='mso-tab-count:1'>†††† </span>Calculates
the hyperbolic arc-tangent of a flash number.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Two
flash numbers <i style='mso-bidi-font-style:normal'>x</i> and <i
style='mso-bidi-font-style:normal'>y</i>. On exit <i style='mso-bidi-font-style:
normal'>y=arctanh(x)</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span><i style='mso-bidi-font-style:normal'>x<sup>2</sup></i> must be
less than 1 <br clear=all style='page-break-before:always'><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc5074"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.5.11<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>fcomp</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=FR style='mso-ansi-language:FR'>Function:</span><span
lang=FR style='font-family:Courier;mso-ansi-language:FR'><span
style='mso-tab-count:1'>††† </span>int <b style='mso-bidi-font-weight:normal'>fcomp</b>(x,y)
<o:p></o:p></span></p><p class=MsoNormal><span lang=FR style='font-family:Courier;mso-ansi-language:
FR'><span style='mso-tab-count:2'>††††††††† </span></span><span lang=EN-GB
style='font-family:Courier'>flash x,y;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrflash.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Compare two flash numbers. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Two
flash numbers <i style='mso-bidi-font-style:normal'>x</i> and <i
style='mso-bidi-font-style:normal'>y</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>Returns -1 if <i style='mso-bidi-font-style:normal'>y&gt;x</i>, +1
if <i style='mso-bidi-font-style:normal'>x&gt;y</i> and 0 if <i
style='mso-bidi-font-style:normal'>x=y</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc5087"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.5.12<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>fconv</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>void <b
style='mso-bidi-font-weight:normal'>fconv</b>(n,d,x)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>int n,d;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>flash x;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrflash.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Convert a simple fraction to flash format.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Integers
<i style='mso-bidi-font-style:normal'>n</i> and <i style='mso-bidi-font-style:
normal'>d</i>, and a flash number <i style='mso-bidi-font-style:normal'>x</i>.</span></p><p class=MsoNormal><span lang=EN-GB><span style='mso-tab-count:2'>††††††††††††††††††††††† </span>On
exit <i style='mso-bidi-font-style:normal'>x=n/d</i></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc5102"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.5.13<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>fcos</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=FR style='mso-ansi-language:FR'>Function:</span><span
lang=FR style='font-family:Courier;mso-ansi-language:FR'><span
style='mso-tab-count:1'>††† </span>void <b style='mso-bidi-font-weight:normal'>fcos</b>(x,y)<o:p></o:p></span></p><p class=MsoNormal><span lang=FR style='font-family:Courier;mso-ansi-language:
FR'><span style='mso-tab-count:2'>††††††††† </span></span><span lang=EN-GB
style='font-family:Courier'>flash x,y;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrflsh3.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Calculates cosine of a given flash angle, using <b
style='mso-bidi-font-weight:normal'>ftan</b>. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Two
flash numbers <i style='mso-bidi-font-style:normal'>x</i> and <i
style='mso-bidi-font-style:normal'>y</i>. On exit <i style='mso-bidi-font-style:
normal'>y=cos(x)</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><b style='mso-bidi-font-weight:normal'><span lang=EN-GB style='font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:"Times New Roman";mso-fareast-font-family:
"Times New Roman";mso-ansi-language:EN-GB;mso-fareast-language:AR-SA;
mso-bidi-language:AR-SA'><br clear=all style='page-break-before:always'></span></b><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc5117"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.5.14<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>fcosh</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=FR style='mso-ansi-language:FR'>Function:</span><span
lang=FR style='font-family:Courier;mso-ansi-language:FR'><span
style='mso-tab-count:1'>††† </span>void <b style='mso-bidi-font-weight:normal'>fcosh</b>(x,y)<o:p></o:p></span></p><p class=MsoNormal><span lang=FR style='font-family:Courier;mso-ansi-language:
FR'><span style='mso-tab-count:2'>††††††††† </span></span><span lang=EN-GB
style='font-family:Courier'>flash x,y;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrflsh4.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Calculates hyperbolic cosine of a given flash angle.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Two
flash numbers <i style='mso-bidi-font-style:normal'>x</i> and <i
style='mso-bidi-font-style:normal'>y</i>. On exit <i style='mso-bidi-font-style:
normal'>y=cosh(x)</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc5130"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.5.15<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>fdiv</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=FR style='mso-ansi-language:FR'>Function:</span><span
lang=FR style='font-family:Courier;mso-ansi-language:FR'><span
style='mso-tab-count:1'>††† </span>void <b style='mso-bidi-font-weight:normal'>fdiv</b>(x,y,z)<o:p></o:p></span></p><p class=MsoNormal><span lang=FR style='font-family:Courier;mso-ansi-language:
FR'><span style='mso-tab-count:2'>††††††††† </span></span><span lang=EN-GB
style='font-family:Courier'>flash x,y,z;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrflash.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Divides two flash numbers.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Three
big numbers <i style='mso-bidi-font-style:normal'>x, y</i> and <i
style='mso-bidi-font-style:normal'>z</i>. On exit <i style='mso-bidi-font-style:
normal'>z=x/y</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc5143"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.5.16<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>fdsize</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>double <b
style='mso-bidi-font-weight:normal'>fdsize</b>(x)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>flash x;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrdouble.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Converts a flash number to double format.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A
flash number <i style='mso-bidi-font-style:normal'>x</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>The value of the parameter <i style='mso-bidi-font-style:normal'>x</i>
as a double.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>The value of <i style='mso-bidi-font-style:normal'>x</i> must be
representable as a double.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><b style='mso-bidi-font-weight:normal'><span lang=EN-GB style='font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:"Times New Roman";mso-fareast-font-family:
"Times New Roman";mso-ansi-language:EN-GB;mso-fareast-language:AR-SA;
mso-bidi-language:AR-SA'><br clear=all style='page-break-before:always'></span></b><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc5158"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.5.17<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>fexp</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=FR style='mso-ansi-language:FR'>Function:</span><span
lang=FR style='font-family:Courier;mso-ansi-language:FR'><span
style='mso-tab-count:1'>††† </span>void <b style='mso-bidi-font-weight:normal'>fexp</b>(x,y)<o:p></o:p></span></p><p class=MsoNormal><span lang=FR style='font-family:Courier;mso-ansi-language:
FR'><span style='mso-tab-count:2'>††††††††† </span></span><span lang=EN-GB
style='font-family:Courier'>flash x,y;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrflsh2.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Calculates the exponential of a flash number using <i
style='mso-bidi-font-style:normal'>O(n<sup>2.5</sup>)</i> method. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Two
flash numbers <i style='mso-bidi-font-style:normal'>x</i> and <i
style='mso-bidi-font-style:normal'>y</i>. On exit <i style='mso-bidi-font-style:
normal'>y=e<sup>x</sup></i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc5173"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.5.18<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>fincr</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=FR style='mso-ansi-language:FR'>Function:</span><span
lang=FR style='font-family:Courier;mso-ansi-language:FR'><span
style='mso-tab-count:1'>††† </span>void <b style='mso-bidi-font-weight:normal'>fincr</b>(x,n,d,y)<o:p></o:p></span></p><p class=MsoNormal><span lang=FR style='font-family:Courier;mso-ansi-language:
FR'><span style='mso-tab-count:2'>††††††††† </span></span><span lang=EN-GB
style='font-family:Courier'>big x,y;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>int n,d;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrflash.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Add a simple fraction to a flash number. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Two
flash numbers <i style='mso-bidi-font-style:normal'>x</i> and <i
style='mso-bidi-font-style:normal'>y</i>, and two integers <i style='mso-bidi-font-style:
normal'>n</i> and <i style='mso-bidi-font-style:normal'>d</i>. </span></p><p class=MsoNormal><span lang=EN-GB><span style='mso-tab-count:2'>††††††††††††††††††††††† </span>On
exit <span style='position:relative;top:9.0pt;mso-text-raise:-9.0pt'><&#33;--[if gte vml 1]><v:shape
id="_x0000_i1035" type="#_x0000_t75" style='width:50pt;height:31pt' o:ole=""
filled="t"><v:fill color2="black"/><v:imagedata src="manual_files/image034.emz" o:title=""/><v:textbox inset="0,0,0,0"/></v:shape><&#33;[endif]--><&#33;[if &#33;vml]><img border=0 width=52 height=33
src="manual_files/image035.gif" v:shapes="_x0000_i1035"><&#33;[endif]></span><&#33;--[if gte mso 9]><xml><o:OLEObject Type="Embed" ProgID="Equation.2" ShapeID="_x0000_i1035"
DrawAspect="Content" ObjectID="_1307025238"></o:OLEObject></xml><&#33;[endif]-->.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Example:<span style='mso-tab-count:1'>†††††††† </span></span><span
lang=EN-GB style='font-family:Courier'>fincr(x,-2,3,x);<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><span style='mso-tab-count:2'>††††††††††††††††††††††† </span>This
subtracts two-thirds from the value of <i style='mso-bidi-font-style:normal'>x</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><b style='mso-bidi-font-weight:normal'><span lang=EN-GB style='font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:"Times New Roman";mso-fareast-font-family:
"Times New Roman";mso-ansi-language:EN-GB;mso-fareast-language:AR-SA;
mso-bidi-language:AR-SA'><br clear=all style='page-break-before:always'></span></b><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc5193"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.5.19<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>flog</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=FR style='mso-ansi-language:FR'>Function:</span><span
lang=FR style='font-family:Courier;mso-ansi-language:FR'><span
style='mso-tab-count:1'>††† </span>void <b style='mso-bidi-font-weight:normal'>flog</b>(x,y)
<o:p></o:p></span></p><p class=MsoNormal><span lang=FR style='font-family:Courier;mso-ansi-language:
FR'><span style='mso-tab-count:2'>††††††††† </span></span><span lang=EN-GB
style='font-family:Courier'>flash x,y;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrflsh2.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Calculates the natural log of a flash number using <i
style='mso-bidi-font-style:normal'>O(n<sup>2.5</sup>)</i> method.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Two
flash numbers <i style='mso-bidi-font-style:normal'>x</i> and <i
style='mso-bidi-font-style:normal'>y</i>. On exit <i style='mso-bidi-font-style:
normal'>y=log(x)</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc5208"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.5.20<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>flop</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>void <b
style='mso-bidi-font-weight:normal'>flop</b>(x,y,op,z)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>flash x,y,z;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>int *op;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrflash.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Perform primitive flash operation. Used internally.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Three flash
numbers <i style='mso-bidi-font-style:normal'>x, y</i> and <i style='mso-bidi-font-style:
normal'>z</i>. On exit z<i style='mso-bidi-font-style:normal'>=Fn(x,y),</i>
where the function performed depends on the parameter <i style='mso-bidi-font-style:
normal'>op</i>. See source listing comments for more details.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><b style='mso-bidi-font-weight:normal'><span lang=EN-GB style='font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:"Times New Roman";mso-fareast-font-family:
"Times New Roman";mso-ansi-language:EN-GB;mso-fareast-language:AR-SA;
mso-bidi-language:AR-SA'><br clear=all style='page-break-before:always'></span></b><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc5224"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.5.21<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>fmodulo</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=FR style='mso-ansi-language:FR'>Function:<span
style='mso-tab-count:1'>†††††††† </span></span><span lang=FR style='font-family:
Courier;mso-ansi-language:FR'>void <b style='mso-bidi-font-weight:normal'>fmodulo</b>(x,y,z)<o:p></o:p></span></p><p class=MsoNormal><span lang=FR style='font-family:Courier;mso-ansi-language:
FR'><span style='mso-tab-count:2'>††††††††† </span></span><span lang=EN-GB
style='font-family:Courier'>flash x,y,z;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Module:<span
style='mso-tab-count:1'>††††††††† </span>mrflash.c</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Description:<span
style='mso-tab-count:1'>††† </span>Find the remainder when one flash number is
divided by another.</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Parameters:<span
style='mso-tab-count:1'>†††† </span>Three flash numbers <i style='mso-bidi-font-style:
normal'>x, y </i>and <i style='mso-bidi-font-style:normal'>z</i>. On exit <i
style='mso-bidi-font-style:normal'>z=x mod y</i>;</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Return value:<span
style='mso-tab-count:1'>†† </span>None</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB>Restrictions:<span
style='mso-tab-count:1'>††† </span>None</span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoFooter style='tab-stops:36.0pt'><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc5240"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.5.22<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>fmul</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=FR style='mso-ansi-language:FR'>Function:</span><span
lang=FR style='font-family:Courier;mso-ansi-language:FR'><span
style='mso-tab-count:1'>††† </span>void <b style='mso-bidi-font-weight:normal'>fmul</b>(x,y,z)<o:p></o:p></span></p><p class=MsoNormal><span lang=FR style='font-family:Courier;mso-ansi-language:
FR'><span style='mso-tab-count:2'>††††††††† </span></span><span lang=EN-GB
style='font-family:Courier'>flash x,y,z;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrflash.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Multiply two flash numbers.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Three
flash numbers <i style='mso-bidi-font-style:normal'>x, y</i> and <i
style='mso-bidi-font-style:normal'>z</i>. On exit <i style='mso-bidi-font-style:
normal'>z=x.y</i></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><span lang=EN-GB style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:
"Times New Roman";mso-fareast-font-family:"Times New Roman";mso-ansi-language:
EN-GB;mso-fareast-language:AR-SA;mso-bidi-language:AR-SA'><br clear=all
style='page-break-before:always'></span><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc5257"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.5.23<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>fpack</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>void <b
style='mso-bidi-font-weight:normal'>fpack</b>(n,d,x)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>flash x;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big n,d;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrcore.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Forms a flash number from big numerator and denominator.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A flash number <i
style='mso-bidi-font-style:normal'>x</i> and two big numbers <i
style='mso-bidi-font-style:normal'>n</i> and <i style='mso-bidi-font-style:
normal'>d</i>. </span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><span style='mso-tab-count:2'>††††††††††††††††††††††††††††††††††† </span>On
exit <span style='position:relative;top:9.0pt;mso-text-raise:-9.0pt'><&#33;--[if gte vml 1]><v:shape
id="_x0000_i1036" type="#_x0000_t75" style='width:32pt;height:30pt' o:ole=""
filled="t"><v:fill color2="black"/><v:imagedata src="manual_files/image036.emz" o:title=""/><v:textbox inset="0,0,0,0"/></v:shape><&#33;[endif]--><&#33;[if &#33;vml]><img border=0 width=34 height=32
src="manual_files/image037.gif" v:shapes="_x0000_i1036"><&#33;[endif]></span><&#33;--[if gte mso 9]><xml><o:OLEObject Type="Embed" ProgID="Equation.2" ShapeID="_x0000_i1036"
DrawAspect="Content" ObjectID="_1307025239"></o:OLEObject></xml><&#33;[endif]-->.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Restrictions:<span style='mso-tab-count:1'>†† </span>The denominator
must be non-zero. Flash variable <i style='mso-bidi-font-style:normal'>x</i>
and big variable <i style='mso-bidi-font-style:normal'>d</i> must be distinct.
The resulting flash variable must not be too big for the representation.</span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc5275"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.5.24<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>fpi</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>void <b
style='mso-bidi-font-weight:normal'>fpi</b>(x)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>flash x;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrpi.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Calculates </span><span
lang=EN-GB style='font-family:Symbol'>p</span><span lang=EN-GB> using
Guass-Legendre <i style='mso-bidi-font-style:normal'>O(n<sup>2</sup>.log n)</i>
method. Note that on subsequent calls to this routine, </span><span lang=EN-GB
style='font-family:Symbol'>p</span><span lang=EN-GB> is immediately available,
as it is stored internally. (This routine is disappointingly slow. There
appears to be no simple way to calculate a rational approximation to </span><span
lang=EN-GB style='font-family:Symbol'>p</span><span lang=EN-GB> quickly).</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A
flash number <i style='mso-bidi-font-style:normal'>x</i>. On exit <i
style='mso-bidi-font-style:normal'>x=</i></span><i style='mso-bidi-font-style:
normal'><span lang=EN-GB style='font-family:Symbol'>p</span><span lang=EN-GB>.<o:p></o:p></span></i></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>Restrictions:<span style='mso-tab-count:1'>††† </span>None.
Internally allocated memory is freed when the current MIRACL instance is ended
by a call to<b style='mso-bidi-font-weight:normal'> mirexit</b>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><span lang=EN-GB style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:
"Times New Roman";mso-fareast-font-family:"Times New Roman";mso-ansi-language:
EN-GB;mso-fareast-language:AR-SA;mso-bidi-language:AR-SA'><br clear=all
style='page-break-before:always'></span><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc5291"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.5.25<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>fpmul</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=FR style='mso-ansi-language:FR'>Function:</span><span
lang=FR style='font-family:Courier;mso-ansi-language:FR'><span
style='mso-tab-count:1'>††† </span>void <b style='mso-bidi-font-weight:normal'>fpmul</b>(x,n,d,y)<o:p></o:p></span></p><p class=MsoNormal><span lang=FR style='font-family:Courier;mso-ansi-language:
FR'><span style='mso-tab-count:2'>††††††††† </span></span><span lang=EN-GB
style='font-family:Courier'>flash x,y;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:1'>†††† </span><span style='mso-tab-count:1'>†††† </span>int
n,d;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrflash.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Multiplies a flash number by a simple fraction.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Two
flash numbers <i style='mso-bidi-font-style:normal'>x</i> and <i
style='mso-bidi-font-style:normal'>y</i>, and two integers <i style='mso-bidi-font-style:
normal'>n</i> and <i style='mso-bidi-font-style:normal'>d</i>. </span></p><p class=MsoNormal><span lang=EN-GB><span style='mso-tab-count:2'>††††††††††††††††††††††† </span>On
exit <span style='position:relative;top:9.0pt;mso-text-raise:-9.0pt'><&#33;--[if gte vml 1]><v:shape
id="_x0000_i1037" type="#_x0000_t75" style='width:42pt;height:30pt' o:ole=""
filled="t"><v:fill color2="black"/><v:imagedata src="manual_files/image038.emz" o:title=""/><v:textbox inset="0,0,0,0"/></v:shape><&#33;[endif]--><&#33;[if &#33;vml]><img border=0 width=44 height=32
src="manual_files/image039.gif" v:shapes="_x0000_i1037"><&#33;[endif]></span><&#33;--[if gte mso 9]><xml><o:OLEObject Type="Embed" ProgID="Equation.2" ShapeID="_x0000_i1037"
DrawAspect="Content" ObjectID="_1307025240"></o:OLEObject></xml><&#33;[endif]--></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc5309"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.5.26<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>fpower</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>void <b
style='mso-bidi-font-weight:normal'>fpower</b>(x,n,y)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>flash x,y;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>int n;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrflsh1.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Raises a flash number to an integer power.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Flash
variables <i style='mso-bidi-font-style:normal'>x</i> and <i style='mso-bidi-font-style:
normal'>y</i>, and an integer <i style='mso-bidi-font-style:normal'>n</i>.</span></p><p class=MsoNormal><span lang=EN-GB><span style='mso-tab-count:2'>††††††††††††††††††††††† </span>On
exit <i style='mso-bidi-font-style:normal'>y=x<sup>n</sup></i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><span lang=EN-GB style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:
"Times New Roman";mso-fareast-font-family:"Times New Roman";mso-ansi-language:
EN-GB;mso-fareast-language:AR-SA;mso-bidi-language:AR-SA'><br clear=all
style='page-break-before:always'></span><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc5325"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.5.27<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>fpowf</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=FR style='mso-ansi-language:FR'>Function:</span><span
lang=FR style='font-family:Courier;mso-ansi-language:FR'><span
style='mso-tab-count:1'>††† </span>void <b style='mso-bidi-font-weight:normal'>fpowf</b>(x,y,z)<o:p></o:p></span></p><p class=MsoNormal><span lang=FR style='font-family:Courier;mso-ansi-language:
FR'><span style='mso-tab-count:2'>††††††††† </span></span><span lang=EN-GB
style='font-family:Courier'>flash x,y,z;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrflsh2.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Raises a flash number to a flash power.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Three
flash numbers <i style='mso-bidi-font-style:normal'>x</i>, <i style='mso-bidi-font-style:
normal'>y</i> and <i style='mso-bidi-font-style:normal'>z</i>. On exit <i
style='mso-bidi-font-style:normal'>z=x<sup>y</sup></i></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc5338"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.5.28<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>frand</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>void <b
style='mso-bidi-font-weight:normal'>frand</b>(x)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>flash x;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrfrnd.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Generates a random flash number.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A big number <i
style='mso-bidi-font-style:normal'>x</i>. On exit <i style='mso-bidi-font-style:
normal'>x</i> contains a flash random number in the range <i style='mso-bidi-font-style:
normal'>0&lt;x&lt;1</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc5351"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.5.29<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>frecip</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>void <b
style='mso-bidi-font-weight:normal'>frecip</b> (x,y)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>flash x,y;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrflash.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Calculates reciprocal of a flash number.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Two
flash numbers <i style='mso-bidi-font-style:normal'>x</i> and <i
style='mso-bidi-font-style:normal'>y</i>. On exit <i style='mso-bidi-font-style:
normal'>y=1/x</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><span lang=EN-GB style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:
"Times New Roman";mso-fareast-font-family:"Times New Roman";mso-ansi-language:
EN-GB;mso-fareast-language:AR-SA;mso-bidi-language:AR-SA'><br clear=all
style='page-break-before:always'></span><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc5365"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.5.30<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>froot</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>BOOL <b
style='mso-bidi-font-weight:normal'>froot</b>(x,m,y)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>flash x,y;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>int m;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrflsh1.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Calculates <i
style='mso-bidi-font-style:normal'>m</i>-th root of a flash number using
Newton's <i style='mso-bidi-font-style:normal'>O(n<sup>2</sup>)</i> method. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Flash
numbers <i style='mso-bidi-font-style:normal'>x</i> and <i style='mso-bidi-font-style:
normal'>y</i>, and an integer <i style='mso-bidi-font-style:normal'>m</i>. </span></p><p class=MsoNormal><span lang=EN-GB><span style='mso-tab-count:2'>††††††††††††††††††††††† </span>On
exit <i style='mso-bidi-font-style:normal'>y</i> is the <i style='mso-bidi-font-style:
normal'>m</i>-th root of <i style='mso-bidi-font-style:normal'>x</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>TRUE for exact root, otherwise FALSE</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc5380"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.5.31<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>fsin</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=FR style='mso-ansi-language:FR'>Function:</span><span
lang=FR style='font-family:Courier;mso-ansi-language:FR'><span
style='mso-tab-count:1'>††† </span>void <b style='mso-bidi-font-weight:normal'>fsin</b>(x,y)<o:p></o:p></span></p><p class=MsoNormal><span lang=FR style='font-family:Courier;mso-ansi-language:
FR'><span style='mso-tab-count:2'>††††††††† </span></span><span lang=EN-GB
style='font-family:Courier'>flash x,y;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrflsh3.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Calculates sine of a given flash angle. Uses <b style='mso-bidi-font-weight:
normal'>ftan</b>. </span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Two
flash numbers <i style='mso-bidi-font-style:normal'>x</i> and <i
style='mso-bidi-font-style:normal'>y</i>. On exit <i style='mso-bidi-font-style:
normal'>y=sin(x)</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc5393"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.5.32<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>fsinh</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=FR style='mso-ansi-language:FR'>Function:</span><span
lang=FR style='font-family:Courier;mso-ansi-language:FR'><span
style='mso-tab-count:1'>††† </span>void <b style='mso-bidi-font-weight:normal'>fsinh</b>(x,y)<o:p></o:p></span></p><p class=MsoNormal><span lang=FR style='font-family:Courier;mso-ansi-language:
FR'><span style='mso-tab-count:2'>††††††††† </span></span><span lang=EN-GB
style='font-family:Courier'>flash x,y;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrflsh4.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Calculates hyperbolic sine of a given flash angle.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Two
flash numbers <i style='mso-bidi-font-style:normal'>x</i> and <i
style='mso-bidi-font-style:normal'>y</i>. On exit <i style='mso-bidi-font-style:
normal'>y=sinh(x)</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><span lang=EN-GB style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:
"Times New Roman";mso-fareast-font-family:"Times New Roman";mso-ansi-language:
EN-GB;mso-fareast-language:AR-SA;mso-bidi-language:AR-SA'><br clear=all
style='page-break-before:always'></span><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc5407"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.5.33<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>fsub</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=FR style='mso-ansi-language:FR'>Function:</span><span
lang=FR style='font-family:Courier;mso-ansi-language:FR'><span
style='mso-tab-count:1'>††† </span>void <b style='mso-bidi-font-weight:normal'>fsub</b>(x,y,z)<o:p></o:p></span></p><p class=MsoNormal><span lang=FR style='font-family:Courier;mso-ansi-language:
FR'><span style='mso-tab-count:2'>††††††††† </span></span><span lang=EN-GB
style='font-family:Courier'>flash x,y,z;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrflash.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Subtract two flash numbers.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Three
flash numbers <i style='mso-bidi-font-style:normal'>x, y</i> and <i
style='mso-bidi-font-style:normal'>z</i>.</span></p><p class=MsoNormal><span lang=EN-GB><span style='mso-tab-count:2'>††††††††††††††††††††††† </span>On
exit <i style='mso-bidi-font-style:normal'>z=x-y</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc5421"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.5.34<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>ftan</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=FR style='mso-ansi-language:FR'>Function:</span><span
lang=FR style='font-family:Courier;mso-ansi-language:FR'><span
style='mso-tab-count:1'>††† </span>void <b style='mso-bidi-font-weight:normal'>ftan</b>(x,y)<o:p></o:p></span></p><p class=MsoNormal><span lang=FR style='font-family:Courier;mso-ansi-language:
FR'><span style='mso-tab-count:2'>††††††††† </span></span><span lang=EN-GB
style='font-family:Courier'>flash x,y;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrflsh3.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Calculates the tan of a given flash angle, using an <i
style='mso-bidi-font-style:normal'>O(n<sup>2.5</sup>)</i> method.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Two
flash numbers <i style='mso-bidi-font-style:normal'>x</i> and <i
style='mso-bidi-font-style:normal'>y</i>. On exit <i style='mso-bidi-font-style:
normal'>y=tan(x)</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc5434"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.5.35<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>ftanh</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=FR style='mso-ansi-language:FR'>Function:</span><span
lang=FR style='font-family:Courier;mso-ansi-language:FR'><span
style='mso-tab-count:1'>††† </span>void <b style='mso-bidi-font-weight:normal'>ftanh</b>(x,y)<o:p></o:p></span></p><p class=MsoNormal><span lang=FR style='font-family:Courier;mso-ansi-language:
FR'><span style='mso-tab-count:2'>††††††††† </span></span><span lang=EN-GB
style='font-family:Courier'>flash x,y;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrflsh4.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Calculates the hyperbolic tan of a given flash angle.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Two
flash numbers <i style='mso-bidi-font-style:normal'>x</i> and <i
style='mso-bidi-font-style:normal'>y</i>. On exit <i style='mso-bidi-font-style:
normal'>y=tanh(x)</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>None<br clear=all style='page-break-before:always'><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc5449"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.5.36<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>ftrunc</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=FR style='mso-ansi-language:FR'>Function:</span><span
lang=FR style='font-family:Courier;mso-ansi-language:FR'><span
style='mso-tab-count:1'>††† </span>void <b style='mso-bidi-font-weight:normal'>ftrunc</b>(x,y,z)<o:p></o:p></span></p><p class=MsoNormal><span lang=FR style='font-family:Courier;mso-ansi-language:
FR'><span style='mso-tab-count:2'>††††††††† </span></span><span lang=EN-GB
style='font-family:Courier'>flash x,z;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big y;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrflash.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Seperates a flash number to a big number and a flash remainder.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>Flash numbers <i
style='mso-bidi-font-style:normal'>x</i> and <i style='mso-bidi-font-style:
normal'>z</i>, and a big number <i style='mso-bidi-font-style:normal'>y</i>. On
exit <i style='mso-bidi-font-style:normal'>y=int(x)</i> and <i
style='mso-bidi-font-style:normal'>z</i> is the fractional remainder. If <i
style='mso-bidi-font-style:normal'>y</i> is the same as <i style='mso-bidi-font-style:
normal'>z</i>, only <i style='mso-bidi-font-style:normal'>int(x)</i> is
returned.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc5466"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.5.37<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>numer</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>void <b
style='mso-bidi-font-weight:normal'>numer</b>(x,y)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>flash x;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big y;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrcore.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Description:<span style='mso-tab-count:
1'>††† </span>Extract the numerator of a flash number.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A
flash number <i style='mso-bidi-font-style:normal'>x</i> and a big number <i
style='mso-bidi-font-style:normal'>y</i>.</span></p><p class=MsoNormal><span lang=EN-GB><span style='mso-tab-count:2'>††††††††††††††††††††††† </span>On
exit <i style='mso-bidi-font-style:normal'>y</i> will contain the numerator of <i
style='mso-bidi-font-style:normal'>x</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><span lang=EN-GB style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:
"Times New Roman";mso-fareast-font-family:"Times New Roman";mso-ansi-language:
EN-GB;mso-fareast-language:AR-SA;mso-bidi-language:AR-SA'><br clear=all
style='page-break-before:always'></span><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><h3 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level3 lfo1;tab-stops:
0cm'><a name="_toc5485"></a><&#33;[if &#33;supportLists]><span lang=X-NONE
style='mso-ansi-language:X-NONE;mso-fareast-language:X-NONE;mso-bidi-language:
X-NONE'><span style='mso-list:Ignore'>9.5.38<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>mround</span></h3><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Function:</span><span lang=EN-GB
style='font-family:Courier'><span style='mso-tab-count:1'>††† </span>void <b
style='mso-bidi-font-weight:normal'>mround</b>(n,d,x)<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>flash x;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-family:Courier'><span
style='mso-tab-count:2'>††††††††† </span>big n,d;<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Module:<span style='mso-tab-count:1'>††††††††† </span>mrround.c</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Description:<span style='mso-tab-count:1'>††† </span>Forms a rounded
flash number from big numerator and denominator. If rounding takes place the
instance variable <b style='mso-bidi-font-weight:normal'>EXACT</b> is set to
FALSE. <b style='mso-bidi-font-weight:normal'>EXACT</b> is initialised to TRUE
in routine <b style='mso-bidi-font-weight:normal'>mirsys</b>. This routine is
used internally.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>Parameters:<span style='mso-tab-count:1'>†††† </span>A flash number <i
style='mso-bidi-font-style:normal'>x</i> and two big numbers <i
style='mso-bidi-font-style:normal'>n</i> and <i style='mso-bidi-font-style:
normal'>d</i>. On exit <i style='mso-bidi-font-style:normal'>x=R{n/d}</i>, that
is the flash number <i style='mso-bidi-font-style:normal'>n/d</i> rounded if
necessary to fit the representation.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Return value:<span style='mso-tab-count:
1'>†† </span>None</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Restrictions:<span style='mso-tab-count:
1'>††† </span>The denominator must be non-zero.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><b style='mso-bidi-font-weight:normal'><span lang=EN-GB style='font-size:14.0pt;
mso-bidi-font-size:10.0pt;font-family:"Times New Roman";mso-fareast-font-family:
"Times New Roman";mso-font-kerning:.5pt;mso-ansi-language:EN-GB;mso-fareast-language:
AR-SA;mso-bidi-language:AR-SA'><br clear=all style='page-break-before:always'></span></b><h1 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level1 lfo1;tab-stops:
0cm'><a name="_toc5501"></a><&#33;[if &#33;supportLists]><span lang=EN-GB
style='mso-fareast-font-family:Arial;mso-bidi-font-family:Arial'><span
style='mso-list:Ignore'>10.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>Instance variables</span></h1><p class=MsoNormal style='margin-left:99.25pt;text-indent:-99.25pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>These variables are all member of the <i
style='mso-bidi-font-style:normal'>miracl</i> structure defined in <i
style='mso-bidi-font-style:normal'>miracl.h</i>. They are all accessed via the <i
style='mso-bidi-font-style:normal'>mip </i><span
style="mso-spacerun:yes">†</span>- the <b style='mso-bidi-font-weight:normal'>M</b>iracl
<b style='mso-bidi-font-weight:normal'>I</b>nstance <b style='mso-bidi-font-weight:
normal'>P</b>ointer.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:127.6pt;text-indent:-127.6pt'><span
lang=EN-GB style='font-family:Courier'>BOOL EXACT;</span><span lang=EN-GB><span
style='mso-tab-count:1'>†††††††††††††††† </span>Initialised to TRUE. Set to
FALSE if any rounding takes place during <i style='mso-bidi-font-style:normal'>flash</i>
arithmetic.</span></p><p class=MsoNormal style='margin-left:127.6pt;text-indent:-127.6pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:127.6pt;text-indent:-127.6pt'><span
lang=EN-GB style='font-family:Courier'>int INPLEN;</span><span lang=EN-GB><span
style='mso-tab-count:1'>†††††††††††††††† </span>Length of input string. Must be
used when inputting binary data.</span></p><p class=MsoNormal style='margin-left:127.6pt;text-indent:-127.6pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:127.6pt;text-indent:-127.6pt'><span
lang=EN-GB style='font-family:Courier'>int IOBASE;</span><span lang=EN-GB><span
style='mso-tab-count:1'>†††††††††††††††† </span>The ìprintableî number base to
be used for input and output. May be changed at will within a program. Must be
greater than or equal to 2 and less than or equal to 256</span></p><p class=MsoNormal style='margin-left:127.6pt;text-indent:-127.6pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:127.6pt;text-indent:-127.6pt'><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>int
IOBSIZ<span style='mso-tab-count:1'>††††††† </span></span><span lang=EN-GB>Size
of I/O buffer.</span></p><p class=MsoNormal style='margin-left:127.6pt;text-indent:-127.6pt'><span
lang=EN-GB style='font-family:Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:127.6pt;text-indent:-127.6pt'><span
lang=EN-GB style='font-family:Courier'>BOOL ERCON;</span><span lang=EN-GB><span
style='mso-tab-count:1'>†††††††††††††††† </span>Errors by default generate an
error message and immediately abort the program. Alternatively by setting </span><span
lang=EN-GB style='font-family:Courier'>mip-&gt;ERCON=TRUE</span><span
lang=EN-GB> error control is left to the user.</span></p><p class=MsoNormal style='margin-left:127.6pt;text-indent:-127.6pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:127.6pt;text-indent:-127.6pt'><span
lang=EN-GB style='font-family:Courier'>int ERNUM;</span><span lang=EN-GB><span
style='mso-tab-count:1'>†††††††††††††††††† </span>Number of the last error that
occurred.</span></p><p class=MsoNormal style='margin-left:127.6pt;text-indent:-127.6pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:127.6pt;text-indent:-127.6pt'><span
lang=EN-GB style='font-family:Courier'>char IOBUFF[ ];</span><span lang=EN-GB><span
style='mso-tab-count:1'>††††††† </span>Input/Output buffer.</span></p><p class=MsoNormal style='margin-left:127.6pt;text-indent:-127.6pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:127.6pt;text-indent:-127.6pt'><span
lang=EN-GB style='font-family:Courier'>int NTRY;</span><span lang=EN-GB><span
style='mso-tab-count:1'>††††††††††††††††††††† </span>Number of iterations used
in probabalistic primality test by isprime. Initialised to 6.</span></p><p class=MsoNormal style='margin-left:127.6pt;text-indent:-127.6pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:127.6pt;text-indent:-127.6pt'><span
lang=EN-GB style='font-family:Courier'>int *PRIMES;</span><span lang=EN-GB><span
style='mso-tab-count:1'>†††††††††††††† </span>Pointer to a table of small prime
numbers.</span></p><p class=MsoNormal style='margin-left:127.6pt;text-indent:-127.6pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:127.6pt;text-indent:-127.6pt'><span
lang=EN-GB style='font-family:Courier'>BOOL RPOINT;</span><span lang=EN-GB><span
style='mso-tab-count:1'>†††††††††††††† </span>If set to TRUE numbers are output
with a radix point. Otherwise they are output as fractions (the default).</span></p><p class=MsoNormal style='margin-left:127.6pt;text-indent:-127.6pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:127.6pt;text-indent:-127.6pt'><span
lang=EN-GB style='font-family:Courier'>BOOL TRACER;</span><span lang=EN-GB><span
style='mso-tab-count:1'>†††††††††††††† </span>If set to ON causes debug
information to be printed out, tracing the progress of all subsequent calls to
MIRACL routines. Initialised to OFF.</span></p><p class=MsoNormal style='margin-left:127.6pt;text-indent:-127.6pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><b style='mso-bidi-font-weight:normal'><span lang=EN-GB style='font-size:14.0pt;
mso-bidi-font-size:10.0pt;font-family:"Times New Roman";mso-fareast-font-family:
"Times New Roman";mso-font-kerning:.5pt;mso-ansi-language:EN-GB;mso-fareast-language:
AR-SA;mso-bidi-language:AR-SA'><br clear=all style='page-break-before:always'></span></b><h1 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level1 lfo1;tab-stops:
0cm'><a name="_toc5527"></a><&#33;[if &#33;supportLists]><span lang=EN-GB
style='mso-fareast-font-family:Arial;mso-bidi-font-family:Arial'><span
style='mso-list:Ignore'>11.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>MIRACL Error Messages</span></h1><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>MIRACL error messages, diagnosis and
response.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span lang=EN-GB>Message:<span
style='mso-tab-count:1'>††††††† </span></span></b><span lang=EN-GB
style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>Number
base too big for representation<o:p></o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Diagnosis:<span
style='mso-tab-count:1'>†††† </span></span></b><span lang=EN-GB>An attempt has
been made to input or output a number using a number base that is too big. For
example outputting using a number base of 2<sup>32</sup> is clearly impossible.
For efficiency the largest possible internal number base is used, but numbers
in this format should be input/output to a much smaller number base </span><span
lang=EN-GB style='font-family:Symbol'>£</span><span lang=EN-GB> 256. This error
typically arises when using using <i style='mso-bidi-font-style:normal'>innum</i>(.)
or <i style='mso-bidi-font-style:normal'>otnum</i>(.) after <i
style='mso-bidi-font-style:normal'>mirsys</i>(.,0<i style='mso-bidi-font-style:
normal'>)</i>.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Response:<span
style='mso-tab-count:1'>††††† </span></span></b><span lang=EN-GB>Perform a
change of base prior to input/output. For example set the instance variable <b
style='mso-bidi-font-weight:normal'>IOBASE</b> to 10, and then use <i
style='mso-bidi-font-style:normal'>cinnum</i>(.) or <i style='mso-bidi-font-style:
normal'>cotnum</i>(.). To avoid the change in number base, an alternatively is
to initialise MIRACL using something like <i style='mso-bidi-font-style:normal'>mirsys</i>(400,16<i
style='mso-bidi-font-style:normal'>)</i> which uses an internal base of 16. Now
Hex I/O can be performed using <i style='mso-bidi-font-style:normal'>innum</i>(.)
and <i style='mso-bidi-font-style:normal'>otnum</i>(.). Note that this will not
impact performance on a 32-bit processor, as 8 Hex digits will be packed into
each computer word.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB><o:p>&nbsp;</o:p></span></b></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Message:<span
style='mso-tab-count:1'>††††††† </span></span></b><span lang=EN-GB
style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>Division
by zero attempted<o:p></o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Diagnosis:</span></b><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'><span
style='mso-tab-count:1'>† </span></span><span lang=EN-GB>Self-explanatory</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Response:</span></b><span
lang=EN-GB><span style='mso-tab-count:1'>††††† </span>Don't do it&#33;</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB><o:p>&nbsp;</o:p></span></b></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Message:<span
style='mso-tab-count:1'>††††††† </span></span></b><span lang=EN-GB
style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>Overflow
- Number too big<o:p></o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Diagnosis:</span></b><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'><span
style='mso-tab-count:1'>† </span></span><span lang=EN-GB>A number in a
calculation is too big to be stored in its fixed length allocation of memory.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Response:</span></b><span
lang=EN-GB><span style='mso-tab-count:1'>††††† </span>Specify more storage
space for all <i style='mso-bidi-font-style:normal'>big</i> and <i
style='mso-bidi-font-style:normal'>flash</i> variables, by increasing the value
of <i style='mso-bidi-font-style:normal'>n</i> in the initial call to <i
style='mso-bidi-font-style:normal'>mirsys</i>(n.b);</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB><o:p>&nbsp;</o:p></span></b></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Message:<span
style='mso-tab-count:1'>††††††† </span></span></b><span lang=EN-GB
style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>Internal
Result is Negative<o:p></o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Diagnosis:<span
style='mso-tab-count:1'>†††† </span></span></b><span lang=EN-GB>This is an
internal error that should not occur using the high level MIRACL
functions.<span style="mso-spacerun:yes">† </span>It may be caused by user-induced
memory over-runs. </span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Response:<span
style='mso-tab-count:1'>††††† </span></span></b><span lang=EN-GB>Report to <a
href="mailto:mike@compapp.dcu.ie">mike@computing.dcu.ie</a><b style='mso-bidi-font-weight:
normal'><o:p></o:p></b></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB><o:p>&nbsp;</o:p></span></b></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Message:<span
style='mso-tab-count:1'>††††††† </span></span></b><span lang=EN-GB
style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>Input
Format Error<o:p></o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Diagnosis:</span></b><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'><span
style='mso-tab-count:1'>† </span></span><span lang=EN-GB>The number being input
contains one or more illegal symbols with respect to the current I/O number
base. For example this error might occur if <b style='mso-bidi-font-weight:
normal'>IOBASE</b> is set to 10, and a Hex number is input.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Response:</span></b><span
lang=EN-GB><span style='mso-tab-count:1'>††††† </span>Re-input the number, and
be careful to use only legal symbols. Note that for Hex input only upper-case
A-F are permissible.<br clear=all style='page-break-before:always'><b style='mso-bidi-font-weight:normal'><o:p>&nbsp;</o:p></b></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Message:<span
style='mso-tab-count:1'>††††††† </span></span></b><span lang=EN-GB
style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>Illegal
number base<o:p></o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Diagnosis:</span></b><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'><span
style='mso-tab-count:1'>† </span></span><span lang=EN-GB>The number base
specified in the call to <i style='mso-bidi-font-style:normal'>mirsys</i>(.) is
illegal. For example a number base of 1 is not allowed.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Response:</span></b><span
lang=EN-GB><span style='mso-tab-count:1'>††††† </span>Use a different number
base.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB><o:p>&nbsp;</o:p></span></b></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Message:<span
style='mso-tab-count:1'>††††††† </span></span></b><span lang=EN-GB
style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>Illegal
parameter usage<o:p></o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Diagnosis:</span></b><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'><span
style='mso-tab-count:1'>† </span></span><span lang=EN-GB>The parameters used in
a function call are not allowed. In certain cases certain parameters must be
distinct - for example in <i style='mso-bidi-font-style:normal'>divide</i>(.)
the first two parameters must refer to distinct <i style='mso-bidi-font-style:
normal'>big </i>variables.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Response:</span></b><span
lang=EN-GB><span style='mso-tab-count:1'>††††† </span>Read the documentation
for the function in question.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB><o:p>&nbsp;</o:p></span></b></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Message:<span
style='mso-tab-count:1'>††††††† </span></span></b><span lang=EN-GB
style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>Out of
space<o:p></o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Diagnosis:</span></b><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'><span
style='mso-tab-count:1'>† </span></span><span lang=EN-GB>An attempt has been
made by a MIRACL function to allocate too much heap memory.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Response:</span></b><span
lang=EN-GB><span style='mso-tab-count:1'>††††† </span>Reduce your memory
requirements. Try using a smaller value of <i style='mso-bidi-font-style:normal'>n</i>
in your initial call to <i style='mso-bidi-font-style:normal'>mirsys(n,b).<o:p></o:p></i></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span lang=EN-GB>Message:</span></b><span
lang=EN-GB><span style='mso-tab-count:1'>††††††† </span></span><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>Even
root of a negative number<o:p></o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Diagnosis:<span
style='mso-tab-count:1'>†††† </span></span></b><span lang=EN-GB>An attempt has
been made to find, for example, the square root of a negative number.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Response:</span></b><span
lang=EN-GB><span style='mso-tab-count:1'>††††† </span>Don't do it&#33;</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB><o:p>&nbsp;</o:p></span></b></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Message:</span></b><span
lang=EN-GB><span style='mso-tab-count:1'>††††††† </span></span><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>Raising
integer to negative power<o:p></o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Diagnosis:<span
style='mso-tab-count:1'>†††† </span></span></b><span lang=EN-GB>Self-explanatory.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Response:</span></b><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'><span
style='mso-tab-count:1'>†† </span></span><span lang=EN-GB>Don't do it&#33;</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Message:</span></b><span
lang=EN-GB><span style='mso-tab-count:1'>††††††† </span></span><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>Integer
operation attempted on flash number<o:p></o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Diagnosis:<span
style='mso-tab-count:1'>†††† </span></span></b><span lang=EN-GB>Certain
functions should only be used with <i style='mso-bidi-font-style:normal'>big</i>
numbers, and do not make sense for <i style='mso-bidi-font-style:normal'>flash</i>
numbers. Note that this error message is often provoked by memory problems,
where for example the memory allocated to a <i style='mso-bidi-font-style:normal'>big</i>
variable is accidentally over-written.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Response:</span></b><i
style='mso-bidi-font-style:normal'><span lang=EN-GB><span style='mso-tab-count:
1'>††††† </span></span></i><span lang=EN-GB>Don't do it&#33;</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB><o:p>&nbsp;</o:p></span></b></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Message:</span></b><span
lang=EN-GB><span style='mso-tab-count:1'>††††††† </span></span><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>Flash
overflow<o:p></o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Diagnosis:</span></b><span
lang=EN-GB><span style='mso-tab-count:1'>†††† </span>This error is provoked by
Flash overflow or underflow. The result is outside of the representable dynamic
range.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Response:</span></b><span
lang=EN-GB><span style='mso-tab-count:1'>††††† </span>Use bigger <i
style='mso-bidi-font-style:normal'>flash</i> numbers. Analyse your progam
carefully for numerical instability.<br clear=all style='page-break-before:
always'><b style='mso-bidi-font-weight:normal'><o:p>&nbsp;</o:p></b></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Message: <i
style='mso-bidi-font-style:normal'><span style="mso-spacerun:yes">†</span></i><span
style="mso-spacerun:yes">†</span></span></b><span lang=EN-GB><span
style='mso-tab-count:1'>†††† </span></span><span lang=EN-GB style='font-family:
"Courier New";mso-bidi-font-family:"Times New Roman"'>Numbers too big<o:p></o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Diagnosis:</span></b><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'><span
style='mso-tab-count:1'>† </span></span><span lang=EN-GB>The size of <i
style='mso-bidi-font-style:normal'>big</i> or <i style='mso-bidi-font-style:
normal'>flash</i> numbers requested in your call to <i style='mso-bidi-font-style:
normal'>mirsys(.)</i> are simply too big. The length of each <i
style='mso-bidi-font-style:normal'>big</i> and <i style='mso-bidi-font-style:
normal'>flash</i> is encoded into a single computer word. If there is
insufficient room for this encoding, this error message occurs.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Response:</span></b><span
lang=EN-GB><span style='mso-tab-count:1'>††††† </span>Build a MIRACL library
that uses a bigger &quot;underlying type&quot;. If not using Flash arithmetic,
build a library without it - this allows much bigger <i style='mso-bidi-font-style:
normal'>big</i> numbers to be used. </span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB><o:p>&nbsp;</o:p></span></b></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Message:</span></b><span
lang=EN-GB><span style='mso-tab-count:1'>††††††† </span></span><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>Log
of a non-positive number<o:p></o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Diagnosis:<span
style='mso-tab-count:1'>†††† </span></span></b><span lang=EN-GB>An attempt has
been made to calculate the logarithm of a non-positive <i style='mso-bidi-font-style:
normal'>flash</i> number.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Response:</span></b><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'><span
style='mso-tab-count:1'>†† </span></span><span lang=EN-GB>Don't do it&#33;</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Message:</span></b><span
lang=EN-GB><span style='mso-tab-count:1'>††††††† </span></span><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>Flash
to double conversion failure<o:p></o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Diagnosis:</span></b><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'><span
style='mso-tab-count:1'>† </span></span><span lang=EN-GB>An attempt to convert
a Flash number to the standard built-in C <i style='mso-bidi-font-style:normal'>double
</i>type has failed, probably because the Flash number is outside of the
dynamic range that can be represented as a <i style='mso-bidi-font-style:normal'>double.<o:p></o:p></i></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Response:<span
style='mso-tab-count:1'>††††† </span></span></b><span lang=EN-GB>Don't do it&#33;</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB><o:p>&nbsp;</o:p></span></b></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Message:</span></b><span
lang=EN-GB><span style='mso-tab-count:1'>††††††† </span></span><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>I/O
buffer overflow<o:p></o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Diagnosis:</span></b><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'><span
style='mso-tab-count:1'>† </span></span><span lang=EN-GB>An input output
operation has failed because the I/O buffer is not big enough.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Response:</span></b><span
lang=EN-GB><span style='mso-tab-count:1'>††††† </span>Allocate a bigger buffer by
calling <i style='mso-bidi-font-style:normal'>set_io_buffer_size(.)</i> after
calling <i style='mso-bidi-font-style:normal'>mirsys(.)</i>.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB><o:p>&nbsp;</o:p></span></b></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Message:</span></b><span
lang=EN-GB><span style='mso-tab-count:1'>††††††† </span></span><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>MIRACL
not initialised - no call to mirsys()<o:p></o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Diagnosis:</span></b><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'><span
style='mso-tab-count:1'>† </span></span><span lang=EN-GB>Self-explanatory</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Response:</span></b><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'><span
style='mso-tab-count:1'>†† </span></span><span lang=EN-GB>Don't do it&#33;</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB><o:p>&nbsp;</o:p></span></b></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Message:<span
style='mso-tab-count:1'>††††††† </span></span></b><span lang=EN-GB
style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>Illegal
modulus<o:p></o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Diagnosis:</span></b><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'><span
style='mso-tab-count:1'>† </span></span><span lang=EN-GB>The modulus specified
for use internally for Montgomery reduction, is illegal. Note that this modulus
must not be even.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Response:<span
style='mso-tab-count:1'>††††† </span></span></b><span lang=EN-GB>Use an odd
positive modulus.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB><o:p>&nbsp;</o:p></span></b></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Message:</span></b><span
lang=EN-GB><span style='mso-tab-count:1'>††††††† </span></span><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>No
modulus defined<o:p></o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Diagnosis:</span></b><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'><span
style='mso-tab-count:1'>† </span></span><span lang=EN-GB>No modulus has been
specified, yet a function which needs it has been called.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Response:</span></b><span
lang=EN-GB><span style='mso-tab-count:1'>††††† </span>Set a modulus for use internally
</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB><o:p>&nbsp;</o:p></span></b></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Message:<span
style='mso-tab-count:1'>††††††† </span></span></b><span lang=EN-GB
style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>Exponent
too big<o:p></o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Diagnosis:</span></b><span
lang=EN-GB><span style='mso-tab-count:1'>†††† </span>An attempt has been made
to perform a calculation using a pre-computed table, for an exponent (or
multiplier in the case of elliptic curves) bigger than that catered for by the
pre-computed table.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Response:</span></b><span
lang=EN-GB><span style='mso-tab-count:1'>††††† </span>Re-compute the table to
allow bigger exponents, or use a smaller exponent.<br clear=all
style='page-break-before:always'><b style='mso-bidi-font-weight:normal'><o:p>&nbsp;</o:p></b></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Message:</span></b><span
lang=EN-GB><span style='mso-tab-count:1'>††††††† </span></span><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>Number
base must be power of 2<o:p></o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Diagnosis:</span></b><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'><span
style='mso-tab-count:1'>† </span></span><span lang=EN-GB>A small number of
functions require that the number base specified in the initial call to <i
style='mso-bidi-font-style:normal'>mirsys(.)</i> is a power of 2.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Response:</span></b><span
lang=EN-GB><span style='mso-tab-count:1'>††††† </span>Use another function, or
specify a power-of-2 as the number base in the initial call to <i
style='mso-bidi-font-style:normal'>mirsys(.)<o:p></o:p></i></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB><o:p>&nbsp;</o:p></span></b></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Message:<span
style='mso-tab-count:1'>††††††† </span></span></b><span lang=EN-GB
style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>Specified
double-length type isn't<o:p></o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Diagnosis:</span></b><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'><span
style='mso-tab-count:1'>† </span></span><span lang=EN-GB>MIRACL has determined
that the double length type specified in <i style='mso-bidi-font-style:normal'>mirdef.h</i>
is in fact not double length. For example if the underlying type is 32-bits,
the double length type should be 64 bits.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Response:</span></b><span
lang=EN-GB><span style='mso-tab-count:1'>††††† </span>Don't do it&#33;</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB><o:p>&nbsp;</o:p></span></b></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Message:<span
style='mso-tab-count:1'>††††††† </span></span></b><span lang=EN-GB
style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'>Specified
basis is not irreducible<o:p></o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Diagnosis:</span></b><span
lang=EN-GB style='font-family:"Courier New";mso-bidi-font-family:"Times New Roman"'><span
style='mso-tab-count:1'>† </span></span><span lang=EN-GB>The basis specified
for GF(2<sup>m</sup>) arithmetic is not irreducible.</span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB>Response:</span></b><span
lang=EN-GB><span style='mso-tab-count:1'>††††† </span>Don't do it&#33;<span
style="mso-spacerun:yes">†† </span><br clear=all style='page-break-before:always'><b style='mso-bidi-font-weight:normal'><o:p>&nbsp;</o:p></b></span></p><h1 style='margin-left:0cm;text-indent:0cm;mso-list:l0 level1 lfo1;tab-stops:
0cm'><a name="_toc5624"></a><&#33;[if &#33;supportLists]><span lang=EN-GB
style='mso-fareast-font-family:Arial;mso-bidi-font-family:Arial'><span
style='mso-list:Ignore'>12.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><&#33;[endif]><span lang=EN-GB>The Hardware/Compiler Interface</span></h1><p class=MsoNormal style='margin-left:99.25pt;text-indent:-99.25pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:99.25pt;text-indent:-99.25pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>Hardware/compiler details are specified to
MIRACL in this header file <i style='mso-bidi-font-style:normal'>mirdef.h<o:p></o:p></i></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>For example:-</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:Courier'>/*
<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:Courier'><span
style="mso-spacerun:yes">†</span>*<span style="mso-spacerun:yes">††
</span>MIRACL compiler/hardware definitions - mirdef.h<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:Courier'><span
style="mso-spacerun:yes">†</span>*<span style="mso-spacerun:yes">†† </span>This
version suitable for use with most 32-bit <o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:Courier'><span
style="mso-spacerun:yes">†</span>*<span style="mso-spacerun:yes">††
</span>computers <o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:Courier'><span
style="mso-spacerun:yes">†</span>*<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:Courier'><span
style="mso-spacerun:yes">†</span>*<span style="mso-spacerun:yes">††
</span>Copyright (c) 1988-1999 Shamus Software Ltd.<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:Courier'><span
style="mso-spacerun:yes">†</span>*/<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:Courier'>#define
MIRACL_32<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:Courier'>#define
MR_LITTLE_ENDIAN<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:Courier'><span
style="mso-spacerun:yes">†††††††††††††††††††† </span>/* this may need to be
changed<span style="mso-spacerun:yes">††††††† </span>*/<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:Courier'>#define
mr_utype int /* the underlying type is usually int *<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:Courier'><span
style="mso-spacerun:yes">††††††††††††††††††††† </span>* but see mrmuldv.any<span
style="mso-spacerun:yes">††††††††††††††† </span>*/<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:Courier'>#define
mr_unsign32 unsigned long<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:Courier'><span
style="mso-spacerun:yes">†††††††††††††††††††† </span>/* 32 bit unsigned
type<span style="mso-spacerun:yes">†††††††††††††† </span>*/<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:Courier'>#define
MR_IBITS<span style="mso-spacerun:yes">† </span>32 /* number of bits in an int
*/<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:Courier'>#define
MR_LBITS<span style="mso-spacerun:yes">† </span>32 /* number of bits in a long
*/<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:Courier'>#define
MR_FLASH 52<span style="mso-spacerun:yes">† </span>/* delete this definition if
integer<span style="mso-spacerun:yes">† </span>*<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:Courier'><span
style="mso-spacerun:yes">††††††††††††††††††††† </span>* only version of MIRACL
required<span style="mso-spacerun:yes">††† </span>*<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:Courier'><span
style="mso-spacerun:yes">††††††††††††††††††††† </span>* Number of bits per
double mantissa */<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:Courier'>#define
MAXBASE ((mr_small)1&lt;&lt;(MIRACL-1))<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:Courier'>#define
MRBITSINCHAR 8<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:Courier'><span
style='mso-tab-count:3'>††††††††††††††††† </span><span
style="mso-spacerun:yes">†† </span>/* Number of bits in char type<span
style="mso-spacerun:yes">††††††† </span>*/<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:Courier'>/*
#define MR_NOASM<span style="mso-spacerun:yes">†† </span>* define this if using
C code only<span style="mso-spacerun:yes">†† </span>*<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:Courier'><span
style="mso-spacerun:yes">††††††††††††††††††††† </span>* Note: mr_dltype MUST be
defined<span style="mso-spacerun:yes">††† </span>*/<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:Courier'>/*
#define mr_dltype long long<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:Courier'><span
style="mso-spacerun:yes">††††††††††††††††††††† </span>* double-length type<span
style="mso-spacerun:yes">†††††††††††††††† </span>*/<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:Courier'>/*
<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:Courier'>#define
MR_STRIPPED_DOWN * define this to minimize size<span
style="mso-spacerun:yes">††† </span>*<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:Courier'><span
style="mso-spacerun:yes">††††††††††††††††††††† </span>* of library - all error
messages<span style="mso-spacerun:yes">††† </span>*<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:Courier'><span
style="mso-spacerun:yes">††††††††††††††††††††† </span>* lost&#33; USE WITH CARE -
see mrcore.c */<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB style='font-size:10.0pt;font-family:Courier'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>This file must be edited if porting to a
new hardware environment. Assembly language versions of the time-critical
routines in <i style='mso-bidi-font-style:normal'>mrmuldv.any</i> may also have
to be written, if not already provided, although in most cases the standard C
version <i style='mso-bidi-font-style:normal'>mrmuldv.ccc</i> can simply be
copied to <i style='mso-bidi-font-style:normal'>mrmuldv.c</i>.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal><span lang=EN-GB>It is best where possible to use the <i
style='mso-bidi-font-style:normal'>mirdef.h</i> file that is generated
automatically by the interactive <i style='mso-bidi-font-style:normal'>config.c</i>
program.</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><b style='mso-bidi-font-weight:normal'><span lang=EN-GB style='font-size:14.0pt;
mso-bidi-font-size:10.0pt;font-family:"Times New Roman";mso-fareast-font-family:
"Times New Roman";mso-font-kerning:.5pt;mso-ansi-language:EN-GB;mso-fareast-language:
AR-SA;mso-bidi-language:AR-SA'><br clear=all style='page-break-before:always'></span></b><h1 style='mso-list:none;tab-stops:36.0pt'><a name="_toc5672"></a><span
lang=EN-GB>Bibliography</span></h1><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>[Blake]<span style='mso-tab-count:1'>††††††††††† </span>BLAKE,
SEROUSSI, and SMART. Elliptic Curves in Cryptography, London Mathematical Society
Lecture Notes Series 265, Cambridge University Press. ISBN 0 521 65374 6, July
1999</span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>[Brassard]<span style='mso-tab-count:1'>†††††† </span>BRASSARD, G.
Modern Cryptology. Lecture Notes in Computer Science, Vol. 325. Springer-Verlag
1988.</span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>[Brent76]<span style='mso-tab-count:1'>††††††† </span>BRENT, R.P.
Fast Multiprecision Evaluation of Elementary Functions. J. ACM, 23, 2 (April
1976), 242-251. </span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>[Brent78]<span style='mso-tab-count:1'>††††††† </span>BRENT, R.P. A
Fortran Multiprecision Arithmetic Package. ACM Trans. Math. Software 4,1 (March
1978), 57-81. </span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>[Brick]<span style='mso-tab-count:1'>††††††††††† </span>BRICKELL, E,
et al, Fast Exponentiation with Precomputation, Proc. Eurocrypt 1992,
Springer-Verlag 1993.</span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>[Cherry]<span style='mso-tab-count:1'>††††††††† </span>CHERRY, L.
and MORRIS, R. BC - An Arbitrary Precision Desk-Calculator Language. in
ULTRIX-32 Supplementary Documents Vol. 1 General Users. Digital Equipment
Corporation 1984. </span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>[Comba]<span style='mso-tab-count:1'>††††††††† </span>COMBA, P.G.
Exponentiation Cryptosystems on the IBM PC. IBM Systems Journal, 29,4 (1990),
pp 526-538</span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:72.0pt;text-indent:-72.0pt'><span
lang=EN-GB>[CS]<span style='mso-tab-count:1'>†††††††††††††††† </span>CRAMER, R.
and SHOUP, V.<b style='mso-bidi-font-weight:normal'></b>A practical public key
cryptosystem provably secure against adaptive chosen ciphertext attack<span
style="mso-spacerun:yes">† </span>Proc. Crypto 1998, Springer-Verlag 1999</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>[DSS]<span style='mso-tab-count:1'>††††††††††††† </span>Digital
Signature Standard, Communications of the ACM, July 1992, Vol. 35 No. 7</span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=DE style='mso-ansi-language:DE'>[Gruen]<span style='mso-tab-count:1'>†††††††††† </span>GRUENBERGER,
F. Computer Recreations. </span><span lang=EN-GB>Scientific American, April
1984 </span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>[Jurisic]<span style='mso-tab-count:1'>†††††††††† </span>JURISIC, A
and MENEZES A.H. Elliptic Curves and Cryptography, Dr. Dobbs Journal, #264, April
1997</span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>[Knuth73]<span style='mso-tab-count:1'>†††††† </span>KNUTH, D.E. The
Art of Computer Programming, Vol 1: Fundamental Algorithms. Addison-Wesley,
Reading, Mass., 1973. </span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>[Knuth81]<span style='mso-tab-count:1'>†††††† </span>KNUTH, D.E. The
Art of Computer Programming, Vol 2: Seminumerical Algorithms. Addison-Wesley,
Reading, Mass., 1981. </span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>[Korn83]<span style='mso-tab-count:1'>†††††††† </span>KORNERUP, P.
and MATULA, D.W. Finite Precision Rational Arithmetic: An Arithmetic Unit. IEEE
Trans. Comput., C-32, 4 (April 1983), 378-387. </span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>[Korn85]<span style='mso-tab-count:1'>†††††††† </span>KORNERUP, P.
and MATULA, D.W. Finite Precision Lexicographic Continued Fraction Number Systems.
Proc. 7th Sym. on Comp. Arithmetic, IEEE Cat. \#85CH2146-9, 1985, 207-214. </span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>[LimLee]<span style='mso-tab-count:1'>†††††††† </span>LIM, C.H. and
LEE, P.J. A Key Recovery Attack on Discrete Log-based Schemes Using a Prime
Order Subgroup. Advances in Cryptology, Crypto '97, Springer-Verlag 1998</span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>[Marsaglia]<span style='mso-tab-count:1'>†††† </span>MARSAGLIA, G.M.
and ZAMAN, A. A New Class of Random Number Generators. The Annals of Applied
Probability, Vol. 1, 3, 1991, 462-480</span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>[Matula85]<span style='mso-tab-count:1'>†††† </span>MATULA, D.W. and
KORNERUP, P. Finite Precision Rational Arithmetic: Slash Number Systems. IEEE
Trans. Comput., C-34, 1 (January 1985), 3-18. </span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>[Maurer]<span style='mso-tab-count:1'>†††††††† </span>MAURER, U.M.
and YACOBI, Y. Non-Interactive Public Key Cryptography. Advances in
Cryptography, Eurocrypt '91, Springer Verlag, 1992</span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>[Menezes]<span style='mso-tab-count:1'>††††† </span>MENEZES, A.J.
Elliptic Curve Public key Crtyptosystems, Kluwer Academic Publishers, 1993</span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>[HAC]<span style='mso-tab-count:1'>††††††††††† </span>Handbook of
Applied Cryptography, CRC Press,<span style="mso-spacerun:yes">† </span>2001</span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>[McCurley]<span style='mso-tab-count:1'>††† </span>McCURLEY, K.S. A
Key Distribution System Equivalent to Factoring. J. Cryptology, Vol. 1. No. 2,
1988</span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>[Monty85]<span style='mso-tab-count:1'>†††† </span>MONTGOMERY, P.
Modular Multiplication Without Trial Division. Math. Comput., 44, (April 1985),
519-521</span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>[Monty87]<span style='mso-tab-count:1'>†††† </span>MONTGOMERY, P.
Speeding the Pollard and Elliptic Curve Methods. Math. Comput., 48, (January
1987), 243-264</span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>[Morrison]<span style='mso-tab-count:1'>††††† </span>MORRISON, M.A.
and BRILLHART, J. A Method of Factoring and the Factorization of F7. Math.
Comput., 29, 129 (January 1975), 183-205. </span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>[Pollard71]<span style='mso-tab-count:1'>††††† </span>POLLARD, J.M.
Fast Fourier Transform in a Finite Field. Math. Comput., 25, 114 (April 1971),
365-374</span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>[Pollard78]<span style='mso-tab-count:1'>††††† </span>POLLARD, J.M.
Monte Carlo Methods for Index Computation (<i style='mso-bidi-font-style:normal'>mod
p</i>). Math. Comp. Vol. 32, No. 143, pp 918-924, 1978</span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>[Pomerance]<span style='mso-tab-count:1'>††† </span>POMERANCE, C.
The Quadratic Sieve Factoring Algorithm. In Advances in Cryptology, Lecture
Notes in Computer Science, Vol. 209, Springer-Verlag, 1985, 169-182</span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>[Reisel]<span style='mso-tab-count:1'>†††††††††† </span>REISEL, H.
Prime Numbers and Computer methods for Factorisation. Birkhauser. 1987</span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>[Richter]<span style='mso-tab-count:1'>†††††††† </span>RICHTER, J.
Advanced Windows. Microsoft Press.</span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>[RSA]<span style='mso-tab-count:1'>†††††††††††† </span>RIVEST, R.,
SHAMIR, A. and ADLEMAN, L. A Method for obtaining Digital Signatures and
Public-Key Cryptosystems. Comm. ACM, 21,2 (February 1978), 120-126. </span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>[Rubin]<span style='mso-tab-count:1'>†††††††††† </span>RUBIN, P.
Personal Communication</span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>[Sch]<span style='mso-tab-count:1'>†††††††††††††† </span>SCHOOF, R.
Elliptic Curves Over Finite Fields and the Computation of Square Roots mod <i
style='mso-bidi-font-style:normal'>p</i>. Math. Comp. Vol. 44, No. 170. April
1985, pp 483-494</span></p><p class=MsoNormal><span lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>[Scott89a]<span style='mso-tab-count:1'>†††††† </span>SCOTT, M.P.J.
Fast rounding in multiprecision floating-slash arithmetic. IEEE Transactions on
Computers, July 1989, 1049-1052.</span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>[Scott89b]<span style='mso-tab-count:1'>†††††† </span>SCOTT, M.P.J.
On Using Full Integer Precision in C. Dublin City University Working Paper CA
0589, 1989.</span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>[Scott89c]<span style='mso-tab-count:1'>†††††† </span>SCOTT, M.P.J.
Factoring Large Integers on Small Computers. National Institute for Higher
Education Working Paper CA 0189, 1989</span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>[Scott92]<span style='mso-tab-count:1'>†††††††† </span>SCOTT, M.P.J.
and SHAFAíAMRY, M. Implementing an Identity-based Key Exchange algorithm.
Available from ftp.computing.dcu.ie /pub/crypto/ID-based_key_exchange.ps</span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>[Scott93]<span style='mso-tab-count:1'>†††††††† </span>SCOTT, M.P.J.
Novel Chaining Methods for Block Ciphers, Dublin City University, School of
Computer Applications Working Paper CA-1993 </span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>[Scott96]<span style='mso-tab-count:1'>†††††††† </span>SCOTT, M.P.J.
Comparison of methods for modular multiplication on 32-bit Intel 80x86 processors.
Available from ftp.computing.dcu.ie /pub/crypto/timings.ps</span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>[Shoup]<span style='mso-tab-count:1'>†††††††††† </span>SHOUP, V. A
New Polynomial Factorisation Algorithm and Its Implementation. Jl. Symbolic
Computation, 1996</span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>[Stinson]<span style='mso-tab-count:1'>†††††††† </span>STINSON, D.R.
Cryptography, Theory and practice. CRC Press, 1995</span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>[Silverman]<span style='mso-tab-count:1'>†††† </span>SILVERMAN, R.D.
The Multiple Polynomial Quadratic Sieve, Math. Comp. 48, 177, (January 1987),
329-339</span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>[Walmsley]<span style='mso-tab-count:1'>†††† </span>WALMSLEY, M.,
Multi-Threaded Programming in C++. Springer-Verlag 1999. </span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB>[WeiDai]<span style='mso-tab-count:1'>†††††††† </span>DAI , W.
Personal Communication</span></p><p class=MsoNormal style='margin-left:70.9pt;text-indent:-70.9pt'><span
lang=EN-GB><o:p>&nbsp;</o:p></span></p></div><div style='mso-element:footnote-list'><&#33;[if &#33;supportFootnotes]><br clear=all><hr align=left size=1 width="33%"><&#33;[endif]><div style='mso-element:footnote' id=ftn1><p class=MsoFootnoteText><a style='mso-footnote-id:ftn1' href="#_ftnref1"
name="_ftn1" title=""><span class=FootnoteCharacters><span lang=EN-GB><span
style='mso-special-character:footnote'><&#33;[if &#33;supportFootnotes]><span
class=FootnoteCharacters><span lang=EN-GB style='font-size:10.0pt;font-family:
"Times New Roman";mso-fareast-font-family:"Times New Roman";mso-ansi-language:
EN-GB;mso-fareast-language:AR-SA;mso-bidi-language:AR-SA'>[1]</span></span><&#33;[endif]></span></span></span></a><span
lang=EN-GB><span style='mso-tab-count:1'>†††††††††† </span> This manual
documents Version 5.2 of the MIRACL library</span></p></div></div></body></html>
